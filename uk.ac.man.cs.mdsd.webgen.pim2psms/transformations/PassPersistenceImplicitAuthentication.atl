-- @atlcompiler emftvm 
--
-- @path Website=/uk.ac.man.cs.mdsd.webgen.model/model/website.ecore
-- @path ORM=/uk.ac.man.cs.mdsd.orm.model/model/orm.ecore

module PassPersistenceImplicitAuthentication;
create dummyOrm : ORM refining orm : ORM, website : Website;

uses WebsiteHelpers;


helper context Website!Authentication def: getDataType(name : String) : ORM!DataType
	= let dataType : ORM!DataType = thisModule.findOrmDataType(name)
		in if not dataType.oclIsUndefined() then
			dataType
		else
			let webGenModel : Website!WebGenModel = thisModule.findWebGenModel()
			in if name = 'Boolean' then
					thisModule.implicitBooleanDataType(webGenModel)
				else if name = 'Email' then
					thisModule.implicitEmailDataType(webGenModel)
				else if name = 'String' then
					thisModule.implicitStringDataType(webGenModel)
				else
					OclUndefined
				endif endif endif
		endif;

helper context Website!Authentication def: getPersistentType(name : String) : String
	= let dataType : Website!DataType
			= Website!DataType.allInstancesFrom('website')->any(d | d.name = name)
		in if dataType.oclIsUndefined() then
			if name = 'Email' then
				'String'
			else
				name
			endif
		else
			dataType.persistentType()
		endif;

helper context Website!Authentication def: getOrmType(name : String) : String
	= let dataType : Website!DataType
			= Website!DataType.allInstancesFrom('website')->any(d | d.name = name)
		in if dataType.oclIsUndefined() then
			if name = 'Email' then
				'String'
			else
				name
			endif
		else
			dataType.ormType()
		endif;

rule OrmModel {
	from partialOrm : ORM!OrmModel
	to orm : ORM!OrmModel (
		dataTypes <-
			let website : Website!WebGenModel = thisModule.findWebGenModel()
			in partialOrm.dataTypes
				->union(
					if thisModule.findOrmDataType('Boolean').oclIsUndefined() then
						Sequence{thisModule.implicitBooleanDataType(website)}
					else
						Sequence{}
					endif)
				->union(
					if thisModule.findOrmDataType('String').oclIsUndefined() then
						Sequence{thisModule.implicitStringDataType(website)}
					else
						Sequence{}
					endif)
				->union(
					if thisModule.findOrmDataType('Email').oclIsUndefined() then
						Sequence{thisModule.implicitEmailDataType(website)}
					else
						Sequence{}
					endif),
		entitiesAndViews <-
			let website : Website!WebGenModel = thisModule.findWebGenModel()
			in let authentication : Website!Authentication
				= website.websiteProperties.authentication
			in partialOrm.entitiesAndViews
				->union(if authentication.oclIsUndefined()
							or website.websiteProperties.frameworkTechnology = #Symfony then
							Sequence{}
						else if authentication.oclIsTypeOf(Website!LocalAuthenticationSystem)
								and authentication.authentication.oclIsUndefined() then
							Sequence{thisModule.implicitAuthenticationSystemEntity(authentication)}
						else
							Sequence{}
						endif endif)
				->union(if authentication.oclIsUndefined()
							or website.websiteProperties.frameworkTechnology = #Symfony then
							Sequence{}
						else if authentication.oclIsTypeOf(Website!LocalAuthenticationSystem)
								and authentication.trackLoginAttempts then
							Sequence{thisModule.implicitLoginAttemptEntity(authentication)}
						else
							Sequence{}
						endif endif)
				->union(if authentication.oclIsUndefined()
							or website.websiteProperties.frameworkTechnology = #Symfony then
							Sequence{}
						else if authentication.oclIsTypeOf(Website!LocalAuthenticationSystem)
								and authentication.allowAutoLogin then
							Sequence{thisModule.implicitAutoLoginEntity(authentication)}
						else
							Sequence{}
						endif endif)
	)
}

unique lazy rule implicitBooleanDataType {
	from website: Website!WebGenModel
	to orm : ORM!DataType (
		name <- 'Boolean',
		displayLabel <- 'Boolean'
	)
	do {
		orm;
	}
}

unique lazy rule implicitEmailDataType {
	from website: Website!WebGenModel
	to orm : ORM!DataType (
		name <- 'Email',
		displayLabel <- 'Email'
	)
	do {
		orm;
	}
}

unique lazy rule implicitStringDataType {
	from website: Website!WebGenModel
	to orm : ORM!DataType (
		name <- 'String',
		displayLabel <- 'String'
	)
	do {
		orm;
	}
}


unique lazy rule implicitAuthenticationSystemEntity {
	from website: Website!Authentication
	to orm : ORM!Entity (
		name <- 'Authentication',
		tableName <- 'authentications',
		autoKeyName <- 'id',
		keys <- Sequence{email},
		displayLabel <- 'Authentication',
		features <- Sequence{username, password, salt, email, activated, banned,
				banReason, newPasswordKey, newPasswordRequested, newEmail,
				newEmailKey, lastIp, lastLogin}
			->union(
				if website.allowAutoLogin then
					Sequence{thisModule.implicitAutoLoginOpposite(website)}
				else
					Sequence{}
				endif)
	),
	username : ORM!SingletonElement (
		name <- 'username',
		displayLabel <- 'Username',
		dataType <- website.getDataType('String'),
		required <- true,
		"unique" <- true,
		columnName <- 'username',
		persistentType <- website.getPersistentType('String'),
		ormType <- website.getOrmType('String')
	),
	password : ORM!SingletonElement (
		name <- 'password',
		displayLabel <- 'Password',
		dataType <- website.getDataType('String'),
		required <- true,
		"unique" <- false,
		obfuscateFormFields <- true,
		encrypt <- true,
		columnName <- 'password',
		persistentType <- website.getPersistentType('String'),
		ormType <- website.getOrmType('String')
	),
	salt : ORM!SingletonElement (
		name <- 'salt',
		displayLabel <- 'SALT',
		dataType <- website.getDataType('String'),
		required <- true,
		"unique" <- false,
		obfuscateFormFields <- true,
		columnName <- 'salt',
		persistentType <- website.getPersistentType('String'),
		ormType <- website.getOrmType('String')
	),
	email : ORM!SingletonElement (
		name <- 'email',
		displayLabel <- 'Email',
		dataType <- website.getDataType('Email'),
		required <- true,
		"unique" <- true,
		caseInsensitive <- true,
		columnName <- 'email',
		persistentType <- website.getPersistentType('Email'),
		ormType <- website.getOrmType('Email')
	),
	activated : ORM!SingletonElement (
		name <- 'activated',
		displayLabel <- 'Activated',
		dataType <- website.getDataType('Boolean'),
		ormType <- website.getOrmType('Boolean'),
		required <- true,
		"unique" <- false,
		defaultValue <- activatedDefault,
		columnName <- 'activated',
		persistentType <- website.getPersistentType('Boolean'),
		ormType <- website.getOrmType('Boolean')
	),
	activatedDefault : ORM!IntegerLiteral (
		value <- 1
	),
	banned : ORM!SingletonElement (
		name <- 'banned',
		displayLabel <- 'Banned',
		dataType <- website.getDataType('Boolean'),
		required <- true,
		"unique" <- false,
		defaultValue <- bannedDefault,
		columnName <- 'banned',
		persistentType <- website.getPersistentType('Boolean'),
		ormType <- website.getOrmType('Boolean')
	),
	bannedDefault : ORM!IntegerLiteral (
		value <- 0
	),
	banReason : ORM!SingletonElement (
		name <- 'banReason',
		displayLabel <- 'Ban reason',
		dataType <- website.getDataType('String'),
		required <- false,
		"unique" <- false,
		columnName <- 'ban_reason',
		persistentType <- website.getPersistentType('String'),
		ormType <- website.getOrmType('String')
	),
	newPasswordKey : ORM!SingletonElement (
		name <- 'newPasswordKey',
		displayLabel <- 'New password Key',
		dataType <- website.getDataType('String'),
		required <- false,
		"unique" <- false,
		columnName <- 'new_password_key',
		persistentType <- website.getPersistentType('String'),
		ormType <- website.getOrmType('String')
	),
	newPasswordRequested : ORM!SingletonDate (
		name <- 'newPasswordRequested',
		displayLabel <- 'New Password Requested',
		required <- false,
		"unique" <- false,
		columnName <- 'new_password_requested',
		details <- #DateAndTime,
		ormType <- 'datetime'
	),
	newEmail : ORM!SingletonElement (
		name <- 'newEmail',
		displayLabel <- 'New Email',
		dataType <- website.getDataType('Email'),
		required <- false,
		"unique" <- false,
		columnName <- 'new_email',
		persistentType <- website.getPersistentType('Email'),
		ormType <- website.getOrmType('Email')
	),
	newEmailKey : ORM!SingletonElement (
		name <- 'newEmailKey',
		displayLabel <- 'New Email Key',
		dataType <- website.getDataType('String'),
		required <- false,
		"unique" <- false,
		columnName <- 'new_email_key',
		persistentType <- website.getPersistentType('String'),
		ormType <- website.getOrmType('String')
	),
	lastIp : ORM!SingletonElement (
		name <- 'lastIp',
		displayLabel <- 'lastIp',
		dataType <- website.getDataType('String'),
		required <- true,
		defaultValue <- lastIpDefault,
		"unique" <- true,
		columnName <- 'last_ip',
		persistentType <- website.getPersistentType('String'),
		ormType <- website.getOrmType('String')
	),
	lastIpDefault : ORM!StringLiteral (
		value <- '0.0.0.0'
	),
	lastLogin : ORM!SingletonDate (
		name <- 'lastLogin',
		displayLabel <- 'Last Login',
		required <- true,
		defaultValue <- lastLoginDefault,
		"unique" <- false,
		columnName <- 'last_login',
		details <- #DateAndTime,
		ormType <- 'datetime'
	),
	lastLoginDefault : ORM!StringLiteral (
		value <- '0000-00-00 00:00:00'
	)
	do {
		orm;
	}
}

unique lazy rule implicitLoginAttemptEntity {
	from website: Website!Authentication
	to orm : ORM!Entity (
		name <- 'LoginAttempt',
		tableName <- 'loginattempts',
		autoKeyName <- 'id',
		displayLabel <- 'Login Attempt',
		features <- Sequence{loginId, ipAddress, time}
	),
	loginId : ORM!SingletonElement (
		name <- 'loginId',
		displayLabel <- 'Login ID',
		dataType <- website.getDataType('String'),
		required <- true,
		"unique" <- false,
		columnName <- 'login_id',
		persistentType <- website.getPersistentType('String'),
		ormType <- website.getOrmType('String')
	),
	ipAddress : ORM!SingletonElement (
		name <- 'ipAddress',
		displayLabel <- 'IP Address',
		dataType <- website.getDataType('String'),
		required <- true,
		"unique" <- false,
		columnName <- 'ip_address',
		persistentType <- website.getPersistentType('String'),
		ormType <- website.getOrmType('String')
	),
	time : ORM!SingletonDate (
		name <- 'time',
		displayLabel <- 'Attempt Time',
		required <- true,
		"unique" <- false,
		columnName <- 'time',
		details <- #DateAndTime,
		ormType <- 'datetime'
	)
	do {
		orm;
	}
}

unique lazy rule implicitAutoLoginEntity {
	from website: Website!Authentication
	to orm : ORM!Entity (
		name <- 'AutoLogin',
		tableName <- 'autologins',
		autoKeyName <- 'id',
		displayLabel <- 'Automatic Login',
		features <- Sequence{key, thisModule.implicitAuthenticationFeature(website),
			userAgent, lastIpAddress, lastLogin}
	),
	key : ORM!SingletonElement (
		name <- 'key',
		displayLabel <- 'Key',
		dataType <- website.getDataType('String'),
		required <- true,
		"unique" <- false,
		columnName <- 'key',
		persistentType <- website.getPersistentType('String'),
		ormType <- website.getOrmType('String')
	),
	userAgent : ORM!SingletonElement (
		name <- 'userAgent',
		displayLabel <- 'User Agent',
		dataType <- website.getDataType('String'),
		required <- true,
		"unique" <- false,
		columnName <- 'user_agent',
		persistentType <- website.getPersistentType('String'),
		ormType <- website.getOrmType('String')
	),
	lastIpAddress : ORM!SingletonElement (
		name <- 'lastIpAddress',
		displayLabel <- 'Last IP Address',
		dataType <- website.getDataType('String'),
		required <- true,
		"unique" <- false,
		columnName <- 'last_ip_address',
		persistentType <- website.getPersistentType('String'),
		ormType <- website.getOrmType('String')
	),
	lastLogin : ORM!SingletonDate (
		name <- 'lastLogin',
		displayLabel <- 'Last Login',
		required <- true,
		"unique" <- false,
		columnName <- 'last_login',
		details <- #DateAndTime,
		ormType <- 'datetime'
	)
	do {
		orm;
	}
}

unique lazy rule implicitAuthenticationFeature {
	from website: Website!Authentication
	to orm: ORM!SingletonAssociation (
		name <- 'authentication',
		displayLabel <- 'Authentication',
		opposite <- thisModule.implicitAutoLoginOpposite(website),
		owningEnd <- true,
		required <- true,
		associationRelationship <- #ManyToOne,
		columnName <- 'authentication_id'
	)
	do {
		orm;
	}
}

unique lazy rule implicitAutoLoginOpposite {
	from website: Website!Authentication
	to orm : ORM!CollectionAssociation (
		name <- 'autoLogin',
		displayLabel <- 'autoLogin',
		owningEnd <- false,
		visible <- false,
		associationRelationship <- #OneToMany
-- multual instance creation
--		opposite <- thisModule.implicitAuthenticationFeature(website)
	)
	do {
		orm;
	}
}
