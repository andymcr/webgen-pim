-- @atlcompiler emftvm 
--
-- @path Website=/uk.ac.man.cs.mdsd.webgen.model/model/website.ecore
-- @path ORM=/uk.ac.man.cs.mdsd.orm.model/model/orm.ecore
-- @path WAF=/uk.ac.man.cs.mdsd.waf.model/model/Waf.ecore

module PassImplicitServiceEntityFeatures;
create dummyWaf : WAF refining waf : WAF, orm : ORM;

uses WebsiteHelpers;


helper def: findEntityService(entity : ORM!Entity) : WAF!Service
	= WAF!Service.allInstancesFrom('waf')
		->any(s | s.entities->select(e | e.name = entity.name)->notEmpty());


rule ServiceWithoutFeatures {
	from partialWaf : WAF!Service (partialWaf.features->isEmpty())
	to waf : WAF!Service (
		features <-
			let features : Sequence(ORM!Feature)
				= partialWaf.encapsulates->collect(e | e.features)->flatten()
				in features
					->select(f | f.oclIsKindOf(ORM!SingletonAttribute))
					->collect(f | thisModule.implicitServiceAttribute(f))
				->union(features
					->select(f | f.oclIsKindOf(ORM!SingletonAssociation))
					->select(f | f.owningEnd or f.visible or f.opposite.containment)
					->collect(f | thisModule.implicitServiceAssociation(f)))
				->union(features
					->select(f | f.oclIsKindOf(ORM!CollectionAssociation))
					->select(f | f.owningEnd or f.visible)
					->collect(f | thisModule.implicitServiceAssociation(f)))
	)
} 

lazy abstract rule implicitIncludedFeature {
	from orm : ORM!Feature
	to waf : WAF!IncludedFeature (
		displayLabel <- orm.displayLabel,
		headerClass <- orm.headerClass,
		inputClass <- orm.inputClass,
		displayClass <- orm.displayClass,
		footerClass <- orm.footerClass
	)
}

-- @extends implicitIncludedFeature
lazy abstract rule implicitIncludedAttribute {
	from orm : ORM!Attribute
	to waf : WAF!IncludedAttribute (
		obfuscateFormFields <-
			if orm.oclIsTypeOf(ORM!SingletonElement) then
				orm.obfuscateFormFields
			else
				false
			endif,
		defaultValue <-
			if not orm.defaultValue.oclIsUndefined() then
				orm.defaultValue.expressionDispatch()
			else
				OclUndefined
			endif
	)
}

-- @extends implicitIncludedFeature
lazy abstract rule implicitIncludedAssociation {
	from orm : ORM!Association
	to waf : WAF!IncludedAssociation (
	)
}

-- @extends implicitIncludedFeature
lazy abstract rule implicitServiceFeature {
	from orm : ORM!Feature
	to waf : WAF!ServiceFeature (
		name <- orm.name
	)
}

-- @extends implicitServiceFeature, implicitIncludedAttribute
lazy rule implicitServiceAttribute {
	from orm : ORM!SingletonAttribute
	to waf : WAF!ServiceAttribute (
		attribute <- orm,
		cardinality <-
			if orm.required and orm.defaultValue.oclIsUndefined() then
				#Required
			else
				#Optional
			endif,
		dateFormat <-
			if not orm.oclIsTypeOf(ORM!SingletonDate) then
				OclUndefined
			else
				if orm.details = #DateOnly then
					thisModule.findWebsiteProperties().defaultDateFormat
				else if orm.details = #TimeOnly then
					thisModule.findWebsiteProperties().defaultTimeFormat
				else
					thisModule.findWebsiteProperties().defaultDateTimeFormat
				endif endif
			endif
	)
	do {
		waf;
	}
}

-- @extends implicitServiceFeature, implicitIncludedAssociation
lazy rule implicitServiceAssociation {
	from orm : ORM!Association
	to waf : WAF!ServiceAssociation (
		association <- orm,
		cardinality <-
			if orm.oclIsTypeOf(ORM!SingletonAssociation) then
				if orm.required then
					#Required
				else
					#Optional
				endif
			else
				#Many
			endif
	)
	do {
		waf;
	}
}


helper context ORM!Expression def: expressionDispatch() : WAF!Expression
	= if self.oclIsUndefined() then
			OclUndefined
		else if self.oclIsKindOf(ORM!IntegerLiteral) then
			thisModule.createIntegerLiteral(self)
		else if self.oclIsKindOf(ORM!StringLiteral) then
			thisModule.createStringLiteral(self)
		else if self.oclIsKindOf(ORM!PredicateBooleanOperator) then
			thisModule.createPredicateBooleanOperator(self)
		else if self.oclIsKindOf(ORM!PredicateEqualityOperator) then
			thisModule.createPredicateEqualityOperator(self)
		else if self.oclIsKindOf(ORM!PredicateComparisonOperator) then
			thisModule.createPredicateComparisonOperator(self)
		else
			OclUndefined
		endif endif endif endif endif endif;

lazy abstract rule createLiteral {
	from orm : ORM!Literal
	to waf : WAF!Literal (
	)
}

-- @extends createLiteral
lazy rule createIntegerLiteral {
	from orm : ORM!IntegerLiteral
	to waf : WAF!IntegerLiteral (
		value <- orm.value
	)
	do {
		waf;
	}
}

-- @extends createLiteral
lazy rule createStringLiteral {
	from orm : ORM!StringLiteral
	to waf : WAF!StringLiteral (
		value <- orm.value
	)
	do {
		waf;
	}
}

lazy rule createFunction {
	from orm : ORM!Function
	to waf : WAF!Function (
		name <- orm.name
	)
	do {
		waf;
	}
}

lazy abstract rule createPredicate {
	from orm : ORM!Predicate
	to waf : WAF!Predicate (
		negated <- orm.negated
	)
}

-- @extends createPredicate
lazy rule createPredicateBooleanOperator {
	from orm : ORM!PredicateBooleanOperator
	to waf : WAF!PredicateBooleanOperator (
		expressions <- orm.expressions,
		operator <- orm.operator
	)
	do {
		waf;
	}
}

-- @extends createPredicate
lazy rule createPredicateEqualityOperator {
	from orm : ORM!PredicateEqualityOperator
	to waf : WAF!PredicateEqualityOperator (
		left <- orm.left,
		right <- orm.right
	)
	do {
		waf;
	}
}

-- @extends createPredicate
lazy rule createPredicateComparisonOperator {
	from orm : ORM!PredicateComparisonOperator
	to waf : WAF!PredicateComparisonOperator (
		left <- orm.left,
		operator <- orm.operator,
		right <- orm.right
	)
	do {
		waf;
	}
}
