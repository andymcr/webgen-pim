-- @atlcompiler emftvm 
--
-- @path Website=/uk.ac.man.cs.mdsd.webgen.model/model/website.ecore
-- @path ORM=/uk.ac.man.cs.mdsd.orm.model/model/orm.ecore
-- @path WAF=/uk.ac.man.cs.mdsd.waf.model/model/Waf.ecore

module PassImplicitService;
create waf : WAF from orm : ORM, partialWaf : WAF;

uses WebsiteHelpers;
uses CopyPartialWaf;


rule WafModel {
	from partialWaf : WAF!WafModel
	to waf : WAF!WafModel (
		persistence <- partialWaf.persistence,
		services <- partialWaf.services
			->union(let entities : Set(ORM!Entity)
				= partialWaf.persistence.entities
				in entities.asSet()->symmetricDifference(
					partialWaf.services->collect(s | s.entities)->flatten().asSet()
					).asSequence()
				->collect(e | thisModule.implicitService(e))
			),
		pages <- partialWaf.pages,
		menus <- partialWaf.menus,
		siteName <- partialWaf.siteName,
		siteTitle <- partialWaf.siteTitle,
		developmentVersion <- partialWaf.developmentVersion,
		baseURL <- partialWaf.baseURL,
		rewriteURLs <- partialWaf.rewriteURLs,
		webmasterEmail <- partialWaf.webmasterEmail,
		copyrightText <- partialWaf.copyrightText,
		metaDescription <- partialWaf.metaDescription,
		frameworkTechnology <- partialWaf.frameworkTechnology,
		ajaxTechnology <- partialWaf.ajaxTechnology,
		authentication <- partialWaf.authentication,
		captchaSiteKey <- partialWaf.captchaSiteKey,
		captchaSecretKey <- partialWaf.captchaSecretKey,
		textEditorURL <- partialWaf.textEditorURL,
		topNavigationId <- partialWaf.topNavigationId,
		sideMenu <- partialWaf.sideMenu,
		staticUnitsEditable <- partialWaf.staticUnitsEditable
	)
}


lazy rule implicitService {
	from orm : ORM!Entity
	to waf : WAF!Service (
-- TODO pularise
		name <- orm.name, 
		modelName <- orm.name,
		view <- false,
		entities <- Sequence{orm},
		daosUsed <- Sequence{orm}
	)
	do {
		waf;
	}
} 
