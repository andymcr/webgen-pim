-- @atlcompiler emftvm 
--
-- @path Website=/uk.ac.man.cs.mdsd.webgen.model/model/website.ecore
-- @path ORM=/uk.ac.man.cs.mdsd.orm.model/model/orm.ecore
-- @path WAF=/uk.ac.man.cs.mdsd.waf.model/model/Waf.ecore

module PassImplicitService;
create dummyWaf : WAF refining waf : WAF, orm : ORM;

uses WebsiteHelpers;


rule WafModel {
	from partialWaf : WAF!WafModel
	to waf : WAF!WafModel (
		services <- partialWaf.services
			->union(let entities : Set(ORM!Entity)
				= partialWaf.persistence.entitiesAndViews
					->select(e | e.oclIsTypeOf(ORM!Entity))
				in entities.asSet()->symmetricDifference(
					partialWaf.services
						->collect(s | s.entities)->flatten()
						->select(e | e.oclIsTypeOf(ORM!Entity)).asSet()
					).asSequence()
				->collect(e | thisModule.implicitServiceForEntity(e))
			)
			->union(let views : Set(ORM!View)
				= partialWaf.persistence.entitiesAndViews
					->select(v | v.oclIsTypeOf(ORM!View))
				in views.asSet()->symmetricDifference(
					partialWaf.services
						->collect(s | s.entities)->flatten()
						->select(v | v.oclIsTypeOf(ORM!View)).asSet()
					).asSequence()
				->collect(v | thisModule.implicitServiceForView(v))
			)
	)
}


lazy rule implicitServiceForEntity {
	from orm : ORM!Entity
	to waf : WAF!Service (
-- TODO pularise
		name <- orm.name, 
		modelName <- orm.name,
		view <- false,
		entities <- Sequence{orm},
		daosUsed <- Sequence{orm}
	)
	do {
		waf;
	}
} 

lazy rule implicitServiceForView {
	from orm : ORM!View
	to waf : WAF!Service (
-- TODO pularise
		name <- orm.name, 
		modelName <- orm.name,
		view <- false,
		entities <- Sequence{orm},
		daosUsed <- Sequence{orm}
	)
	do {
		waf;
	}
} 
