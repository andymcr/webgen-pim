-- @atlcompiler emftvm 
--
-- @path Website=/uk.ac.man.cs.mdsd.webgen.model/model/website.ecore
-- @path ORM=/uk.ac.man.cs.mdsd.orm.model/model/orm.ecore
-- @path WAF=/uk.ac.man.cs.mdsd.waf.model/model/Waf.ecore

module PassImplicitStaticInterface;
create waf : WAF from website : Website, orm : ORM, partialWaf : WAF;

uses WebsiteHelpers;
uses CopyPartialWaf;


rule WafModel {
	from website : Website!WebGenModel, partialWaf : WAF!WafModel
	to waf : WAF!WafModel (
		persistence <- partialWaf.persistence,
		services <- partialWaf.services,
		pages <- partialWaf.pages
			->union(
				if website.websiteProperties.staticUnitsEditable then
					Sequence{thisModule.implicitStaticTextPage(partialWaf)}
				else
					Sequence{}
				endif),
		menus <- partialWaf.menus,
		siteName <- partialWaf.siteName,
		siteTitle <- partialWaf.siteTitle,
		developmentVersion <- partialWaf.developmentVersion,
		baseURL <- partialWaf.baseURL,
		rewriteURLs <- partialWaf.rewriteURLs,
		webmasterEmail <- partialWaf.webmasterEmail,
		copyrightText <- partialWaf.copyrightText,
		metaDescription <- partialWaf.metaDescription,
		frameworkTechnology <- partialWaf.frameworkTechnology,
		ajaxTechnology <- partialWaf.ajaxTechnology,
		authentication <- partialWaf.authentication,
		captchaSiteKey <- partialWaf.captchaSiteKey,
		captchaSecretKey <- partialWaf.captchaSecretKey,
		textEditorURL <- partialWaf.textEditorURL,
		topNavigationId <- partialWaf.topNavigationId,
		sideMenu <- partialWaf.sideMenu,
		staticUnitsEditable <- partialWaf.staticUnitsEditable
	)
}

unique lazy rule implicitStaticTextPage {
	from partialWaf : WAF!WafModel
	to waf : WAF!Page (
		name <- 'ManageStaticText',
		displayLabel <- 'Manage Static Text',
		units <- Sequence{text, editText},
		authenticated <- true,
		topMenuOption <- #IncludeWhenAuthenticated,
		topMenuRank <- 100,
		navigationLabel <- 'Static Text',
		sideMenu <-
			thisModule.findPartialWafMenu(
				thisModule.findWebsiteProperties().sideMenu.name)
	),
	text : WAF!IndexGridUnit (
		name <- 'Text',
		displayLabel <- 'Text',
		service <- thisModule.findWafService('StaticText'),
		omitCaption <- false,
		defaultPaginationSize <- 10,
		nextPageLabel <- '&gt;',
		previousPageLabel <- '%lt;',
		displayFields <-
			let includedFeatures : Sequence(WAF!IncludedFeature)
				= thisModule.findWafService('StaticText').features
					->select(f | f.name = 'name')
				in includedFeatures
					->collect(f | thisModule.implicitUnitElement(f)),
		actions <- Sequence{editTextAction},
		styleClass <- 'unit index_unit framed',
		headerClass <- 'unit_header',
		captionClass <- 'unit_caption',
		controlClass <- 'unit_control',
		footerClass <- 'unit_footer',
		errorClass <- 'error',
		layoutClass <- 'index_layout',
		rowClasses <- 'odd_row even_row'
	),
	editTextAction : WAF!SelectAction (
		name <- 'edit',
		displayLabel <- 'Edit',
		target <- editText
	),
	editText : WAF!CreateUpdateUnit (
		name <- 'AddEditText',
		displayLabel <- 'Add/Edit Static Text',
		service <- thisModule.findWafService('StaticText'),
		omitCaption <- false,
		confirmLabel <- 'Save',
		clearLabel <- 'Clear',
		displayFields <-
			thisModule.findWafService('StaticText').features
				->collect(f | thisModule.implicitUnitElement(f)),
		styleClass <- 'unit update_unit framed',
		headerClass <- 'unit_header',
		captionClass <- 'unit_caption',
		controlClass <- 'unit_control',
		footerClass <- 'unit_footer',
		errorClass <- 'error',
		layoutClass <- 'input_form'
	)
	do {
		waf;
	}
}

lazy abstract rule implicitIncludedFeature {
	from partialWaf : WAF!IncludedFeature
	to waf : WAF!IncludedFeature (
		displayLabel <- partialWaf.displayLabel,
		headerClass <- partialWaf.headerClass,
		inputClass <- partialWaf.inputClass,
		displayClass <- partialWaf.displayClass,
		footerClass <- partialWaf.footerClass
	)
}

-- @extends implicitIncludedFeature
lazy abstract rule implicitIncludedElement {
	from partialWaf : WAF!IncludedElement
	to waf : WAF!IncludedElement (
		obfuscateFormFields <- partialWaf.obfuscateFormFields,
		dateFormat <- partialWaf.dateFormat
	)
}

--@extends implicitIncludedFeature
lazy abstract rule implicitUnitFeature {
	from partialWaf : WAF!ServiceEntityFeature
	to waf : WAF!UnitFeature (
		name <- partialWaf.name,
		cardinality <- partialWaf.cardinality,
		onlyDisplayWhenNotEmpty <- false
	)
}

-- @extends implicitUnitFeature, implicitIncludedElement
lazy rule implicitUnitElement {
	from partialWaf : WAF!ServiceEntityElement
	to waf : WAF!UnitElement (
		serviceFeature <- partialWaf
	)
	do {
		waf;
	}
}
