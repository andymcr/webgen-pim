-- @atlcompiler emftvm 
--
-- @path Website=/uk.ac.man.cs.mdsd.webgen.model/model/website.ecore
-- @path ORM=/uk.ac.man.cs.mdsd.orm.model/model/orm.xcore
-- @path WAF=/uk.ac.man.cs.mdsd.waf.model/model/Waf.xcore

module PassImplicitStaticInterface;
create dummyWaf : WAF refining waf : WAF, website : Website, orm : ORM;

uses WebsiteHelpers;


rule WafModel {
	from partialWaf : WAF!WafModel
	to waf : WAF!WafModel (
		pages <- 
			partialWaf.pages
				->union(
					if thisModule.findWebsiteProperties().staticUnitsEditable then
						Sequence{thisModule.implicitStaticTextPage(waf)}
					else
						Sequence{}
					endif)
	)
}

unique lazy rule implicitStaticTextPage {
	from partialWaf : WAF!WafModel
	to waf : WAF!Page (
		name <- 'ManageStaticText',
		displayLabel <- 'Manage Static Text',
		units <- Sequence{text, editText},
		authenticated <- true,
		uriElement <- 'static',
		topMenuOption <- #IncludeWhenAuthenticated,
		topMenuRank <- 100,
		navigationLabel <- 'Static Text',
		sideMenu <-
			let sideMenu : Website!Menu
				= thisModule.findWebsiteProperties().sideMenu
				in if sideMenu.oclIsUndefined() then
						OclUndefined
					else
						thisModule.findWafMenu(sideMenu.name)
					endif
	),
	text : WAF!IndexGridUnit (
		name <- 'Text',
		displayLabel <- 'Text',
		entities <- Sequence{thisModule.findOrmEntityOrView('StaticText')},
		omitCaption <- false,
		defaultPaginationSize <- 10,
		nextPageLabel <- '&gt;',
		previousPageLabel <- '%lt;',
		displayFields <-
			let features : Sequence(WAF!EntityFeature)
				= thisModule.findOrmEntityOrView('StaticText').features
				in features
					->collect(f | thisModule.implicitUnitAttribute(f)),
		actions <- Sequence{editTextAction},
		styleClass <- 'unit index_unit',
		headerClass <- 'unit_header',
		captionClass <- 'unit_caption',
		controlClass <- 'unit_control',
		footerClass <- 'unit_footer',
		errorClass <- 'error',
		contentClass <- 'index_layout framed',
		rowClasses <- 'odd_row even_row'
	),
	editTextAction : WAF!SelectAction (
		name <- 'edit',
		displayLabel <- 'Edit',
		target <- editText
	),
	editText : WAF!CreateUpdateUnit (
		name <- 'Edit',
		displayLabel <- 'Add/Edit Static Text',
		entities <- Sequence{thisModule.findOrmEntityOrView('StaticText')},
		omitCaption <- false,
		confirmLabel <- 'Save',
		clearLabel <- 'Clear',
		displayFields <-
			thisModule.findOrmEntityOrView('StaticText').features
				->collect(f | thisModule.implicitUnitAttribute(f)),
		styleClass <- 'unit update_unit',
		headerClass <- 'unit_header',
		captionClass <- 'unit_caption',
		controlClass <- 'unit_control',
		footerClass <- 'unit_footer',
		errorClass <- 'error',
		contentClass <- 'input_form framed'
	)
	do {
		waf;
	}
}

lazy abstract rule implicitUnitFeature {
	from partialWaf : ORM!EntityFeature
	to waf : WAF!UnitFeature (
		displayLabel <- partialWaf.displayLabel,
		inputClass <- 'input_attribute'
	)
}

-- @extends implicitUnitFeature
lazy rule implicitUnitAttribute {
	from partialWaf : ORM!SingletonElement
	to waf : WAF!UnitAttribute (
		attribute <- partialWaf,
		maximumDisplaySize <- 40
	)
	do {
		waf;
	}
}
