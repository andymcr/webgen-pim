-- @atlcompiler emftvm 
--
-- @path Website=/uk.ac.man.cs.mdsd.webgen.model/model/website.ecore
-- @path ORM=/uk.ac.man.cs.mdsd.orm.model/model/orm.ecore
-- @path JSF=/uk.ac.man.cs.mdsd.jsf.model/model/Jsf.ecore

module PassImplicitStaticInterface;
create jsf : JSF from website : Website, orm : ORM, partialJsf : JSF;

uses WebsiteHelpers;
uses CopyPartialJsf;


rule JsfModel {
	from website : Website!WebGenModel, partialJsf : JSF!JsfModel
	to jsf : JSF!JsfModel (
		persistence <- partialJsf.persistence,
		services <- partialJsf.services,
		pages <- partialJsf.pages
			->union(
				if website.websiteProperties.staticUnitsEditable then
					Sequence{thisModule.implicitStaticTextPage(partialJsf)}
				else
					Sequence{}
				endif),
		menus <- partialJsf.menus,
		siteName <- partialJsf.siteName,
		siteTitle <- partialJsf.siteTitle,
		baseURL <- partialJsf.baseURL,
		rewriteURLs <- partialJsf.rewriteURLs,
		webmasterEmail <- partialJsf.webmasterEmail,
		copyrightText <- partialJsf.copyrightText,
		metaDescription <- partialJsf.metaDescription,
		frameworkTechnology <- partialJsf.frameworkTechnology,
		ajaxTechnology <- partialJsf.ajaxTechnology,
		authentication <- partialJsf.authentication,
		captchaSiteKey <- partialJsf.captchaSiteKey,
		captchaSecretKey <- partialJsf.captchaSecretKey,
		topNavigationId <- partialJsf.topNavigationId,
		sideMenu <- partialJsf.sideMenu,
		staticUnitsEditable <- partialJsf.staticUnitsEditable
	)
}

unique lazy rule implicitStaticTextPage {
	from partialJsf : JSF!JsfModel
	to jsf : JSF!Page (
		name <- 'ManageStaticText',
		displayLabel <- 'Manage Static Text',
		units <- Sequence{text, editText},
		authenticated <- true,
		topMenuOption <- #IncludeWhenAuthenticated,
		topMenuRank <- 100,
		navigationLabel <- 'Static Text',
		sideMenu <-
			thisModule.findPartialJsfMenu(
				thisModule.findWebsiteProperties().sideMenu.name)
	),
	text : JSF!IndexGridUnit (
		name <- 'Text',
		displayLabel <- 'Text',
		service <- thisModule.findJsfService('StaticText'),
		omitCaption <- false,
		defaultPaginationSize <- 10,
		nextPageLabel <- '&gt;',
		previousPageLabel <- '%lt;',
		displayFields <-
			let includedFeatures : Sequence(JSF!IncludedFeature)
				= thisModule.findJsfService('StaticText').features
					->select(f | f.name = 'name')
				in includedFeatures
					->collect(f | thisModule.implicitUnitElement(f)),
		actions <- Sequence{editTextAction},
		styleClass <- 'unit index_unit framed',
		headerClass <- 'unit_header',
		captionClass <- 'unit_caption',
		controlClass <- 'unit_control',
		footerClass <- 'unit_footer',
		errorClass <- 'error',
		layoutClass <- 'index_layout',
		rowClasses <- 'odd_row even_row'
	),
	editTextAction : JSF!SelectAction (
		name <- 'edit',
		displayLabel <- 'Edit',
		target <- editText
	),
	editText : JSF!CreateUpdateUnit (
		name <- 'AddEditText',
		displayLabel <- 'Add/Edit Static Text',
		service <- thisModule.findJsfService('StaticText'),
		omitCaption <- false,
		confirmLabel <- 'Save',
		clearLabel <- 'Clear',
		displayFields <-
			thisModule.findJsfService('StaticText').features
				->collect(f | thisModule.implicitUnitElement(f)),
		styleClass <- 'unit update_unit framed',
		headerClass <- 'unit_header',
		captionClass <- 'unit_caption',
		controlClass <- 'unit_control',
		footerClass <- 'unit_footer',
		errorClass <- 'error',
		layoutClass <- 'input_form'
	)
	do {
		jsf;
	}
}

lazy abstract rule implicitIncludedFeature {
	from partialJsf : JSF!IncludedFeature
	to jsf : JSF!IncludedFeature (
		displayLabel <- partialJsf.displayLabel,
		headerClass <- partialJsf.headerClass,
		inputClass <- partialJsf.inputClass,
		displayClass <- partialJsf.displayClass,
		footerClass <- partialJsf.footerClass
	)
}

-- @extends implicitIncludedFeature
lazy abstract rule implicitIncludedElement {
	from partialJsf : JSF!IncludedElement
	to jsf : JSF!IncludedElement (
		obfuscateFormFields <- partialJsf.obfuscateFormFields,
		dateFormat <- partialJsf.dateFormat
	)
}

--@extends implicitIncludedFeature
lazy abstract rule implicitUnitFeature {
	from partialJsf : JSF!ServiceEntityFeature
	to jsf : JSF!UnitFeature (
		name <- partialJsf.name,
		cardinality <- partialJsf.cardinality,
		onlyDisplayWhenNotEmpty <- false
	)
}

-- @extends implicitUnitFeature, implicitIncludedElement
lazy rule implicitUnitElement {
	from partialJsf : JSF!ServiceEntityElement
	to jsf : JSF!UnitElement (
		serviceFeature <- partialJsf
	)
	do {
		jsf;
	}
}
