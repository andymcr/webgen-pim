-- @atlcompiler emftvm 
--
-- @path Website=/uk.ac.man.cs.mdsd.webgen.model/model/website.ecore
-- @path ORM=/uk.ac.man.cs.mdsd.orm.model/model/orm.xecore
-- @path Service=/uk.ac.man.cs.mdsd.service.model/model/Service.xecore

module ServiceExplicit;
create service : Service from website : Website, orm : ORM;

uses WebsiteHelpers;
uses ServiceExpression;


helper context Website!Expression def: findContainingSelection() : Website!Selection
	= if self.refImmediateComposite().oclIsUndefined() then
			OclUndefined
		else if self.refImmediateComposite().oclIsTypeOf(Website!Selection) then
			self.refImmediateComposite()
		else if self.refImmediateComposite().oclIsKindOf(Website!Expression) then
			self.refImmediateComposite().findContainingSelection()
		else
			OclUndefined
		endif endif endif ;

helper context Website!Feature def: findOrmFeature(reference : Website!ServiceFeatureReference) : ORM!Feature
	= if self.oclIsKindOf(Website!Attribute) then
			self.findOrmAttribute()
		else 
			let selection : Website!Selection = reference.findContainingSelection()
			in if selection.oclIsUndefined() then
					OclUndefined
				else
					self.findOrmAssociation(reference.findContainingSelection().usedBy.serves)
				endif
		endif;

helper context Website!Selection def: entities(xx : Sequence(Website!Association)) : Sequence(Website!EntityOrView)
	= if xx->isEmpty() then
			Sequence{self.usedBy.serves}
		else if xx->size() = 1 then
			if xx->last().partOf = self.usedBy.serves then
				Sequence{self.usedBy.serves, xx->last().targetEntity}
			else
				Sequence{self.usedBy.serves, xx->last().partOf}
			endif
		else
			let yy : Sequence(Website!EntityOrView)
				= self.entities(xx->subSequence(1, xx->size() -1))
				in if yy->includes(xx->last().partOf) then
						yy->union(Sequence{xx->last().targetEntity})
					else
						yy->union(Sequence{xx->last().partOf})
					endif
		endif endif;

helper context Website!Selection def: findOrmJoins(xx : Sequence(Website!Association)) : Sequence(ORM!Association)
	= if xx->isEmpty() then
			Sequence{}
		else if xx->size() = 1 then
			if xx->last().partOf = self.usedBy.serves then
				Sequence{xx->last().findOrmSourceAssociation()}
			else
				Sequence{xx->last().findOrmTargetAssociation()}
			endif
		else
			let yy : Sequence(Website!EntityOrView)
				= self.entities(xx->subSequence(1, xx->size() -1))
				in let zz : Sequence(ORM!Association)
					= self.findOrmJoins(xx->subSequence(1, xx->size() -1))
					in if yy->includes(xx->last().partOf) then
							zz->union(Sequence{xx->last().findOrmSourceAssociation()})
						else
							zz->union(Sequence{xx->last().findOrmTargetAssociation()})
						endif
			endif endif;


rule ServiceModel {
	from website : Website!Services
	to service : Service!ServiceModel (
		services <- website.services
	)
}


abstract rule NamedElement {
	from website : Website!NamedElement
	to service : Service!NamedElement (
		name <- website.name
	)
}

abstract rule FormalParameterList {
	from website : Website!FormalParameterList
	to service : Service!FormalParameterList (
		parameters <- website.parameters
	)
}

-- @extends NamedElement
rule FormalParameter {
	from website : Website!FormalParameter
	to service : Service!FormalParameter (
		dataType <-
			if website.dataType.oclIsUndefined() then
				website.dataType
			else
				thisModule.findOrmDataType(website.dataType.name)
			endif,
		defaultValue <-
			if website.defaultValue.oclIsUndefined() then
				website.defaultValue
			else if website.defaultValue.trim() <> '' then
				website.defaultValue.trim()
			else
				OclUndefined
			endif endif,
		placeholder <-
			if not website.placeholder.oclIsUndefined() then
				website.placeholder.trim()
			else
				website.name.createLabel()
			endif,
		description <- website.description
	)
}


-- @extends NamedElement
rule Service {
	from website : Website!Service
	to service : Service!Service (
		serves <-
			if website.serves.oclIsUndefined() then
				OclUndefined
			else
				thisModule.findOrmEntityOrView(website.serves.name)
			endif,
		selections <- website.selections,
		findAll <-
			if not website.findAll.oclIsUndefined() then
				website.findAll
			else if website.selections->select(s | s.name.toLower() = 'all')->notEmpty() then
				website.selections->any(s | s.name.toLower() = 'all')
			else
				OclUndefined
			endif endif,
		findOne <-
			if not website.findOne.oclIsUndefined() then
				website.findAll
			else if website.selections->select(s | s.name.toLower() = 'one')->notEmpty() then
				website.selections->any(s | s.name.toLower() = 'one')
			else
				OclUndefined
			endif endif,
		operations <- website.operations
	)
} 

-- @extends NamedElement, FormalParameterList
rule Selection {
	from website : Website!Selection
	to service : Service!Selection (
		"distinct" <- website."distinct",
		fields <- website.fields
			->collect(f | f.findOrmFeature()),
		joins <- website.findOrmJoins(website.joins),
		condition <- website.condition,
		filters <- website.filters,
		ordering <- website.ordering,
		limit <- website.limit,
		selected <- website.selected,
		methodName <-
			if not website.methodName.oclIsUndefined() and website.methodName.trim() <> '' then
			    website.methodName
			else
				'find'.concat(website.name.uppercaseFirst())
			endif
	)
}

-- @extends NamedElement
rule BusinessOperation {
	from website : Website!BusinessOperation
	to service : Service!BusinessOperation (
		uses <- website.uses,
		resultType <- website.resultType,
		resultMimeType <- website.resultMimeType
	)
}


-- @extends NamedElement, FormalParameterList
rule Filter {
	from website : Website!Filter
	to service : Service!Filter (
		displayLabel <-
			if not website.displayLabel.oclIsUndefined() and website.displayLabel <> '' then
				website.displayLabel
			else
				'Filter'
			endif,
		condition <- website.condition,
		methodName <-
			if not website.methodName.oclIsUndefined() and website.methodName.trim() <> '' then
			    website.methodName
			else
				'find'.concat(website.name.uppercaseFirst())
			endif
	)
}


abstract rule Order {
	from website : Website!Order
	to service : Service!Order (
		path <- website.path
	)
}

-- @extends Order
rule Asc {
	from website : Website!Asc
	to service : Service!Asc (
	)
}

-- @extends Order
rule Desc {
	from website : Website!Desc
	to service : Service!Desc (
	)
}


-- @extends NamedElement
rule Constant {
	from website : Website!Constant
	to service : Service!Constant (
		value <- website.value
	)
}

rule ServiceFeatureReference {
	from website : Website!ServiceFeatureReference
	to service : Service!FeatureReference (
		feature <-
			if website.feature.oclIsUndefined() then
				OclUndefined
			else
				website.feature.findOrmFeature(website)
			endif
	)
}

rule ParameterReference {
	from website : Website!ParameterReference (website.isServiceExpression())
	to service : Service!ParameterReference (
		parameter <- website.parameter
	)
}
