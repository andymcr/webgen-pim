-- @atlcompiler emftvm 
--
-- @path Website=/uk.ac.man.cs.mdsd.webgen.model/model/website.ecore
-- @path ORM=/uk.ac.man.cs.mdsd.orm.model/model/orm.ecore

module PassCollectionTypes;
create dummyOrm : ORM refining orm : ORM, website : Website;

uses WebsiteHelpers;


helper def: findWebsiteEntity(name : String) : Website!Entity
	= Website!Entity.allInstancesFrom('website')->any(e | e.name = name);

helper context Website!Entity def: getWebsiteFeature(featureName : String) : Website!Feature
	= self.features->any(f | f.name = featureName);

helper def: findOrmCollection(name : String) : ORM!DataType
	= ORM!CollectionType.allInstancesFrom('orm')
		->any(c | c.elementType.name = name );


rule CollectionElement {
	from partialOrm : ORM!CollectionElement
	to orm : ORM!CollectionElement (
		collectionType <-
			let parentEntity : Website!Entity
				= thisModule.findWebsiteEntity(partialOrm.parentEntity.name)
			in let websiteFeature : Website!Feature
					= parentEntity.getWebsiteFeature(partialOrm.name)
				in thisModule.findOrmCollection(
					websiteFeature.dataType.name )--,
--					websiteFeature.collectionType())
	)
}

rule CollectionAssociation {
	from partialOrm : ORM!CollectionAssociation
	to orm : ORM!CollectionAssociation (
		collectionType <- thisModule.findOrmCollection(
			partialOrm.opposite.parentEntity.name),
		associationRelationship <- partialOrm.associationRelationship
	)
}
