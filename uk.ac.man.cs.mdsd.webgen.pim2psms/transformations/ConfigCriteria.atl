-- @atlcompiler emftvm 
--
-- @path JSF=/uk.ac.man.cs.mdsd.jsf.model/model/Jsf.ecore
-- @path GEN=/uk.ac.man.cs.mdsd.genjsf.model/model/GenJsf.ecore

module ConfigCriteria;
create gen : GEN from jsf : JSF;


abstract rule Literal {
	from jsf : JSF!Literal
	to gen : GEN!GenLiteral (
	)
}

-- @extends Literal
rule NullLiteral {
	from jsf : JSF!NullLiteral
	to gen : GEN!GenNullLiteral (
	)
	do {
		gen.refSetValue('criteriaLiteral', jsf);
	}
}

-- @extends Literal
rule IntegerLiteral {
	from jsf : JSF!IntegerLiteral
	to gen : GEN!GenIntegerLiteral (
	)
	do {
		gen.refSetValue('criteriaLiteral', jsf);
	}
}

-- @extends Literal
rule StringLiteral {
	from jsf : JSF!StringLiteral
	to gen : GEN!GenStringLiteral (
	)
	do {
		gen.refSetValue('criteriaLiteral', jsf);
	}
}

-- @extends Literal
rule CurrentTime {
	from jsf : JSF!CurrentTime
	to gen : GEN!GenCurrentTime (
	)
	do {
		gen.refSetValue('criteriaLiteral', jsf);
	}
}


rule Function {
	from jsf : JSF!Function
	to gen : GEN!GenFunction (
	)
	do {
		gen.refSetValue('criteriaFunction', jsf);
	}
}


abstract rule Predicate {
	from jsf : JSF!Predicate
	to gen : GEN!GenPredicate (
	)
}


-- @extends Predicate
rule PredicateBooleanOperator {
	from jsf : JSF!PredicateBooleanOperator
	to gen : GEN!GenPredicateBooleanOperator (
		genExpressions <- jsf.expressions
	)
	do {
		gen.refSetValue('criteriaPredicate', jsf);
	}
}

-- @extends Predicate
rule PredicateEqualityOperator {
	from jsf : JSF!PredicateEqualityOperator
	to gen : GEN!GenPredicateEqualityOperator (
		genLeft <- jsf.left,
		genRight <- jsf.right
	)
	do {
		gen.refSetValue('criteriaPredicate', jsf);
	}
}

-- @extends Predicate
rule PredicateComparisonOperator {
	from jsf : JSF!PredicateComparisonOperator
	to gen : GEN!GenPredicateComparisonOperator (
		genLeft <- jsf.left,
		genRight <- jsf.right
	)
	do {
		gen.refSetValue('criteriaPredicate', jsf);
	}
}

-- @extends Predicate
rule PredicateIsOperator {
	from jsf : JSF!PredicateIsOperator
	to gen : GEN!GenPredicateIsOperator (
		genLeft <- jsf.left,
		genRight <- jsf.right
	)
	do {
		gen.refSetValue('criteriaPredicate', jsf);
	}
}

-- @extends Predicate
rule PredicateLikeOperator {
	from jsf : JSF!PredicateLikeOperator
	to gen : GEN!GenPredicateLikeOperator (
		genLeft <- jsf.left,
		genRight <- jsf.right
	)
	do {
		gen.refSetValue('criteriaPredicate', jsf);
	}
}

-- @extends Predicate
rule PredicateIsEmptyOperator {
	from jsf : JSF!PredicateIsEmpty
	to gen : GEN!GenPredicateIsEmpty (
		genFeature <- jsf.feature
	)
	do {
		gen.refSetValue('criteriaPredicate', jsf);
	}
}


rule ModelReference {
	from jsf : JSF!ModelReference
	to gen : GEN!GenModelReference (
		genUnit <- jsf.unit
	)
	do {
		gen.refSetValue('criteriaPath', jsf);
	}
}

rule FeatureReference {
	from jsf : JSF!FeatureReference
	to gen : GEN!GenFeatureReference (
		genField <- jsf.field
	)
	do {
		gen.refSetValue('criteriaPath', jsf);
	}
}

rule CurrentUserReference {
	from jsf : JSF!CurrentUserReference
	to gen : GEN!GenCurrentUserReference (
	)
	do {
		gen.refSetValue('criteriaPath', jsf);
	}
}


abstract rule Order {
	from jsf : JSF!Order
	to gen : GEN!GenOrder (
		genPath <- jsf.path
	)
}

-- @extends Order
rule Asc {
	from jsf : JSF!Asc
	to gen : GEN!GenOrder (
	)
	do {
		gen.refSetValue('criteriaOrder', jsf);
	}
}

-- @extends Order
rule Desc {
	from jsf : JSF!Desc
	to gen : GEN!GenOrder (
	)
	do {
		gen.refSetValue('criteriaOrder', jsf);
	}
}

