-- @atlcompiler emftvm 
--
-- @path Website=/uk.ac.man.cs.mdsd.webgen.model/model/website.ecore
-- @path ORM=/uk.ac.man.cs.mdsd.orm.model/model/orm.ecore
-- @path WAF=/uk.ac.man.cs.mdsd.waf.model/model/Waf.ecore

module PassExplicitInterface;
create waf : WAF from website : Website, orm : ORM;

uses WebsiteHelpers;


helper context String def: createName() : String
	= if self.trim().replaceAll('[A-Z]', '') = '' then
			self.trim()
		else
			self.trim().lowercaseFirst().replaceAll('([A-Z])', '_$1')
		endif;

helper context Website!Page def: pageSideMenu() : Website!Menu
	= if not self.sideMenu.oclIsUndefined() then
			self.sideMenu
		else if self.parentPage.oclIsUndefined() then
			thisModule.findWebsiteProperties().sideMenu
		else
			self.parentPage.targetPage.pageSideMenu()
		endif endif;


helper context Website!Service def: feature(name : String) : Website!ServiceFeature
	= self.features->any(f | f.name = name);


helper context Website!Feature def: featureCardinality(localRequired : Boolean) : Boolean
		= if self.cardinality = #Optional then
				if localRequired then
					#Required
				else
					#Optional
				endif
			else
				self.cardinality
			endif;

helper context Website!Association def: featureTargetCardinality(localRequired : Boolean) : Boolean
		= if self.oclIsTypeOf(Website!AssociationWithContainment) then
				#Required
			else if self.oclIsTypeOf(Website!EncapsulatedAssociation) then
				self.association.featureTargetCardinality(localRequired)
			else
				if self.targetCardinality = #Optional then
					if localRequired then
						#Required
					else
						#Optional
					endif
				else
					self.targetCardinality
				endif
			endif endif;

helper context Website!ServiceAttribute def: serviceCardinality(localRequired : Boolean) : Boolean
	= self.attribute.featureCardinality(self.required or localRequired);

helper context Website!ServiceAssociation def: serviceCardinality(localRequired : Boolean) : Boolean
	= if self.useAssociationSource then
			self.association.featureCardinality(self.required or localRequired)
		else
			self.association.featureTargetCardinality(self.required or localRequired)
		endif;

helper context Website!UnitElement def: unitCardinality() : Boolean
	= if not self.serviceFeature.oclIsUndefined() then
			self.serviceFeature.serviceCardinality(self.required)
		else
			self.attribute.featureCardinality(self.required)
		endif;

helper context Website!UnitAssociation def: unitCardinality() : Boolean
	= if not self.serviceFeature.oclIsUndefined() then
			self.serviceFeature.serviceCardinality(self.required)
		else
if not self.association.oclIsUndefined() then
			if self.useAssociationSource then
				self.association.featureCardinality(self.required)
			else
				self.association.featureTargetCardinality(self.required)
			endif
else
	#Optional
endif
		endif;

helper context Website!InterfaceField def: unitCardinality() : ORM!Cardinality
	= if self.required then
			#Required
		else
			#Optional
		endif;


helper context Website!Attribute def: attributeLabel() : String
	= if not self.displayLabel.oclIsUndefined() and self.displayLabel <> '' then
			self.displayLabel
		else
			self.name.createLabel()
		endif;

helper context Website!Association def: associationLabel() : String
	= if not self.displayLabel.oclIsUndefined() and self.displayLabel <> '' then
			self.displayLabel
		else
			self.name.createLabel()
		endif;

helper context Website!Association def: associationTargetLabel() : String
	= if self.oclIsTypeOf(Website!EncapsulatedAssociation) then
			self.association.associationTargetLabel()
		else
			if not self.targetDisplayLabel.oclIsUndefined() and self.targetDisplayLabel <> '' then
				self.targetDisplayLabel
			else
				self.targetFeatureName().createLabel()
			endif
		endif;

helper context Website!ServiceAttribute def: attributeLabel() : String
	= if not self.displayLabel.oclIsUndefined() and  self.displayLabel <> '' then
			self.displayLabel
		else
			self.attribute.attributeLabel()
		endif;

helper context Website!ServiceAssociation def: associationLabel() : String
	= if not self.displayLabel.oclIsUndefined() and  self.displayLabel <> '' then
			self.displayLabel
		else
			if self.useAssociationSource then
				self.association.associationLabel()
			else
				self.association.associationTargetLabel()
			endif
		endif;

helper context Website!UnitElement def: attributeLabel() : String
	= if not self.displayLabel.oclIsUndefined() and  self.displayLabel <> '' then
			self.displayLabel
		else if not self.serviceFeature.oclIsUndefined() then
			self.serviceFeature.attributeLabel()
		else
			self.attribute.attributeLabel()
		endif endif;

helper context Website!UnitAssociation def: associationLabel() : String
	= if not self.displayLabel.oclIsUndefined() and  self.displayLabel <> '' then
			self.displayLabel
		else if not self.serviceFeature.oclIsUndefined() then
			self.serviceFeature.associationLabel()
else if not self.association.oclIsUndefined() then
		if self.useAssociationSource then
			self.association.associationLabel()
		else
if self.association.oclIsKindOf(Website!EntityAssociation) then
			self.association.associationTargetLabel()
else
	'HELP!!'
endif
		endif 
else
	'HELP (undefined)!!'
endif
		endif endif;


helper context Website!Attribute def: interfaceType() : String
	= if self.oclIsTypeOf(Website!DataTypeAttribute) then
			if not self.interfaceType.oclIsUndefined() and self.interfaceType <> '' then
				self.interfaceType
			else
				if self.oclIsTypeOf(Website!DataTypeAttribute) then
					self.dataType.interfaceType
				else
					self.name.lowercaseFirst()
				endif
			endif
		else if self.oclIsTypeOf(Website!DateAttribute) then
			if self.details = #DateAndTime then
				'datetime'
			else if self.details = #Date then
				'date'
			else
				'time'
			endif endif
		else
			OclUndefined
		endif endif;

helper context Website!ServiceAttribute def: interfaceType() : String
	= if not self.interfaceType.oclIsUndefined() and self.interfaceType <> '' then
			self.interfaceType
		else
			self.attribute.interfaceType()
		endif;

helper context Website!Attribute def: placeholder() : String
	= if not self.placeholder.oclIsUndefined() and self.placeholder <> '' then
			self.placeholder
		else
			if self.oclIsTypeOf(Website!DataTypeAttribute) then
				self.dataType.placeholder
			else
				OclUndefined
			endif
		endif;

helper context Website!ServiceAttribute def: placeholder() : String
	= if not self.placeholder.oclIsUndefined() and self.placeholder <> '' then
			self.placeholder
		else
			self.attribute.placeholder()
		endif;

helper context Website!Attribute def: validationPattern() : String
	= if not self.validationPattern.oclIsUndefined() and self.validationPattern <> '' then
			self.validationPattern
		else
			if self.oclIsTypeOf(Website!DataTypeAttribute) then
				self.dataType.validationPattern
			else
				OclUndefined
			endif
		endif;

helper context Website!ServiceAttribute def: validationPattern() : String
	= if not self.validationPattern.oclIsUndefined() and self.validationPattern <> '' then
			self.validationPattern
		else
			self.attribute.validationPattern()
		endif;

helper context Website!Attribute def: dateFormat() : String
	= if self.oclIsTypeOf(Website!EncapsulatedAttribute) then
			self.attribute.dateFormat()
		else if not self.oclIsTypeOf(Website!DateAttribute) then
			OclUndefined
		else if not self.format.oclIsUndefined() and self.format <> '' then
			self.format
		else
			if self.details = #DateOnly then
				thisModule.findWebsiteProperties().defaultDateFormat
			else if self.details = #TimeOnly then
				thisModule.findWebsiteProperties().defaultTimeFormat
			else
				thisModule.findWebsiteProperties().defaultDateTimeFormat
			endif endif
		endif endif endif;

helper context Website!ServiceAttribute def: dateFormat() : String
	= if not self.dateFormat.oclIsUndefined() and self.dateFormat <> '' then
			self.dateFormat
		else
			self.attribute.dateFormat()
		endif;

helper context Website!UnitField def: dateFormat() : String
	= if not self.dateFormat.oclIsUndefined() and self.dateFormat <> '' then
			self.dateFormat
		else if self.oclIsKindOf(Website!InterfaceField) then
			if self.oclIsTypeOf(Website!DateField) then
				self.format
			else
				OclUndefined
			endif
		else if self.oclIsTypeOf(Website!UnitAssociation) and not self.childFeature.oclIsUndefined() then
			self.childFeature.dateFormat()
		else if not self.serviceFeature.oclIsUndefined() then
			if self.serviceFeature.oclIsTypeOf(Website!ServiceAttribute) then
				self.serviceFeature.dateFormat()
			else
				OclUndefined
			endif
		else
			if self.oclIsTypeOf(Website!UnitElement) then
				self.attribute.dateFormat()
			else
				OclUndefined
			endif
		endif endif endif endif;

helper context Website!ServiceFeatureReference def: dateFormat() : String
	= if self.oclIsTypeOf(Website!ServiceAttributeReference) then
			self.attribute.dateFormat()
		else
			if self.childFeature.oclIsUndefined() then
				OclUndefined
			else
				self.childFeature.dateFormat()
			endif
		endif;


rule WafModel {
	from website : Website!WebGenModel, orm : ORM!OrmModel
	to waf : WAF!WafModel (
		persistence <- orm,
		services <- website.services,
		pages <- website.pages,
		menus <- website.menus,
		siteName <- website.websiteProperties.projectName,
		siteTitle <- website.websiteProperties.siteTitle,
		developmentVersion <- website.websiteProperties.developmentVersion,
		baseURL <- website.websiteProperties.baseURL,
		rewriteURLs <- website.websiteProperties.rewriteURLs,
		webmasterEmail <- website.websiteProperties.webmasterEmail,
		copyrightText <-
			if not website.websiteProperties.copyrightText.oclIsUndefined() and website.websiteProperties.copyrightText <> '' then
				website.websiteProperties.copyrightText
			else
				'&copy; '.concat(website.websiteProperties.siteTitle).concat(' <?php echo date("Y"); ?>')
			endif,
		metaDescription <- website.websiteProperties.metaDescription,
		frameworkTechnology <- website.websiteProperties.frameworkTechnology,
		ajaxTechnology <- website.websiteProperties.ajaxTechnology,
		captchaSiteKey <- website.websiteProperties.captchaSiteKey,
		captchaSecretKey <- website.websiteProperties.captchaSecretKey,
		textEditorURL <- website.websiteProperties.textEditorURL,
		topNavigationId <- website.websiteProperties.topNavigationId,
		sideMenu <- website.websiteProperties.sideMenu,
		staticUnitsEditable <- website.websiteProperties.staticUnitsEditable
	)
}


abstract rule NamedElement {
	from website : Website!NamedElement
	to waf : WAF!NamedElement (
		name <- website.name
	)
}

-- @extends NamedElement
abstract rule NamedDisplayElement {
	from website : Website!NamedDisplayElement
	to waf : WAF!NamedDisplayElement (
		displayLabel <-
			if not website.displayLabel.oclIsUndefined() and website.displayLabel <> '' then
				website.displayLabel
			else
				website.name.createLabel()
			endif
	)
}


abstract rule IncludedFeature {
	from website : Website!IncludedFeature
	to waf : WAF!IncludedFeature (
		forcedValue <- website.forcedValue,
		footer <- website.footer
	)
}

-- @extends IncludedFeature
abstract rule IncludedAttribute {
	from website : Website!IncludedElement
	to waf : WAF!IncludedAttribute (
		obfuscateFormFields <- website.obfuscateFormFields,
		defaultValue <- website.defaultValue,
		headerClass <-
			if not website.headerClass.oclIsUndefined() and website.headerClass <> '' then
				website.headerClass
			else
				if not website.attribute.oclIsUndefined() then
					website.attribute.headerClass
				else
					''
				endif
			endif,
		inputClass <-
			if not website.inputClass.oclIsUndefined() and website.inputClass <> '' then
				website.inputClass
			else
				if not website.attribute.oclIsUndefined() then
					website.attribute.inputClass
				else
					''
				endif
			endif,
		displayClass <-
			if not website.displayClass.oclIsUndefined() and website.displayClass <> '' then
				website.displayClass
			else
				if not website.attribute.oclIsUndefined() then
					website.attribute.displayClass
				else
					''
				endif
			endif,
		footerClass <-
			if not website.footerClass.oclIsUndefined() and website.footerClass <> '' then
				website.footerClass
			else
				if not website.attribute.oclIsUndefined() then
					website.attribute.footerClass
				else
					''
				endif
			endif
	)
}

-- @extends IncludedFeature
abstract rule IncludedAssociation {
	from website : Website!IncludedAssociation
	to waf : WAF!IncludedAssociation (
		headerClass <-
			if not website.headerClass.oclIsUndefined() and website.headerClass <> '' then
				website.headerClass
			else
				if not website.association.oclIsUndefined() then
					website.association.headerClass
				else
					''
				endif
			endif,
		inputClass <-
			if not website.inputClass.oclIsUndefined() and website.inputClass <> '' then
				website.inputClass
			else
				if not website.association.oclIsUndefined() then
					website.association.inputClass
				else
					''
				endif
			endif,
		displayClass <-
			if not website.displayClass.oclIsUndefined() and website.displayClass <> '' then
				website.displayClass
			else
				if not website.association.oclIsUndefined() then
					website.association.displayClass
				else
					''
				endif
			endif,
		footerClass <-
			if not website.footerClass.oclIsUndefined() and website.footerClass <> '' then
				website.footerClass
			else
				if not website.association.oclIsUndefined() then
					website.association.footerClass
				else
					''
				endif
			endif
	)
}


-- @extends NamedElement
rule Service {
	from website : Website!Service
	to waf : WAF!Service (
		encapsulates <-
			website.encapsulates->collect(e | thisModule.findOrmEntityOrView(e.name)),
		features <- website.features,
		keys <- website.keys,
		selections <- website.selections
	)
} 

-- @extends NamedElement
rule Selection {
	from website : Website!Selection
	to waf : WAF!Selection (
		parameters <- website.parameters,
		joins <- website.joins,
		filter <- website.filter,
		ordering <- website.ordering,
		limit <- website.limit
	)
}

-- @extends NamedElement
rule SelectionParameter {
	from website : Website!SelectionParameter
	to waf : WAF!SelectionParameter (
		defaultValue <- website.defaultValue
	)
}

-- @extends IncludedFeature
abstract rule ServiceFeature {
	from website : Website!ServiceFeature
	to waf : WAF!ServiceFeature (
		name <- website.name,
		cardinality <- website.serviceCardinality(website.required)
	)
}

-- @extends ServiceFeature, IncludedAttribute
rule ServiceAttribute {
	from website : Website!ServiceAttribute
	to waf : WAF!ServiceAttribute (
		displayLabel <- website.attributeLabel(),
		attribute <-
			website.attribute.findOrmEntityOrView()
				.getOrmFeature(website.attribute.name),
		interfaceType <- website.interfaceType(),
		placeholder <- website.placeholder(),
		validationPattern <- website.validationPattern(),
		dateFormat <- website.dateFormat()
	)
}

-- @extends ServiceFeature, IncludedAssociation
rule ServiceAssociation {
	from website : Website!ServiceAssociation
	to waf : WAF!ServiceAssociation (
		displayLabel <- website.associationLabel(),
		association <-
			if website.useAssociationSource then
				website.association.findOrmEntityOrView()
					.getOrmFeature(website.association.name)
			else
				thisModule.findOrmEntityOrView(website.association.targetEntityName())
					.getOrmFeature(website.association.targetFeatureName())
			endif

	)
}

abstract rule ServiceFeatureReference {
	from website : Website!ServiceFeatureReference
	to waf : WAF!ServiceFeatureReference (
	)
}

-- @extends ServiceFeatureReference
rule ServiceAttributeReference {
	from website : Website!ServiceAttributeReference
	to waf : WAF!ServiceAttributeReference (
		attribute <- website.attribute
	)
}

-- @extends ServiceFeatureReference
rule ServiceAssociationReference {
	from website : Website!ServiceAssociationReference
	to waf : WAF!ServiceAssociationReference (
		association <- website.association,
		childFeature <- website.childFeature
	)
}


-- @extends NamedDisplayElement, UnitContainer
rule Page {
	from website : Website!Page
	to waf : WAF!Page (
		authenticated <- website.authenticated,
		uriElement <- website.uriElement,
		parentPage <-
			if website.parentPage.oclIsUndefined() then
				OclUndefined
			else
				website.parentPage.targetPage
			endif,
		topMenuOption <-
			if website.topMenuOption = #NeverInclude then
				#NeverInclude
			else if website.topMenuOption = #AlwaysInclude then
				#AlwaysInclude
			else
				#IncludeWhenAuthenticated
			endif endif,
		topMenuRank <- website.topMenuRank,
		navigationLabel <-
			if not website.navigationLabel.oclIsUndefined() and website.navigationLabel <> '' then
				website.navigationLabel
			else
				website.name.createLabel()
			endif,
		sideMenu <- website.pageSideMenu(),
		styleClass <- website.styleClass
	)
}


-- @extends NamedDisplayElement
abstract rule Menu {
	from website : Website!Menu
	to waf : WAF!Menu (
		entries <- website.entries,
		omitCaption <-
			if not website.omitCaption.oclIsUndefined() then
				website.omitCaption
			else
				false
			endif,
		captionClass <- website.captionClass.replaceAll(',', ' '),
		styleClass <- website.styleClass.replaceAll(',', ' '),
		layoutClass <- website.layoutClass.replaceAll(',', ' ')
	)
}

abstract rule MenuEntry {
	from website : Website!MenuEntry
	to waf : WAF!MenuEntry (
	)
}

-- @extends Menu
rule StaticMenu {
	from website : Website!StaticMenu
	to waf : WAF!StaticMenu (
	)
}

-- @extends MenuEntry, NamedDisplayElement
rule ActionMenuEntry {
	from website : Website!ActionMenuEntry
	to waf : WAF!ActionMenuEntry (
		action <- website.destination,
		"query" <- website."query"
	)
}

-- @extends MenuEntry, NamedDisplayElement
rule EditStaticTextMenuEntry {
	from website : Website!EditStaticTextMenuEntry
	to waf : WAF!EditStaticTextMenuEntry (
	)
}

-- @extends Menu
rule DynamicMenu {
	from website : Website!DynamicMenu
	to waf : WAF!DynamicMenu (
		service <- website.service,
		selection <- website.selection,
		dynamicTitle <- website.dynamicTitle
	)
}

-- @extends NamedElement
rule Filter {
	from website : Website!Filter
	to waf : WAF!Filter (
		parameters <-
			if website.parameters->notEmpty() then
				website.parameters
			else
				Sequence{thisModule.implicitFilterParameter(website)}
			endif,
		selection <- website.selection
	)
}

-- @extends NamedElement
rule FilterParameter {
	from website : Website!FilterParameter
	to waf : WAF!FilterParameter (
		formal <- website.formal,
		dataType <- website.dataType,
		defaultValue <- website.defaultValue
	)
}

lazy rule implicitFilterParameter {
	from website : Website!Filter
	to waf : WAF!FilterParameter (
		name <- website.name
	)
}

rule Query {
	from website : Website!Query
	to waf : WAF!Query (
		filter <- website.filter,
		parameters <- website.parameters
	)
}

rule QueryParameter {
	from website : Website!QueryParameter
	to waf : WAF!QueryParameter (
		formal <- website.formal,
		value <- website.value
	)
}

abstract rule Selectable {
	from website : Website!Selectable
	to waf : WAF!Selectable (
	)
}


abstract rule UnitContainer {
	from website : Website!UnitContainer
	to waf : WAF!UnitContainer (
		units <- website.units
	)
}


-- @extends NamedDisplayElement
abstract rule ContentUnit {
	from website : Website!ContentUnit
	to waf : WAF!ContentUnit (
		uriElement <-
			if not website.uriElement.oclIsUndefined() then
				website.uriElement
			else if website.oclIsTypeOf(Website!IndexUnit) then
				OclUndefined
			else if website.oclIsKindOf(Website!EditUnit) then
				'edit'
			else
				website.name.lowercaseFirst()
			endif endif endif,
		uriParent <- website.uriParent,
		purposeSummary <- website.purposeSummary,
		omitCaption <-
			if not website.omitCaption.oclIsUndefined() then
				website.omitCaption
			else
				false
			endif,
		captionClass <- website.captionClass.replaceAll(',', ' '),
		styleClass <- website.styleClass.replaceAll(',', ' '),
		layoutClass <- website.layoutClass.replaceAll(',', ' ')
	)
}

-- @extends ContentUnit
rule StaticUnit {
	from website : Website!StaticUnit
	to waf : WAF!StaticUnit (
		content <- website.content
	)
}


-- @extends ContentUnit
abstract rule DynamicUnit {
	from website : Website!DynamicUnit
	to waf : WAF!DynamicUnit (
		service <-
			if website.source.oclIsTypeOf(Website!Service) then
				website.source
			else
				OclUndefined
			endif,
		displayFields <- website.displayFields,
		supportActions <- website.supportActions,
		parentAssociation <-
			if website.parentAssociation.oclIsUndefined() then
				website.parentAssociation
			else if website.useParentAssociationSource then
				website.parentAssociation.findOrmEntityOrView()
					.getOrmFeature(website.parentAssociation.name)
			else
				if website.parentAssociation.oclIsKindOf(Website!EntityAssociation) then
					thisModule.findOrmEntityOrView(website.parentAssociation.targetEntity.name)
						.getOrmFeature(website.parentAssociation.targetFeatureName())
				else
					website.association.findOrmEntityOrView()
						.getOrmFeature(website.parentAssociation.name)
				endif
			endif endif,
		header <- website.header,
		footer <- website.footer,
		headerClass <- website.headerClass,
		controlClass <- website.controlClass,
		footerClass <- website.footerClass,
		errorClass <- website.errorClass
	)
}

abstract rule UnitField {
	from website : Website!UnitField
	to waf : WAF!UnitField (
		cardinality <- website.unitCardinality(),
		dateFormat <- website.dateFormat()
	)
}

-- @extends UnitField, IncludedFeature, InlineActionContainer
abstract rule UnitFeature {
	from website : Website!UnitFeature
	to waf : WAF!UnitFeature (
		onlyDisplayWhenNotEmpty <- website.onlyDisplayWhenNotEmpty,
		displayOption <- website.collectionDisplayOption,
		maximumDisplaySize <- website.maximumDisplaySize,
		autofocus <- website.autofocus
	)
}

-- @extends UnitFeature, IncludedAttribute
rule UnitElement {
	from website : Website!UnitElement
	to waf : WAF!UnitElement (
		name <- website.name,
		attribute <- website.attribute.findOrmEntityOrView()
				.getOrmFeature(website.attribute.name),
		serviceFeature <- website.serviceFeature,
		displayLabel <- website.attributeLabel(),
		placeholder <-
			if not website.placeholder.oclIsUndefined() and website.placeholder <> '' then
				website.placeholder
			else if not website.serviceFeature.oclIsUndefined() then
				website.serviceFeature.placeholder()
			else
				website.attribute.placeholder()
			endif endif,
		validationPattern <-
			if not website.validationPattern.oclIsUndefined() and website.validationPattern <> '' then
				website.validationPattern
			else if not website.serviceFeature.oclIsUndefined() then
				website.serviceFeature.validationPattern()
			else
				website.attribute.validationPattern()
			endif endif
	)
}

-- @extends UnitFeature, IncludedAssociation, UnitContainer
rule UnitAssociation {
	from website : Website!UnitAssociation
	to waf : WAF!UnitAssociation (
		name <- website.name,
		association <-
			if website.useAssociationSource then
				website.association.findOrmEntityOrView()
					.getOrmFeature(website.association.name)
			else
if not website.association.oclIsUndefined() then
	if website.association.oclIsKindOf(Website!EntityAssociation) then
				thisModule.findOrmEntityOrView(website.association.targetEntity.name)
					.getOrmFeature(website.association.targetFeatureName())
	else
		website.association.findOrmEntityOrView()
			.getOrmFeature(website.association.name)
	endif
else
	OclUndefined
endif
			endif,
		serviceFeature <- website.serviceFeature,
		displayLabel <- website.associationLabel(),
		childFeature <- website.childFeature,
		selection <-
			if not website.selection.oclIsUndefined() then
				website.selection
			else if not website.serviceFeature.oclIsUndefined() then
				website.serviceFeature.selection
			else
				OclUndefined
			endif endif,
-- temp fix while move modellabels from service to entities
--		dynamicLabel <- 
--			if not website.dynamicLabel.oclIsUndefined() then
--				website.dynamicLabel
--			else
--				if website.serviceFeature.oclIsUndefined() then
--					OclUndefined
--				else if website.serviceFeature.oclIsTypeOf(Website!ServiceEntityAssociation) then
--					website.serviceFeature.dynamicLabel
--				else
--					OclUndefined
--				endif endif
--			endif,
--		filters <- website.filters,
		maximumDisplaySize <- website.maximumDisplaySize,
		displayOption <-
			if website.collectionDisplayOption = #LineDirection then
				#LineDirection
			else
				#PageDirection
			endif
	)
}

-- @extends UnitField, NamedDisplayElement
abstract rule InterfaceField {
	from website : Website!InterfaceField
	to waf : WAF!InterfaceField (
		cardinality <-
			if website.required.oclIsUndefined() then
				#Optional
			else
				if website.required then
					#Required
				else
					#Optional
				endif
			endif,
		defaultValue <- website.defaultValue,
		mustMatch <- website.mustMatch,
		inputClass <- website.inputClass
	)
}

-- @extends InterfaceField
rule DataTypeField {
	from website : Website!DataTypeField
	to waf : WAF!DataTypeField (
		dataType <- thisModule.findOrmDataType(website.dataType.name),
		encrypt <- website.encrypt,
		caseInsensitive <- website.caseInsensitive,
		obfuscateFormFields <- website.obfuscateFormFields
	)
}

-- @extends InterfaceField
rule DateField {
	from website : Website!DateField
	to waf : WAF!DateField (
		details <- website.details,
		format <- website.format
	)
}

-- @extends NamedDisplayElement
rule UnitSupportAction {
	from website : Website!UnitSupportAction
	to waf : WAF!UnitSupportAction (
		confirmMessage <- website.confirmMessage
	)
}


-- @extends DynamicUnit
abstract rule EditUnit {
	from website : Website!EditUnit
	to waf : WAF!EditUnit (
		confirmDestination <- website.confirmDestination,
		confirmLabel <-
			if not website.confirmLabel.oclIsUndefined() and website.confirmLabel <> '' then
				website.confirmLabel
			else
				if  website.oclIsTypeOf(Website!CreateUnit) then
					'Create'
				else if  website.oclIsTypeOf(Website!CreateUpdateUnit) then
					'Save'
				else if  website.oclIsTypeOf(Website!UpdateUnit) then
					'Update'
				else if  website.oclIsTypeOf(Website!MapUnit) then
					'Save'
				else
					'Edit'
				endif endif endif endif
			endif,
		cancelDestination <- website.cancelDestination,
		cancelLabel <-
			if not website.cancelLabel.oclIsUndefined() and website.cancelLabel <> '' then
				website.confirmLabel
			else
				'Cancel'
			endif
	)
}

-- @extends EditUnit
rule CreateUnit {
	from website : Website!CreateUnit
	to waf : WAF!CreateUnit (
	)
}

-- @extends EditUnit, Selectable
rule CreateUpdateUnit {
	from website : Website!CreateUpdateUnit
	to waf : WAF!CreateUpdateUnit (
		clearLabel <- website.clearLabel
	)
}

-- @extends EditUnit, Selectable
rule MapUnit {
	from website : Website!MapUnit
	to waf : WAF!MapUnit (
		readOnly <- website.readOnly,
		defaultZoomLevel <- website.defaultZoomLevel,
		location <- website.location,
		placeName <- website.placeName
	)
}

-- @extends EditUnit, Selectable
rule UpdateUnit {
	from website : Website!UpdateUnit
	to waf : WAF!UpdateUnit (
	)
}

-- @extends DynamicUnit
abstract rule DataUnit {
	from website : Website!DataUnit
	to waf : WAF!DataUnit (
		defaultSelection <- website.defaultSelection,
		title <-
			if website.title.oclIsUndefined() then
				website.title
			else if website.title.oclIsKindOf(Website!Attribute) then
				thisModule.findOrmEntityOrView(website.title.partOf.name)
					.getOrmFeature(website.title.name)
			else if website.title.oclIsTypeOf(Website!ModelLabel) then
				thisModule.findOrmEntityOrView(website.title.labelFor.name)
					.getOrmLabel(website.title.name)
			else
				website.title
			endif endif endif
	)
}

-- @extends DataUnit, Selectable
rule DetailsUnit {
	from website : Website!DetailsUnit
	to waf : WAF!DetailsUnit (
		onlyDisplayWhenNotEmpty <- website.onlyDisplayWhenNotEmpty,
		omitFieldLabels <- website.omitFieldLabels
	)
}

-- @extends DataUnit, InlineActionContainer
abstract rule IndexUnit {
	from website : Website!IndexUnit
	to waf : WAF!IndexUnit (
		omitColumnLabels <- website.omitColumnLabels,
		filters <- website.filters,
		pagination <- website.pagination,
		defaultPaginationSize <- website.defaultPaginationSize,
		nextPageLabel <- website.nextPageLabel,
		previousPageLabel <- website.previousPageLabel,
		useFirstLastPageLinks <- website.useFirstLastPageLinks,
		firstPageLabel <- website.firstPageLabel,
		lastPageLabel <- website.lastPageLabel,
		rowClasses <- website.rowClasses.replaceAll(',', ' ')
	)
}

-- @extends IndexUnit
rule IndexGridUnit {
	from website : Website!IndexUnit (website.displayOption = #Grid)
	to waf : WAF!IndexGridUnit (
	)
}

-- @extends IndexUnit
rule IndexPageDirectionUnit {
	from website : Website!IndexUnit (website.displayOption = #PageDirection)
	to waf : WAF!IndexPageDirectionUnit (
	)
}

-- @extends IndexUnit
rule IndexLineDirectionUnit {
	from website : Website!IndexUnit (website.displayOption = #LineDirection)
	to waf : WAF!IndexLineDirectionUnit (
	)
}

-- @extends DynamicUnit
abstract rule ControlUnit {
	from website : Website!ControlUnit
	to waf : WAF!ControlUnit (
		submitLabel <-
			if not website.submitLabel.oclIsUndefined() and website.submitLabel <> '' then
				website.submitLabel
			else
				if  website.oclIsKindOf(Website!SearchUnit) then
					'Search'
				else if  website.oclIsKindOf(Website!RegistrationUnit) then
					'Register'
				else if  website.oclIsKindOf(Website!LoginUnit) then
					'Login'
				else if  website.oclIsKindOf(Website!ForgottenPasswordUnit) then
					'Forgotton Password'
				else
					'Control'
				endif endif endif endif
			endif,
		cancelDestination <- website.cancelDestination,
		cancelLabel <- website.cancelLabel
	)
}

-- @extends ControlUnit
rule SearchUnit {
	from website : Website!SearchUnit
	to waf : WAF!SearchUnit (
		resultsDestination <- website.resultsDestination
	)
}

-- @extends EditUnit
rule RegistrationUnit {
	from website : Website!RegistrationUnit
	to waf : WAF!RegistrationUnit (
	)
}

-- @extends ControlUnit
rule LoginUnit {
	from website : Website!LoginUnit
	to waf : WAF!LoginUnit (
		loginIdField <- website.loginIdField,
		passwordField <- website.passwordField,
		rememberMeField <- website.rememberMeField
	)
}

-- @extends ControlUnit
rule ForgottenPasswordUnit {
	from website : Website!ForgottenPasswordUnit
	to waf : WAF!ForgottenPasswordUnit (
		loginIdField <- website.loginIdField
	)
}


abstract rule InlineActionContainer {
	from website : Website!InlineActionContainer
	to waf : WAF!InlineActionContainer (
		actions <- website.actions
	)
}

-- @extends NamedDisplayElement
abstract rule InlineAction {
	from website : Website!InlineAction
	to waf : WAF!InlineAction (
		header <- website.header,
		footer <- website.footer,
		headerClass <- website.headerClass,
		footerClass <- website.footerClass
	)
}


-- @extends InlineAction
rule SelectAction {
	from website : Website!SelectAction
	to waf : WAF!SelectAction (
		target <- website.target
	)
}

-- @extends InlineAction
rule DeleteAction {
	from website : Website!DeleteAction 
	to waf : WAF!DeleteAction (
		destination <- website.destination,
		confirmMessage <- 
			if not website.confirmMessage.oclIsUndefined() then
				website.confirmMessage
			else if not website.displayLabel.oclIsUndefined() then
				website.displayLabel.concat('?')
			else
				website.name.createLabel().concat('?')
			endif endif
	)
}

-- @extends InlineAction
rule FeatureSupportAction {
	from website : Website!FeatureSupportAction 
	to waf : WAF!FeatureSupportAction (
		confirmMessage <-
			if not website.confirmMessage.oclIsUndefined() and website.confirmMessage <> '' then
				website.confirmMessage
			else
				OclUndefined
			endif
	)
}


helper context Website!Expression def: isInterfaceContainer() : Boolean
	= if self.refImmediateComposite().oclIsUndefined() then
			false
		else if self.refImmediateComposite().oclIsKindOf(Website!ServiceAttribute) then
			true
		else if self.refImmediateComposite().oclIsKindOf(Website!UnitElement) then
			true
		else if self.refImmediateComposite().oclIsKindOf(Website!Selection) then
			true
		else if self.refImmediateComposite().oclIsKindOf(Website!Expression) then
			self.refImmediateComposite().isInterfaceContainer()
		else
			false
		endif endif endif endif endif;

helper context Website!Order def: isInterfaceContainer() : Boolean
	= if self.refImmediateComposite().oclIsUndefined() then
			false
		else if self.refImmediateComposite().oclIsKindOf(Website!Selection) then
			true
		else
			false
		endif endif;


abstract rule Literal {
	from website : Website!Literal (website.isInterfaceContainer())
	to waf : WAF!Literal (
	)
}

-- @extends Literal
rule NullLiteral {
	from website : Website!NullLiteral (website.isInterfaceContainer())
	to waf : WAF!NullLiteral (
	)
}

-- @extends Literal
rule IntegerLiteral {
	from website : Website!IntegerLiteral (website.isInterfaceContainer())
	to waf : WAF!IntegerLiteral (
		value <- website.value
	)
}

-- @extends Literal
rule StringLiteral {
	from website : Website!StringLiteral (website.isInterfaceContainer())
	to waf : WAF!StringLiteral (
		value <- website.value
	)
}

-- @extends Literal
rule CurrentTime {
	from website : Website!CurrentTime (website.isInterfaceContainer())
	to waf : WAF!CurrentTime (
	)
}

rule Function {
	from website : Website!Function
	to waf : WAF!Function (
		name <- website.name
	)
}

rule ModelReference {
	from website : Website!ModelReference
	to waf : WAF!ModelReference (
		unit <- website.unit
	)
}

rule FeatureReference {
	from website : Website!FeatureReference
	to waf : WAF!FeatureReference (
		feature <- website.field
	)
}

rule ParameterReference {
	from website : Website!ParameterReference
	to waf : WAF!ParameterReference (
		parameter <- website.parameter
	)
}

rule CurrentUserReference {
	from website : Website!CurrentUserReference
	to waf : WAF!CurrentUserReference (
	)
}

abstract rule Predicate {
	from website : Website!Predicate
	to waf : WAF!Predicate (
		negated <- website.negated
	)
}

-- @extends Predicate
rule PredicateBooleanOperator {
	from website : Website!PredicateBooleanOperator (website.isInterfaceContainer())
	to waf : WAF!PredicateBooleanOperator (
		expressions <- website.expressions,
		operator <- website.operator
	)
}

-- @extends Predicate
rule PredicateEqualityOperator {
	from website : Website!PredicateEqualityOperator (website.isInterfaceContainer())
	to waf : WAF!PredicateEqualityOperator (
		left <- website.left,
		right <- website.right
	)
}

-- @extends Predicate
rule PredicateComparisonOperator {
	from website : Website!PredicateComparisonOperator (website.isInterfaceContainer())
	to waf : WAF!PredicateComparisonOperator (
		left <- website.left,
		operator <- website.operator,
		right <- website.right
	)
}

-- @extends Predicate
rule PredicateIsOperator {
	from website : Website!PredicateIsOperator (website.isInterfaceContainer())
	to waf : WAF!PredicateIsOperator (
		left <- website.left,
		right <- website.right
	)
}

-- @extends Predicate
rule PredicateLikeOperator {
	from website : Website!PredicateLikeOperator (website.isInterfaceContainer())
	to waf : WAF!PredicateLikeOperator (
		left <- website.left,
		right <- website.right
	)
}

-- @extends Predicate
rule PredicateIsEmptyOperator {
	from website : Website!PredicateIsEmpty (website.isInterfaceContainer())
	to waf : WAF!PredicateIsEmpty (
		feature <- website.feature
	)
}

abstract rule Order {
	from website : Website!Order
	to waf : WAF!Order (
		path <- website.path
	)
}

-- @extends Order
rule Asc {
	from website : Website!Asc (website.isInterfaceContainer())
	to waf : WAF!Asc (
	)
}

-- @extends Order
rule Desc {
	from website : Website!Desc (website.isInterfaceContainer())
	to waf : WAF!Desc (
	)
}
