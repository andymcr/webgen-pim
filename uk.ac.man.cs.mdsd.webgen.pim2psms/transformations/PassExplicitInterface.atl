-- @atlcompiler emftvm 
--
-- @path Website=/uk.ac.man.cs.mdsd.webgen.model/model/website.ecore
-- @path ORM=/uk.ac.man.cs.mdsd.orm.model/model/orm.ecore
-- @path WAF=/uk.ac.man.cs.mdsd.waf.model/model/Waf.ecore

module PassExplicitInterface;
create waf : WAF from website : Website, orm : ORM;

uses WebsiteHelpers;


helper context String def: createName() : String
	= if self.trim().replaceAll('[A-Z]', '') = '' then
			self.trim()
		else
			self.trim().lowercaseFirst().replaceAll('([A-Z])', '_$1')
		endif;

helper context Website!Page def: pageSideMenu() : Website!Menu
	= if not self.sideMenu.oclIsUndefined() then
			self.sideMenu
		else if self.parentPage.oclIsUndefined() then
			thisModule.findWebsiteProperties().sideMenu
		else
			self.parentPage.targetPage.pageSideMenu()
		endif endif;


helper context Website!Attribute def: attributeLabel() : String
	= if not self.displayLabel.oclIsUndefined() and self.displayLabel <> '' then
			self.displayLabel
		else
			self.name.createLabel()
		endif;

helper context Website!Association def: associationLabel() : String
	= if not self.displayLabel.oclIsUndefined() and self.displayLabel <> '' then
			self.displayLabel
		else
			self.name.createLabel()
		endif;

helper context Website!Association def: associationTargetLabel() : String
	= if self.oclIsTypeOf(Website!EncapsulatedAssociation) then
			self.association.associationTargetLabel()
		else
			if not self.targetDisplayLabel.oclIsUndefined() and self.targetDisplayLabel <> '' then
				self.targetDisplayLabel
			else
				self.targetFeatureName().createLabel()
			endif
		endif;

helper context Website!UnitElement def: attributeLabel() : String
	= if not self.displayLabel.oclIsUndefined() and  self.displayLabel <> '' then
			self.displayLabel
		else
			self.attribute.attributeLabel()
		endif;

helper context Website!UnitAssociation def: associationLabel() : String
	= if not self.displayLabel.oclIsUndefined() and  self.displayLabel <> ''
				or self.association.oclIsUndefined() then
			self.displayLabel
		else if self.isSourceAssociation then
			self.association.associationLabel()
		else
			self.association.associationTargetLabel()
		endif endif;


helper context Website!Attribute def: interfaceType() : String
	= if self.oclIsTypeOf(Website!DataTypeAttribute) then
			if not self.interfaceType.oclIsUndefined() and self.interfaceType <> '' then
				self.interfaceType
			else
				if self.oclIsTypeOf(Website!DataTypeAttribute) then
					self.dataType.interfaceType
				else
					self.name.lowercaseFirst()
				endif
			endif
		else if self.oclIsTypeOf(Website!DateAttribute) then
			if self.details = #DateAndTime then
				'datetime'
			else if self.details = #DateOnly then
				'date'
			else
				'time'
			endif endif
		else if self.oclIsTypeOf(Website!EncapsulatedAttribute) then
		    self.attribute.interfaceType()
		else
			OclUndefined
		endif endif endif;

helper context Website!DataTypeField def: interfaceType() : String
	= if not self.interfaceType.oclIsUndefined() and self.interfaceType <> '' then
			self.interfaceType
		else
			self.dataType.interfaceType
		endif;

helper context Website!Attribute def: placeholder() : String
	= if not self.placeholder.oclIsUndefined() and self.placeholder <> '' then
			self.placeholder
		else
			if self.oclIsTypeOf(Website!DataTypeAttribute) then
				self.dataType.placeholder
			else
				OclUndefined
			endif
		endif;

helper context Website!InterfaceField def: placeholder() : String
	= if not self.placeholder.oclIsUndefined() and self.placeholder <> '' then
			self.placeholder
		else
			if self.oclIsTypeOf(Website!DataTypeField) then
				self.dataType.placeholder
			else
				OclUndefined
			endif
		endif;

helper context Website!InterfaceField def: validationPattern() : String
	= if not self.validationPattern.oclIsUndefined() and self.validationPattern <> '' then
			self.validationPattern
		else
			if self.oclIsTypeOf(Website!DataTypeField) then
				self.dataType.validationPattern
			else
				OclUndefined
			endif
		endif;

helper context Website!Association def: findOrmEntityOrView(entityOrView : Website!EntityOrView) : ORM!EntityOrView
	= if entityOrView.features->includes(self) then
			thisModule.findOrmEntityOrView(entityOrView.name)
		else if self.oclIsKindOf(Website!EntityAssociation) then
			thisModule.findOrmEntityOrView(self.targetEntity.name)
		else -- EncapsulatedAssociation
			thisModule.findOrmEntityOrView(self.partOf.name) -- TODO fix
		endif endif;

helper context Website!Attribute def: findOrmAttribute() : ORM!Attribute
	= thisModule.findOrmEntityOrView(self.partOf.name)
		.getOrmFeature(self.name);

helper context Website!Association def: findOrmAssociation(entityOrView : Website!EntityOrView) : ORM!Association
	= let name : String
		= if entityOrView.features->includes(self) then
				self.name
			else
				self.targetFeatureName()
			endif
		in self.findOrmEntityOrView(entityOrView).getOrmFeature(name);

helper context Website!Association def: findOrmSourceAssociation() : ORM!Association
	= self.findOrmAssociation(self.partOf);

helper context Website!Association def: getTarget(): Website!EntityOrView
	= if self.oclIsTypeOf(Website!EncapsulatedAssociation) then
			self.association.getTarget()
		else
			self.targetEntity
		endif;

helper context Website!Association def: findOrmTargetAssociation() : ORM!Association
	= self.findOrmAssociation(self.getTarget());

helper context Website!Expression def: findContainingSelection() : Website!Selection
	= if self.refImmediateComposite().oclIsUndefined() then
			OclUndefined
		else if self.refImmediateComposite().oclIsTypeOf(Website!Selection) then
			self.refImmediateComposite()
		else if self.refImmediateComposite().oclIsKindOf(Website!Expression) then
			self.refImmediateComposite().findContainingSelection()
		else
			OclUndefined
		endif endif endif ;

helper context Website!Feature def: findOrmFeature(reference : Website!FeatureReference) : ORM!Feature
	= if self.oclIsKindOf(Website!Attribute) then
			self.findOrmAttribute()
		else if not reference.findContainingSelection().oclIsUndefined() then
			self.findOrmAssociation(reference.findContainingSelection().usedBy.serves)
		else
			OclUndefined
		endif endif;

helper context Website!UnitAssociation def: findOrmAssociation() : ORM!Association
	= if self.association.oclIsUndefined() then
			OclUndefined
		else if self.isSourceAssociation then
			self.association.findOrmSourceAssociation()
		else if self.displayedOn.entities->notEmpty() then
			self.association.findOrmTargetAssociation()
		else
			OclUndefined
		endif endif endif;

helper context Website!ChildAssociation def: findOrmAssociation() : ORM!Association
	= if self.association.oclIsUndefined() or self.refImmediateComposite().association.oclIsUndefined() then
			OclUndefined
		else
			if self.isSourceAssociation then
				self.association.findOrmSourceAssociation()
			else
				self.association.findOrmTargetAssociation()
			endif
		endif;

helper context Website!Label def: findOrmLabel() : ORM!Label
	= if self.oclIsKindOf(Website!Attribute) then
		self.findOrmEntityOrView().getOrmFeature(self.name)
	else if self.oclIsTypeOf(Website!ModelLabel) then
		thisModule.findOrmEntityOrView(self.labelFor.name).getOrmLabel(self.name)
	else
		self.title
	endif endif;


rule WafModel {
	from website : Website!WebGenModel, orm : ORM!OrmModel
	to waf : WAF!WafModel (
		persistence <- orm,
		services <- website.services,
		pages <- website.pages,
		menus <- website.menus,
		siteName <- website.websiteProperties.projectName,
		siteTitle <- website.websiteProperties.siteTitle,
		developmentVersion <- website.websiteProperties.developmentVersion,
		baseURL <- website.websiteProperties.baseURL,
		rewriteURLs <- website.websiteProperties.rewriteURLs,
		webmasterEmail <- website.websiteProperties.webmasterEmail,
		copyrightText <-
			if not website.websiteProperties.copyrightText.oclIsUndefined() and website.websiteProperties.copyrightText <> '' then
				website.websiteProperties.copyrightText
			else
				'&copy; '.concat(website.websiteProperties.siteTitle).concat(' <?php echo date("Y"); ?>')
			endif,
		metaDescription <- website.websiteProperties.metaDescription,
		frameworkTechnology <- website.websiteProperties.frameworkTechnology,
		ajaxTechnology <- website.websiteProperties.ajaxTechnology,
		captchaSiteKey <- website.websiteProperties.captchaSiteKey,
		captchaSecretKey <- website.websiteProperties.captchaSecretKey,
		textEditorURL <- website.websiteProperties.textEditorURL,
		topNavigationId <- website.websiteProperties.topNavigationId,
		sideMenu <- website.websiteProperties.sideMenu,
		siteTemplate <- website.websiteProperties.siteTemplate,
		staticUnitsEditable <- website.websiteProperties.staticUnitsEditable
	)
}


abstract rule NamedElement {
	from website : Website!NamedElement
	to waf : WAF!NamedElement (
		name <- website.name
	)
}

-- @extends NamedElement
abstract rule NamedDisplayElement {
	from website : Website!NamedDisplayElement
	to waf : WAF!NamedDisplayElement (
		displayLabel <-
			if not website.displayLabel.oclIsUndefined() and website.displayLabel <> '' then
				website.displayLabel
			else
				website.name.createLabel()
			endif
	)
}


-- @extends NamedElement
rule Service {
	from website : Website!Service
	to waf : WAF!Service (
		serves <-
			if website.serves.oclIsUndefined() then
				OclUndefined
			else
				thisModule.findOrmEntityOrView(website.serves.name)
			endif,
		selections <- website.selections,
		operations <- website.operations
	)
} 

-- @extends NamedElement
rule Selection {
	from website : Website!Selection
	to waf : WAF!Selection (
		"distinct" <- website."distinct",
		fields <-
			website.fields
				->collect(f | if f.oclIsKindOf(Website!EntityOrView) then
						thisModule.SelectEntityOrView(f)
					else
						thisModule.SelectAttribute(f)
					endif),
		parameters <- website.parameters,
		joins <-
			if website.usedBy.oclIsUndefined() then
				Sequence{}
			else
				website.joins
					->collect(a | a.findOrmAssociation(website.usedBy.serves))
			endif,
		filter <- website.filter,
		ordering <- website.ordering,
		limit <- website.limit
	)
}

lazy rule SelectEntityOrView {
	from website : Website!EntityOrView
	to waf : WAF!SelectEntityOrView (
		entityOrView <- website.findOrmEntityOrView()
	)
}

lazy rule SelectAttribute {
	from website : Website!Attribute
	to waf : WAF!SelectAttribute (
		attribute <- website.findOrmEntityOrView().getOrmFeature(website.name)
	)
}

-- @extends NamedElement
rule SelectionParameter {
	from website : Website!SelectionParameter
	to waf : WAF!SelectionParameter (
		defaultValue <- website.defaultValue
	)
}

-- @extends NamedElement
rule BusinessOperation {
	from website : Website!BusinessOperation
	to waf : WAF!BusinessOperation (
		uses <- website.uses,
		resultType <- website.resultType,
		resultMimeType <- website.resultMimeType
	)
}


-- @extends NamedDisplayElement, UnitContainer
rule Page {
	from website : Website!Page
	to waf : WAF!Page (
		authenticated <- website.authenticated,
		uriElement <- website.uriElement,
		parentPage <-
			if website.parentPage.oclIsUndefined() then
				OclUndefined
			else
				website.parentPage.targetPage
			endif,
		topMenuOption <-
			if website.topMenuOption = #NeverInclude then
				#NeverInclude
			else if website.topMenuOption = #AlwaysInclude then
				#AlwaysInclude
			else
				#IncludeWhenAuthenticated
			endif endif,
		topMenuRank <- website.topMenuRank,
		navigationLabel <-
			if not website.navigationLabel.oclIsUndefined() and website.navigationLabel <> '' then
				website.navigationLabel
			else
				website.name.createLabel()
			endif,
		sideMenu <- website.pageSideMenu(),
		styleClass <- website.styleClass
	)
}


-- @extends NamedDisplayElement
abstract rule Menu {
	from website : Website!Menu
	to waf : WAF!Menu (
		entries <- website.entries,
		omitCaption <-
			if not website.omitCaption.oclIsUndefined() then
				website.omitCaption
			else
				false
			endif,
		captionClass <- website.captionClass.replaceAll(',', ' '),
		styleClass <- website.styleClass.replaceAll(',', ' '),
		layoutClass <- website.layoutClass.replaceAll(',', ' ')
	)
}

abstract rule MenuEntry {
	from website : Website!MenuEntry
	to waf : WAF!MenuEntry (
		requiresRole <- website.requiresRole
	)
}

-- @extends Menu
rule StaticMenu {
	from website : Website!StaticMenu
	to waf : WAF!StaticMenu (
	)
}

-- @extends MenuEntry, NamedDisplayElement
rule ActionMenuEntry {
	from website : Website!ActionMenuEntry
	to waf : WAF!ActionMenuEntry (
		action <- website.destination,
		"query" <- website."query"
	)
}

-- @extends MenuEntry, NamedDisplayElement
rule EditStaticTextMenuEntry {
	from website : Website!EditStaticTextMenuEntry
	to waf : WAF!EditStaticTextMenuEntry (
	)
}

-- @extends Menu
rule DynamicMenu {
	from website : Website!DynamicMenu
	to waf : WAF!DynamicMenu (
		entityOrView <-
			if website.entityOrView.oclIsUndefined() then
				OclUndefined
			else
				website.entityOrView.findOrmEntityOrView()
			endif,
		selection <- website.selection,
		title <-
			if website.title.oclIsUndefined() then
				website.title
			else
				website.title.findOrmLabel()
			endif
	)
}

-- @extends NamedElement
rule Filter {
	from website : Website!Filter
	to waf : WAF!Filter (
		parameters <-
			if website.parameters->notEmpty() then
				website.parameters
			else
				Sequence{thisModule.implicitFilterParameter(website)}
			endif,
		selection <- website.selection
	)
}

-- @extends NamedElement
rule FilterParameter {
	from website : Website!FilterParameter
	to waf : WAF!FilterParameter (
		formal <- website.formal,
		dataType <- website.dataType,
		defaultValue <- website.defaultValue
	)
}

lazy rule implicitFilterParameter {
	from website : Website!Filter
	to waf : WAF!FilterParameter (
		name <- website.name
	)
}

rule Query {
	from website : Website!Query
	to waf : WAF!Query (
		filter <- website.filter,
		parameters <- website.parameters
	)
}

rule QueryParameter {
	from website : Website!QueryParameter
	to waf : WAF!QueryParameter (
		formal <- website.formal,
		value <- website.value
	)
}

abstract rule Selectable {
	from website : Website!Selectable
	to waf : WAF!Selectable (
	)
}


abstract rule UnitContainer {
	from website : Website!UnitContainer
	to waf : WAF!UnitContainer (
		units <- website.units
	)
}


-- @extends NamedDisplayElement
abstract rule ContentUnit {
	from website : Website!ContentUnit
	to waf : WAF!ContentUnit (
		purposeSummary <- website.purposeSummary,
		uriElement <- website.uriElement.trim(),
		omitCaption <-
			if not website.omitCaption.oclIsUndefined() then
				website.omitCaption
			else
				false
			endif,
		alternative <- website.alternative,
		captionClass <- website.captionClass.replaceAll(',', ' '),
		styleClass <- website.styleClass.replaceAll(',', ' '),
		contentClass <- website.contentClass.replaceAll(',', ' ')
	)
}

-- @extends ContentUnit
rule StaticUnit {
	from website : Website!StaticUnit
	to waf : WAF!StaticUnit (
		content <- website.content
	)
}


-- @extends ContentUnit
abstract rule DynamicUnit {
	from website : Website!DynamicUnit
	to waf : WAF!DynamicUnit (
		entities <- website.entities
			->collect(e | thisModule.findOrmEntityOrView(e.name)),
		displayFields <- website.displayFields,
		supportActions <- website.supportActions,
		noRouteParameters <- website.noRouteParameters,
		header <- website.header,
		footer <- website.footer,
		headerClass <- website.headerClass,
		controlClass <- website.controlClass,
		footerClass <- website.footerClass,
		errorClass <- website.errorClass
	)
}

abstract rule UnitField {
	from website : Website!UnitField
	to waf : WAF!UnitField (
		collectionDisplayOption <- website.collectionDisplayOption,
		collectionAllowAdd <- website.collectionAllowAdd,
		collectionAllowRemove <- website.collectionAllowRemove,
		maximumDisplaySize <- website.maximumDisplaySize,
		dateFormat <- website.dateFormat()
	)
}

-- @extends UnitField, InlineActionContainer
abstract rule UnitFeature {
	from website : Website!UnitFeature
	to waf : WAF!UnitFeature (
		forcedValue <- website.forcedValue,
		onlyDisplayWhenNotEmpty <- website.onlyDisplayWhenNotEmpty,
		autofocus <- website.autofocus,
		footer <- website.footer
	)
}

-- @extends UnitFeature
rule UnitAttribute {
	from website : Website!UnitElement
	to waf : WAF!UnitAttribute (
		attribute <- website.attribute.findOrmAttribute(),
		displayLabel <- website.attributeLabel(),
		defaultValue <- website.defaultValue,
		obfuscateFormFields <- website.obfuscateFormFields,
		placeholder <-
			if not website.placeholder.oclIsUndefined() and website.placeholder <> '' then
				website.placeholder
			else
				website.attribute.placeholder()
			endif,
		validationPattern <- website.validationPattern,
		headerClass <-
			if not website.headerClass.oclIsUndefined() and website.headerClass <> '' then
				website.headerClass
			else
				if not website.attribute.oclIsUndefined() then
					website.attribute.headerClass
				else
					OclUndefined
				endif
			endif,
		inputClass <-
			if not website.inputClass.oclIsUndefined() and website.inputClass <> '' then
				website.inputClass
			else
				if not website.attribute.oclIsUndefined() then
					website.attribute.inputClass
				else
					OclUndefined
				endif
			endif,
		displayClass <-
			if not website.displayClass.oclIsUndefined() and website.displayClass <> '' then
				website.displayClass
			else
				if not website.attribute.oclIsUndefined() then
					website.attribute.displayClass
				else
					OclUndefined
				endif
			endif,
		footerClass <-
			if not website.footerClass.oclIsUndefined() and website.footerClass <> '' then
				website.footerClass
			else
				if not website.attribute.oclIsUndefined() then
					website.attribute.footerClass
				else
					OclUndefined
				endif
			endif
	)
}

-- @extends UnitFeature, UnitContainer
rule UnitAssociation {
	from website : Website!UnitAssociation
	to waf : WAF!UnitAssociation (
		association <- website.findOrmAssociation(),
		displayLabel <- website.associationLabel(),
		childFeature <- website.childFeature,
		selection <- website.selection,
		valueDisplay <-
			if website.valueDisplay.oclIsUndefined() then
				OclUndefined
			else
				website.valueDisplay.findOrmLabel()
			endif,
--		filters <- website.filters,
		headerClass <-
			if not website.headerClass.oclIsUndefined() and website.headerClass <> '' then
				website.headerClass
			else
				if not website.association.oclIsUndefined() then
					website.association.headerClass
				else
					OclUndefined
				endif
			endif,
		inputClass <-
			if not website.inputClass.oclIsUndefined() and website.inputClass <> '' then
				website.inputClass
			else
				if not website.association.oclIsUndefined() then
					website.association.inputClass
				else
					OclUndefined
				endif
			endif,
		displayClass <-
			if not website.displayClass.oclIsUndefined() and website.displayClass <> '' then
				website.displayClass
			else
				if not website.association.oclIsUndefined() then
					website.association.displayClass
				else
					OclUndefined
				endif
			endif,
		footerClass <-
			if not website.footerClass.oclIsUndefined() and website.footerClass <> '' then
				website.footerClass
			else
				if not website.association.oclIsUndefined() then
					website.association.footerClass
				else
					OclUndefined
				endif
			endif
	)
}

abstract rule ChildFeature {
	from website : Website!ChildFeature
	to waf : WAF!ChildFeature (
	)
}

-- @extends ChildFeature
rule ChildAttribute {
	from website : Website!ChildAttribute
	to waf : WAF!ChildAttribute (
		attribute <- website.attribute.findOrmAttribute()
	)
}

-- @extends ChildFeature
rule ChildAssociation {
	from website : Website!ChildAssociation
	to waf : WAF!ChildAssociation (
		association <- website.findOrmAssociation(),
		childFeature <- website.childFeature
	)
}

-- @extends UnitField, NamedElement
abstract rule InterfaceField {
	from website : Website!InterfaceField
	to waf : WAF!InterfaceField (
		displayLabel <- website.displayLabel,
		required <- website.required,
		defaultValue <- website.defaultValue,
		mustMatch <- website.mustMatch,
		placeholder <- website.placeholder(),
		validationPattern <- website.validationPattern(),
		inputClass <- website.inputClass
	)
}

-- @extends InterfaceField
rule DataTypeField {
	from website : Website!DataTypeField
	to waf : WAF!DataTypeField (
		dataType <- thisModule.findOrmDataType(website.dataType.name),
		caseInsensitive <- website.caseInsensitive,
		obfuscateFormFields <- website.obfuscateFormFields,
		encrypt <- website.encrypt
	)
}

-- @extends InterfaceField
rule DateField {
	from website : Website!DateField
	to waf : WAF!DateField (
		details <- website.details,
		format <- website.format
	)
}

-- @extends InterfaceField
rule CaptchaField {
	from website : Website!CaptchaField
	to waf : WAF!CaptchaField (
	)
}

-- @extends NamedDisplayElement
rule UnitSupportAction {
	from website : Website!UnitSupportAction
	to waf : WAF!UnitSupportAction (
		disable <- website.disable,
		confirmMessage <- website.confirmMessage
	)
}


-- @extends DynamicUnit
abstract rule EditUnit {
	from website : Website!EditUnit
	to waf : WAF!EditUnit (
		defaultSelection <- website.defaultSelection,
		title <-
			if website.title.oclIsUndefined() then
				website.title
			else
				website.title.findOrmLabel()
			endif,
		uriElement <-
			if website.uriElement.trim() <> '' then
				website.uriElement.trim()
			else
				'update'
			endif,
		confirmDestination <- website.confirmDestination,
		confirmLabel <-
			if not website.confirmLabel.oclIsUndefined() and website.confirmLabel <> '' then
				website.confirmLabel
			else
				if  website.oclIsTypeOf(Website!CreateUnit) then
					'Create'
				else if  website.oclIsTypeOf(Website!CreateUpdateUnit) then
					'Save'
				else if  website.oclIsTypeOf(Website!UpdateUnit) then
					'Update'
				else if  website.oclIsTypeOf(Website!MapUnit) then
					'Save'
				else
					'Edit'
				endif endif endif endif
			endif,
		cancelDestination <- website.cancelDestination,
		cancelLabel <-
			if not website.cancelLabel.oclIsUndefined() and website.cancelLabel <> '' then
				website.confirmLabel
			else
				'Cancel'
			endif,
		customiseValues <- website.customiseValues
	)
}

-- @extends EditUnit
rule CreateUnit {
	from website : Website!CreateUnit
	to waf : WAF!CreateUnit (
		uriElement <-
			if website.uriElement.trim() <> '' then
				website.uriElement.trim()
			else
				'create'
			endif
	)
}

-- @extends EditUnit, Selectable
rule CreateUpdateUnit {
	from website : Website!CreateUpdateUnit
	to waf : WAF!CreateUpdateUnit (
		createUriElement <-
			if website.createUriElement.trim() <> '' then
				website.createUriElement.trim()
			else
				'update'
			endif,
		clearLabel <- website.clearLabel
	)
}

-- @extends EditUnit, Selectable
rule MapUnit {
	from website : Website!MapUnit
	to waf : WAF!MapUnit (
		readOnly <- website.readOnly,
		defaultZoomLevel <- website.defaultZoomLevel,
		location <- website.location.findOrmAttribute(),
		placeName <-
			if website.placeName.oclIsUndefined() then
				website.placeName
			else
				website.placeName.findOrmAttribute()
			endif
	)
}

-- @extends EditUnit, Selectable
rule UpdateUnit {
	from website : Website!UpdateUnit
	to waf : WAF!UpdateUnit (
	)
}

-- @extends DynamicUnit
abstract rule DataUnit {
	from website : Website!DataUnit
	to waf : WAF!DataUnit (
		defaultSelection <- website.defaultSelection,
		title <-
			if website.title.oclIsUndefined() then
				website.title
			else
				website.title.findOrmLabel()
			endif
	)
}

-- @extends DataUnit, Selectable
rule DetailsUnit {
	from website : Website!DetailsUnit
	to waf : WAF!DetailsUnit (
		uriElement <-
			if website.uriElement.trim() <> '' then
				website.uriElement.trim()
			else if website.createDefaultUriElement then
				website.name.createName()
			else
				''
			endif endif,
		onlyDisplayWhenNotEmpty <- website.onlyDisplayWhenNotEmpty,
		omitFieldLabels <- website.omitFieldLabels
	)
}

-- @extends DataUnit, InlineActionContainer
abstract rule IndexUnit {
	from website : Website!IndexUnit
	to waf : WAF!IndexUnit (
		omitColumnLabels <- website.omitColumnLabels,
		filters <- website.filters
			->union(if website.pagination.oclIsUndefined() and website.defaultPaginationSize > 0 then
					Sequence{thisModule.PaginationFilter(website)}
				else
					Sequence{}
				endif),
		pagination <-
			if website.pagination.oclIsUndefined() and website.defaultPaginationSize > 0 then
					thisModule.PaginationFilter(website)
				else
					website.pagination
				endif,
		defaultPaginationSize <- website.defaultPaginationSize,
		nextPageLabel <- website.nextPageLabel,
		previousPageLabel <- website.previousPageLabel,
		useFirstLastPageLinks <- website.useFirstLastPageLinks,
		firstPageLabel <- website.firstPageLabel,
		lastPageLabel <- website.lastPageLabel,
		rowClasses <- website.rowClasses.replaceAll(',', ' ')
	)
}

unique lazy rule PaginationFilter {
	from website : Website!IndexUnit
	to waf : WAF!Filter (
		name <- 'Pagination',
		parameters <- Sequence{pageParameter}
	),
	pageParameter : WAF!FilterParameter (
		name <- 'page'
	)
	do {
		waf;
	}
}

-- @extends IndexUnit
rule IndexGridUnit {
	from website : Website!IndexUnit (website.displayOption = #Grid)
	to waf : WAF!IndexGridUnit (
	)
}

-- @extends IndexUnit
rule IndexPageDirectionUnit {
	from website : Website!IndexUnit (website.displayOption = #PageDirection)
	to waf : WAF!IndexPageDirectionUnit (
	)
}

-- @extends IndexUnit
rule IndexLineDirectionUnit {
	from website : Website!IndexUnit (website.displayOption = #LineDirection)
	to waf : WAF!IndexLineDirectionUnit (
	)
}

-- @extends DynamicUnit
abstract rule ControlUnit {
	from website : Website!ControlUnit
	to waf : WAF!ControlUnit (
		submitLabel <-
			if not website.submitLabel.oclIsUndefined() and website.submitLabel <> '' then
				website.submitLabel
			else
				if  website.oclIsKindOf(Website!SearchUnit) then
					'Search'
				else if  website.oclIsKindOf(Website!RegistrationUnit) then
					'Register'
				else if  website.oclIsKindOf(Website!LoginUnit) then
					'Login'
				else if  website.oclIsKindOf(Website!ForgottenPasswordUnit) then
					'Forgotton Password'
				else
					'Control'
				endif endif endif endif
			endif,
		cancelDestination <- website.cancelDestination,
		cancelLabel <- website.cancelLabel
	)
}

-- @extends ControlUnit
rule SearchUnit {
	from website : Website!SearchUnit
	to waf : WAF!SearchUnit (
		resultsDestination <- website.resultsDestination
	)
}

-- @extends ControlUnit
rule ActionUnit {
	from website : Website!ActionUnit
	to waf : WAF!ActionUnit (
	)
}

-- @extends EditUnit
rule RegistrationUnit {
	from website : Website!RegistrationUnit
	to waf : WAF!RegistrationUnit (
	)
}

-- @extends ControlUnit
rule LoginUnit {
	from website : Website!LoginUnit
	to waf : WAF!LoginUnit (
		loginIdField <- website.loginIdField,
		passwordField <- website.passwordField,
		rememberMeField <- website.rememberMeField,
		logoutUriElement <- website.logoutUriElement
	)
}

-- @extends ControlUnit
rule ForgottenPasswordUnit {
	from website : Website!ForgottenPasswordUnit
	to waf : WAF!ForgottenPasswordUnit (
		loginIdField <- website.loginIdField
	)
}


abstract rule InlineActionContainer {
	from website : Website!InlineActionContainer
	to waf : WAF!InlineActionContainer (
		actions <- website.actions
	)
}

-- @extends NamedDisplayElement
abstract rule InlineAction {
	from website : Website!InlineAction
	to waf : WAF!InlineAction (
		disable <- website.disable,
		header <- website.header,
		footer <- website.footer,
		headerClass <- website.headerClass,
		footerClass <- website.footerClass
	)
}


-- @extends InlineAction
rule SelectAction {
	from website : Website!SelectAction
	to waf : WAF!SelectAction (
		target <- website.target
	)
}

-- @extends InlineAction
rule DeleteAction {
	from website : Website!DeleteAction 
	to waf : WAF!DeleteAction (
		destination <- website.destination,
		confirmMessage <- 
			if not website.confirmMessage.oclIsUndefined() then
				website.confirmMessage
			else if not website.displayLabel.oclIsUndefined() then
				website.displayLabel.concat('?')
			else
				website.name.createLabel().concat('?')
			endif endif,
		uriElement <-
			if website.uriElement <> '' then
				website.uriElement
			else
				website.name.createName()
			endif
	)
}

-- @extends InlineAction
rule FeatureSupportAction {
	from website : Website!FeatureSupportAction 
	to waf : WAF!FeatureSupportAction (
		operation <- website.operation,
		confirmMessage <-
			if not website.confirmMessage.oclIsUndefined() and website.confirmMessage <> '' then
				website.confirmMessage
			else
				OclUndefined
			endif,
		uriElement <-
			if website.uriElement <> '' then
				website.uriElement
			else
				website.name.createName()
			endif,
		fileExtension <- website.fileExtension
	)
}


helper context Website!Expression def: isInterfaceContainer() : Boolean
	= if self.refImmediateComposite().oclIsUndefined() then
			false
		else if self.refImmediateComposite().oclIsKindOf(Website!UnitElement) then
			true
		else if self.refImmediateComposite().oclIsKindOf(Website!Selection) then
			true
		else if self.refImmediateComposite().oclIsKindOf(Website!Expression) then
			self.refImmediateComposite().isInterfaceContainer()
		else
			false
		endif endif endif endif;

helper context Website!Order def: isInterfaceContainer() : Boolean
	= if self.refImmediateComposite().oclIsUndefined() then
			false
		else if self.refImmediateComposite().oclIsKindOf(Website!Selection) then
			true
		else
			false
		endif endif;


abstract rule Literal {
	from website : Website!Literal (website.isInterfaceContainer())
	to waf : WAF!Literal (
	)
}

-- @extends Literal
rule NullLiteral {
	from website : Website!NullLiteral (website.isInterfaceContainer())
	to waf : WAF!NullLiteral (
	)
}

-- @extends Literal
rule BooleanLiteral {
	from website : Website!BooleanLiteral (website.isInterfaceContainer())
	to waf : WAF!BooleanLiteral (
		value <- website.value
	)
}

-- @extends Literal
rule IntegerLiteral {
	from website : Website!IntegerLiteral (website.isInterfaceContainer())
	to waf : WAF!IntegerLiteral (
		value <- website.value
	)
}

-- @extends Literal
rule StringLiteral {
	from website : Website!StringLiteral (website.isInterfaceContainer())
	to waf : WAF!StringLiteral (
		value <- website.value
	)
}

-- @extends Literal
rule TimeLiteral {
	from website : Website!TimeLiteral (website.isInterfaceContainer())
	to waf : WAF!TimeLiteral (
		value <- website.value
	)
}

-- @extends Literal
rule CurrentTime {
	from website : Website!CurrentTime (website.isInterfaceContainer())
	to waf : WAF!CurrentTime (
	)
}

rule Function {
	from website : Website!Function
	to waf : WAF!Function (
		name <- website.name
	)
}

rule ModelReference {
	from website : Website!ModelReference
	to waf : WAF!ModelReference (
		unit <- website.unit
	)
}

rule FeatureReference {
	from website : Website!FeatureReference
	to waf : WAF!FeatureReference (
		feature <-
			if website.feature.oclIsUndefined() then
				OclUndefined
			else
				website.feature.findOrmFeature(website)
			endif
	)
}

rule ParameterReference {
	from website : Website!ParameterReference
	to waf : WAF!ParameterReference (
		parameter <- website.parameter
	)
}

rule CurrentUserReference {
	from website : Website!CurrentUserReference
	to waf : WAF!CurrentUserReference (
	)
}

abstract rule Predicate {
	from website : Website!Predicate
	to waf : WAF!Predicate (
		negated <- website.negated
	)
}

-- @extends Predicate
rule PredicateBooleanOperator {
	from website : Website!PredicateBooleanOperator (website.isInterfaceContainer())
	to waf : WAF!PredicateBooleanOperator (
		expressions <- website.expressions,
		operator <- website.operator
	)
}

-- @extends Predicate
rule PredicateEqualityOperator {
	from website : Website!PredicateEqualityOperator (website.isInterfaceContainer())
	to waf : WAF!PredicateEqualityOperator (
		left <- website.left,
		right <- website.right
	)
}

-- @extends Predicate
rule PredicateComparisonOperator {
	from website : Website!PredicateComparisonOperator (website.isInterfaceContainer())
	to waf : WAF!PredicateComparisonOperator (
		left <- website.left,
		operator <- website.operator,
		right <- website.right
	)
}

-- @extends Predicate
rule PredicateIsOperator {
	from website : Website!PredicateIsOperator (website.isInterfaceContainer())
	to waf : WAF!PredicateIsOperator (
		left <- website.left,
		right <- website.right
	)
}

-- @extends Predicate
rule PredicateLikeOperator {
	from website : Website!PredicateLikeOperator (website.isInterfaceContainer())
	to waf : WAF!PredicateLikeOperator (
		left <- website.left,
		right <- website.right
	)
}

-- @extends Predicate
rule PredicateIsEmptyOperator {
	from website : Website!PredicateIsEmpty (website.isInterfaceContainer())
	to waf : WAF!PredicateIsEmpty (
		feature <- website.feature
	)
}

abstract rule Order {
	from website : Website!Order
	to waf : WAF!Order (
		path <- website.path
	)
}

-- @extends Order
rule Asc {
	from website : Website!Asc (website.isInterfaceContainer())
	to waf : WAF!Asc (
	)
}

-- @extends Order
rule Desc {
	from website : Website!Desc (website.isInterfaceContainer())
	to waf : WAF!Desc (
	)
}
