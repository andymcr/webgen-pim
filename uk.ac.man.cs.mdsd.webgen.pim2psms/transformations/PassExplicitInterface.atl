-- @atlcompiler emftvm 
--
-- @path Website=/uk.ac.man.cs.mdsd.webgen.model/model/website.ecore
-- @path ORM=/uk.ac.man.cs.mdsd.orm.model/model/orm.ecore
-- @path WAF=/uk.ac.man.cs.mdsd.waf.model/model/Waf.ecore

module PassExplicitInterface;
create waf : WAF from website : Website, orm : ORM;

uses WebsiteHelpers;


helper context String def: createName() : String
	= if self.trim().replaceAll('[A-Z]', '') = '' then
			self.trim()
		else
			self.trim().lowercaseFirst().replaceAll('([A-Z])', '_$1')
		endif;

helper context String def: createViewName() : String
	= let properties : Website!WebsiteProperties = thisModule.findWebsiteProperties()
		in if properties.databaseTechnology = #Oracle then
				self.toUpper()
			else
				self.toLower()
			endif;

helper context Website!Page def: pageSideMenu() : Website!Menu
	= if not self.sideMenu.oclIsUndefined() then
			self.sideMenu
		else if self.parentPage.oclIsUndefined() then
			thisModule.findWebsiteProperties().sideMenu
		else
			self.parentPage.targetPage.pageSideMenu()
		endif endif;


helper context Website!Service def: feature(name : String) : Website!ServiceFeature
	= self.features->any(f | f.name = name);


helper context Website!ServiceEntityFeature def: isWebsiteSingletonFeature() : Boolean
	= if self.useFeatureSource then
			self.feature.cardinality <> #Many
		else
			if self.feature.oclIsTypeOf(Website!AssociationWithContainment) then
				true
			else
				self.feature.targetCardinality <> #Many
			endif
		endif;

helper context Website!Feature def: featureCardinality(localRequired : Boolean) : Boolean
		= if self.cardinality = #Optional then
				if localRequired then
					#Required
				else
					#Optional
				endif
			else
				self.cardinality
			endif;

helper context Website!Feature def: featureTargetCardinality(localRequired : Boolean) : Boolean
		= if self.oclIsTypeOf(Website!AssociationWithContainment) then
				#Required
			else
				if self.targetCardinality = #Optional then
					if localRequired then
						#Required
					else
						#Optional
					endif
				else
					self.targetCardinality
				endif
			endif;

helper context Website!ServiceEntityFeature def: serviceCardinality(localRequired : Boolean) : Boolean
	= if self.useFeatureSource then
			self.feature.featureCardinality(self.required or localRequired)
		else
			self.feature.featureTargetCardinality(self.required or localRequired)
		endif;

helper context Website!ServiceViewAssociation def: serviceViewCardinality(localRequired : Boolean) : Boolean
	= if self.oppositeFeature.useFeatureSource then
			self.oppositeFeature.feature.featureTargetCardinality(self.required or localRequired)
		else
			self.oppositeFeature.feature.featureCardinality(self.required or localRequired)
		endif;

helper context Website!UnitField def: unitCardinality() : Boolean
	= if self.oclIsKindOf(Website!UnitFeature) then
			if self.serviceFeature.oclIsUndefined() then
				if self.displayedOn.source = self.feature.parentEntity then
					self.feature.featureCardinality(self.required)
				else
					self.feature.featureTargetCardinality(self.required)
				endif
			else
				if self.serviceFeature.oclIsKindOf(Website!ServiceEntityFeature) then
					self.serviceFeature.serviceCardinality(self.required)
				else
					self.serviceFeature.serviceViewCardinality(self.required)
				endif
			endif
		else
			if self.required then
				#Required
			else
				#Optional
			endif
		endif;

helper context Website!ServiceEntityFeature def: entityFeature() : ORM!Feature
	= if self.useFeatureSource then
			thisModule.findOrmEntity(self.feature.parentEntity.name).getOrmFeature(self.feature.name)
		else
			thisModule.findOrmEntity(self.feature.targetEntity.name).getOrmFeature(self.feature.targetFeatureName())
		endif;

helper context Website!NamedDisplayElement def: namedElementLabel() : String
	= if not self.displayLabel.oclIsUndefined() and self.displayLabel <> '' then
			self.displayLabel
		else
			self.name.createLabel()
		endif;

helper context Website!Association def: associationTargetLabel() : String
	= if not self.targetDisplayLabel.oclIsUndefined() and self.targetDisplayLabel <> '' then
			self.targetDisplayLabel
		else
			self.targetFeatureName().createLabel()
		endif;

helper context Website!ServiceEntityFeature def: serviceEntityFeatureLabel() : String
	= if not self.displayLabel.oclIsUndefined() and  self.displayLabel <> '' then
			self.displayLabel
		else
			if self.useFeatureSource then
				self.feature.namedElementLabel()
			else
				self.feature.associationTargetLabel()
			endif
		endif;

helper context Website!ServiceEntityElement def: placeholder() : String
	= if not self.placeholder.oclIsUndefined() and self.placeholder <> '' then
			self.placeholder
		else
			self.feature.placeholder()
		endif;

helper context Website!ServiceAssociation def: targetService() : Website!Service
	= if not self.oppositeFeature.oclIsUndefined() then
			self.oppositeFeature.partOf
		else
			let services : Sequence(Website!Service)
				= if self.useFeatureSource then
						self.feature.targetEntity.servedBy
					else
						self.feature.parentEntity.servedBy
					endif
				in services->first()
		endif;

helper context Website!ServiceEntityElement def: validationPattern() : String
	= if not self.validationPattern.oclIsUndefined() and self.validationPattern <> '' then
			self.validationPattern
		else
			self.feature.validationPattern()
		endif;

helper context Website!ServiceViewAssociation def: isWebsiteSingletonFeature() : Boolean
	= self.feature.cardinality <> #Many;

	
helper context Website!UnitFeature def: isWebsiteSingletonFeature() : Boolean
	= let entities : OrderedSet(Website!Entity)
		= if self.displayedOn.source.oclIsTypeOf(Website!Entity) then
				OrderedSet{self.displayedOn.source}
			else
				self.displayedOn.source.encapsulates
			endif
		in if entities->includes(self.feature.parentEntity) then
				self.feature.cardinality <> #Many
			else
				if self.feature.oclIsTypeOf(Website!AssociationWithoutContainment) then
					self.feature.targetCardinality <> #Many
				else
					true
				endif
			endif;

helper context Website!UnitFeature def: unitFeature() : ORM!Feature
	= let parentEntities : Sequence(Website!Entity)
		= if self.displayedOn.source.oclIsTypeOf(Website!Service) then
				self.displayedOn.source.encapsulates
			else
				Sequence{self.displayedOn.source}
			endif
		in if parentEntities->includes(self.feature.parentEntity) then
				thisModule.findOrmEntity(self.feature.parentEntity.name).getOrmFeature(self.feature.name)
			else
				thisModule.findOrmEntity(self.feature.targetEntity.name).getOrmFeature(self.feature.targetFeatureName())
			endif;

helper context Website!UnitFeature def: unitEntityFeatureLabel() : String
	= if not self.displayLabel.oclIsUndefined() and  self.displayLabel <> '' then
			self.displayLabel
		else if self.serviceFeature.oclIsUndefined() then
			self.feature.namedElementLabel()
		else
			self.serviceFeature.serviceEntityFeatureLabel()
		endif endif;

helper context Website!UnitFeature def: unitAssociationLabel() : String
	= if self.serviceFeature.oclIsUndefined() then
			if self.displayedOn.source = self.feature.parentEntity then
				self.feature.namedElementLabel()
			else
				self.feature.associationTargetLabel()
			endif
		else if self.serviceFeature.oclIsKindOf(Website!ServiceEntityFeature) then
			self.unitEntityFeatureLabel()
		else
			self.serviceFeature.oppositeFeature.feature.namedElementLabel()
		endif endif;

helper context Website!Feature def: featureDateFormat() : String
	= if not self.oclIsTypeOf(Website!DateAttribute) then
			OclUndefined
		else if not self.format.oclIsUndefined() and self.format <> '' then
			self.format
		else
			if self.details = #DateOnly then
				thisModule.findWebsiteProperties().defaultDateFormat
			else if self.details = #TimeOnly then
				thisModule.findWebsiteProperties().defaultTimeFormat
			else
				thisModule.findWebsiteProperties().defaultDateTimeFormat
			endif endif
		endif endif;

helper context Website!ServiceEntityFeature def: serviceDateFormat() : String
	= if not self.dateFormat.oclIsUndefined() and self.dateFormat <> '' then
			self.dateFormat
		else
			self.feature.featureDateFormat()
		endif;

helper context Website!UnitField def: unitDateFormat() : String
	= if not self.dateFormat.oclIsUndefined() and self.dateFormat <> '' then
			self.dateFormat
		else if self.oclIsKindOf(Website!InterfaceField) then
			if self.oclIsTypeOf(Website!DateField) then
				self.format
			else
				OclUndefined
			endif
		else if self.serviceFeature.oclIsUndefined() then
			self.feature.featureDateFormat()
		else
			if self.oclIsTypeOf(Website!UnitElement) then
				self.serviceFeature.serviceDateFormat()
			else if self.oclIsTypeOf(Website!UnitAssociation) then
				if self.childFeature.oclIsUndefined() then
					OclUndefined
				else
					self.childFeature.unitChildDateFormat()
				endif
			else
				OclUndefined
			endif endif
		endif endif endif;

helper context Website!UnitChildFeature def: unitChildDateFormat() : String
	= if self.oclIsTypeOf(Website!UnitChildElement) then
			self.serviceFeature.serviceDateFormat()
		else
			if self.childFeature.oclIsUndefined() then
				OclUndefined
			else
				self.childFeature.unitChildDateFormat()
			endif
		endif;

helper context Website!IncludedFeature def: wafHeaderClass() : String
	= if not self.headerClass.oclIsUndefined() and self.headerClass <> '' then
			self.headerClass
		else
			if self.feature.oclIsUndefined() then
				''
			else
				self.feature.headerClass
			endif
		endif;

helper context Website!IncludedFeature def: wafInputClass() : String
	= if not self.inputClass.oclIsUndefined() and self.inputClass <> '' then
			self.inputClass
		else
			if self.feature.oclIsUndefined() then
				''
			else
				self.feature.inputClass
			endif
		endif;

helper context Website!IncludedFeature def: wafDisplayClass() : String
	= if not self.displayClass.oclIsUndefined() and self.displayClass <> '' then
			self.displayClass
		else
			if self.feature.oclIsUndefined() then
				''
			else
				self.feature.displayClass
			endif
		endif;

helper context Website!IncludedFeature def: wafFooterClass() : String
	= if not self.footerClass.oclIsUndefined() and self.footerClass <> '' then
			self.footerClass
		else
			if self.feature.oclIsUndefined() then
				''
			else
				self.feature.footerClass
			endif
		endif;

helper context Website!Attribute def: placeholder() : String
	= if not self.placeholder.oclIsUndefined() and self.placeholder <> '' then
			self.placeholder
		else
			if self.oclIsTypeOf(Website!DataTypeAttribute) then
				self.dataType.placeholder
			else
				OclUndefined
			endif
		endif;

helper context Website!Attribute def: validationPattern() : String
	= if not self.validationPattern.oclIsUndefined() and self.validationPattern <> '' then
			self.validationPattern
		else
			if self.oclIsTypeOf(Website!DataTypeAttribute) then
				self.dataType.validationPattern
			else
				OclUndefined
			endif
		endif;


rule WafModel {
	from website : Website!WebGenModel, orm : ORM!OrmModel
	to waf : WAF!WafModel (
		persistence <- orm,
		services <- website.services,
		pages <- website.pages,
		menus <- website.menus,
		siteName <- website.websiteProperties.projectName,
		siteTitle <- website.websiteProperties.siteTitle,
		developmentVersion <- website.websiteProperties.developmentVersion,
		baseURL <- website.websiteProperties.baseURL,
		rewriteURLs <- website.websiteProperties.rewriteURLs,
		webmasterEmail <- website.websiteProperties.webmasterEmail,
		copyrightText <-
			if not website.websiteProperties.copyrightText.oclIsUndefined() and website.websiteProperties.copyrightText <> '' then
				website.websiteProperties.copyrightText
			else
				'&copy; '.concat(website.websiteProperties.siteTitle).concat(' <?php echo date("Y"); ?>')
			endif,
		metaDescription <- website.websiteProperties.metaDescription,
		frameworkTechnology <- website.websiteProperties.frameworkTechnology,
		ajaxTechnology <- website.websiteProperties.ajaxTechnology,
		captchaSiteKey <- website.websiteProperties.captchaSiteKey,
		captchaSecretKey <- website.websiteProperties.captchaSecretKey,
		textEditorURL <- website.websiteProperties.textEditorURL,
		topNavigationId <- website.websiteProperties.topNavigationId,
		sideMenu <- website.websiteProperties.sideMenu,
		staticUnitsEditable <- website.websiteProperties.staticUnitsEditable
	)
}


abstract rule NamedElement {
	from website : Website!NamedElement
	to waf : WAF!NamedElement (
		name <- website.name
	)
}

-- @extends NamedElement
abstract rule NamedDisplayElement {
	from website : Website!NamedDisplayElement
	to waf : WAF!NamedDisplayElement (
		displayLabel <- website.namedElementLabel()
	)
}


abstract rule IncludedFeature {
	from website : Website!IncludedFeature
	to waf : WAF!IncludedFeature (
		name <- website.name,
		forcedValue <- website.forcedValue,
		footer <- website.footer,
-- TBC xClass or targetXClass?
		headerClass <- website.wafHeaderClass(),
		inputClass <- website.wafInputClass(),
		displayClass <- website.wafDisplayClass(),
		footerClass <- website.wafFooterClass()
	)
}

-- @extends IncludedFeature
abstract rule IncludedElement {
	from website : Website!IncludedElement
	to waf : WAF!IncludedElement (
		obfuscateFormFields <- website.obfuscateFormFields,
		defaultValue <- website.defaultValue
	)
}

-- @extends IncludedFeature
abstract rule IncludedAssociation {
	from website : Website!IncludedAssociation
	to waf : WAF!IncludedAssociation (
	)
}


-- @extends NamedElement
rule Service {
	from website : Website!Service
	to waf : WAF!Service (
		modelName <-
			if not website.modelName.oclIsUndefined() then
				website.modelName
			else
				website.encapsulates->first().name
			endif,
		view <- website.view,
		viewName <-
			if not website.viewName.oclIsUndefined() and website.viewName <> '' then
				website.viewName
			else
				website.name.createViewName()
			endif,
		entities <-
			website.encapsulates
				->collect(e | thisModule.findOrmEntity(e.name)),
		daosUsed <-
			let entities : Sequence(ORM!Entity)
				= website.encapsulates
					->collect(e | thisModule.findOrmEntity(e.name))
			in entities
				->union(entities
					->collect(e | e.features)->flatten()
					->select(f | f.oclIsKindOf(ORM!Association))
					->select(f | f.owningEnd or f.bidirectional)
					->collect(f | f.opposite.parentEntity)),
		displayLabels <- website.displayLabels,
		selections <- website.selections,
		features <- website.features
	)
} 

-- @extends NamedElement
rule ModelLabel {
	from website : Website!ModelLabel
	to waf : WAF!ModelLabel (
		format <- website.format,
		features <- website.features
	)
}

-- @extends NamedElement
rule Selection {
	from website : Website!Selection
	to waf : WAF!Selection (
		joins <- website.joins,
		filter <- website.filter,
		ordering <- website.ordering,
		limit <- website.limit
	)
}

abstract rule ServiceFeature {
	from website : Website!ServiceFeature
	to waf : WAF!ServiceFeature (
		cardinality <-
			if website.oclIsKindOf(Website!ServiceEntityFeature) then
				website.serviceCardinality(website.required)
			else
				website.serviceViewCardinality(website.required)
			endif,
		dateFormat <-
			if website.oclIsKindOf(Website!ServiceEntityFeature) then
				website.serviceDateFormat()
			else
				OclUndefined
			endif
	)
}

-- @extends IncludedFeature, ServiceFeature
abstract rule ServiceEntityFeature {
	from website : Website!ServiceEntityFeature
	to waf : WAF!ServiceEntityFeature (
		name <-
			if not website.alias.oclIsUndefined() and website.alias <> '' then
				website.alias
			else
				website.name
			endif,
		displayLabel <- website.serviceEntityFeatureLabel(),
		viewColumnName <-
			if not website.viewColumnName.oclIsUndefined() and website.viewColumnName <> '' then
				website.viewColumnName
			else if not website.alias.oclIsUndefined() and website.alias <> '' then
				website.alias.createElementColumnName()
			else
				OclUndefined
			endif endif
	)
}

-- @extends ServiceEntityFeature, IncludedElement
rule ServiceEntityElement {
	from website : Website!ServiceEntityElement
	to waf : WAF!ServiceEntityElement (
		feature <- website.entityFeature(),
		caseInsensitive <- website.caseInsensitive,
		encrypt <- website.encrypt,
		placeholder <- website.placeholder(),
		validationPattern <- website.validationPattern()
	)
}

-- @extends ServiceFeature
abstract rule ServiceAssociation {
	from website : Website!ServiceAssociation
	to waf : WAF!ServiceAssociation (
		oppositeFeature <-
			if not website.oppositeFeature.oclIsUndefined() then
				website.oppositeFeature
			else
				let service : Website!Service = website.targetService()
				in service.features
					->select(f | f.oclIsKindOf(Website!ServiceEntityAssociation))
					->any(a | a.targetService() = website.partOf)
			endif
	)
}

-- @extends ServiceEntityFeature, ServiceAssociation, IncludedAssociation
rule ServiceEntityAssociation {
	from website : Website!ServiceEntityAssociation
	to waf : WAF!ServiceEntityAssociation (
		feature <- website.entityFeature(),
		forcedValue <- website.forcedValue,
		viewColumnName <-
			if not website.viewColumnName.oclIsUndefined() and website.viewColumnName <> '' then
				website.viewColumnName
			else if not website.alias.oclIsUndefined() and website.alias <> '' then
				website.alias.createAssociationColumnName()
			else
				OclUndefined
			endif endif,
		oppositeService <-
			if not website.oppositeService.oclIsUndefined() then
				website.oppositeService
			else
				website.targetService()
			endif
	)
}

-- @extends NamedElement, ServiceAssociation
rule ServiceViewAssociation {
	from website : Website!ServiceViewAssociation
	to waf : WAF!ServiceViewAssociation (
		oppositeService <- website.oppositeService
	)
}

-- @extends NamedDisplayElement, UnitContainer
rule Page {
	from website : Website!Page
	to waf : WAF!Page (
		authenticated <- website.authenticated,
		parentPage <-
			if website.parentPage.oclIsUndefined() then
				OclUndefined
			else
				website.parentPage.targetPage
			endif,
		topMenuOption <-
			if website.topMenuOption = #NeverInclude then
				#NeverInclude
			else if website.topMenuOption = #AlwaysInclude then
				#AlwaysInclude
			else
				#IncludeWhenAuthenticated
			endif endif,
		topMenuRank <- website.topMenuRank,
		navigationLabel <-
			if not website.navigationLabel.oclIsUndefined() and website.navigationLabel <> '' then
				website.navigationLabel
			else
				website.name.createLabel()
			endif,
		sideMenu <- website.pageSideMenu(),
		styleClass <- website.styleClass
	)
}


-- @extends NamedDisplayElement
abstract rule Menu {
	from website : Website!Menu
	to waf : WAF!Menu (
		entries <- website.entries,
		omitCaption <-
			if not website.omitCaption.oclIsUndefined() then
				website.omitCaption
			else
				false
			endif,
		captionClass <- website.captionClass.replaceAll(',', ' '),
		styleClass <- website.styleClass.replaceAll(',', ' '),
		layoutClass <- website.layoutClass.replaceAll(',', ' ')
	)
}

abstract rule MenuEntry {
	from website : Website!MenuEntry
	to waf : WAF!MenuEntry (
	)
}

-- @extends Menu
rule StaticMenu {
	from website : Website!StaticMenu
	to waf : WAF!StaticMenu (
	)
}

-- @extends MenuEntry, NamedDisplayElement
rule FixedPageMenuEntry {
	from website : Website!FixedPageMenuEntry
	to waf : WAF!FixedPageMenuEntry (
		page <- website.destination
	)
}

-- @extends MenuEntry, NamedDisplayElement
rule FixedActionMenuEntry {
	from website : Website!FixedActionMenuEntry
	to waf : WAF!FixedActionMenuEntry (
		action <- website.destination
	)
}

-- @extends MenuEntry, NamedDisplayElement
rule FixedCommandMenuEntry {
	from website : Website!FixedCommandMenuEntry
	to waf : WAF!FixedCommandMenuEntry (
--		destination <- website.destination
	)
}

-- @extends MenuEntry, NamedDisplayElement
rule EditStaticTextMenuEntry {
	from website : Website!EditStaticTextMenuEntry
	to waf : WAF!EditStaticTextMenuEntry (
	)
}

-- @extends Menu
rule DynamicMenu {
	from website : Website!DynamicMenu
	to waf : WAF!DynamicMenu (
		service <- website.service,
		selection <- website.selection,
		dynamicTitle <- website.dynamicTitle
	)
}

-- @extends MenuEntry
abstract rule MenuIncludedFeature {
	from website : Website!MenuIncludedFeature
	to waf : WAF!MenuIncludedFeature (
		displayLabel <-
			if not website.displayLabel.oclIsUndefined() and website.displayLabel <> '' then
				website.displayLabel
			else
				website.name.createLabel()
			endif
	)
}

-- @extends MenuIncludedFeature
rule MenuIncludedElement {
	from website : Website!MenuIncludedElement
	to waf : WAF!MenuIncludedElement (
	)
}

abstract rule UnitContainer {
	from website : Website!UnitContainer
	to waf : WAF!UnitContainer (
		units <- website.units
	)
}

-- @extends NamedDisplayElement
abstract rule ContentUnit {
	from website : Website!ContentUnit
	to waf : WAF!ContentUnit (
		purposeSummary <- website.purposeSummary,
		omitCaption <-
			if not website.omitCaption.oclIsUndefined() then
				website.omitCaption
			else
				false
			endif,
		captionClass <- website.captionClass.replaceAll(',', ' '),
		styleClass <- website.styleClass.replaceAll(',', ' '),
		layoutClass <- website.layoutClass.replaceAll(',', ' ')
	)
}

-- @extends ContentUnit
rule StaticUnit {
	from website : Website!StaticUnit
	to waf : WAF!StaticUnit (
		content <- website.content
	)
}

-- @extends ContentUnit
rule CommandUnit {
	from website : Website!CommandUnit
	to waf : WAF!CommandUnit (
		commands <- website.commands
	)
}

-- @extends NamedElement
abstract rule Command {
	from website : Website!Command
	to waf : WAF!Command (
	)
}


-- @extends ContentUnit
abstract rule DynamicUnit {
	from website : Website!DynamicUnit
	to waf : WAF!DynamicUnit (
		service <-
			if website.source.oclIsTypeOf(Website!Service) then
				website.source
			else
				OclUndefined
			endif,
		displayFields <- website.displayFields,
		supportActions <- website.supportActions,
		header <- website.header,
		footer <- website.footer,
		headerClass <- website.headerClass,
		controlClass <- website.controlClass,
		footerClass <- website.footerClass,
		errorClass <- website.errorClass
	)
}

abstract rule UnitField {
	from website : Website!UnitField
	to waf : WAF!UnitField (
		cardinality <- website.unitCardinality(),
		dateFormat <- website.unitDateFormat()
	)
}

-- @extends UnitField, IncludedFeature, InlineActionContainer
abstract rule UnitFeature {
	from website : Website!UnitFeature
	to waf : WAF!UnitFeature (
		onlyDisplayWhenNotEmpty <- website.onlyDisplayWhenNotEmpty,
		displayOption <-
			if website.collectionDisplayOption = #LineDirection then
				#LineDirection
			else
				#PageDirection
			endif,
		maximumDisplaySize <- website.maximumDisplaySize,
		autofocus <- website.autofocus
	)
}

-- @extends UnitFeature, IncludedElement
rule UnitElement {
	from website : Website!UnitElement
	to waf : WAF!UnitElement (
		serviceFeature <- website.serviceFeature,
		displayLabel <- website.unitEntityFeatureLabel(),
		placeholder <-
			if not website.placeholder.oclIsUndefined() and website.placeholder <> '' then
				website.placeholder
			else if not website.serviceFeature.oclIsUndefined() then
				website.serviceFeature.placeholder()
			else
				website.feature.placeholder()
			endif endif,
		validationPattern <-
			if not website.validationPattern.oclIsUndefined() and website.validationPattern <> '' then
				website.validationPattern
			else if not website.serviceFeature.oclIsUndefined() then
				website.serviceFeature.validationPattern()
			else
				website.feature.validationPattern()
			endif endif
	)
}

-- @extends UnitFeature, IncludedAssociation, UnitContainer
rule UnitAssociation {
	from website : Website!UnitAssociation
	to waf : WAF!UnitAssociation (
		serviceFeature <- website.serviceFeature,
		displayLabel <- website.unitAssociationLabel(),
		childFeature <- website.childFeature,
		selection <-
			if not website.selection.oclIsUndefined() then
				website.selection
			else if not website.serviceFeature.oclIsUndefined() then
				website.serviceFeature.selection
			else
				OclUndefined
			endif endif,
		dynamicLabel <- 
			if not website.dynamicLabel.oclIsUndefined() then
				website.dynamicLabel
			else
				if website.serviceFeature.oclIsUndefined() then
					OclUndefined
				else if website.serviceFeature.oclIsTypeOf(Website!ServiceEntityAssociation) then
					website.serviceFeature.dynamicLabel
				else
					OclUndefined
				endif endif
			endif,
		filters <- website.filters,
		maximumDisplaySize <- website.maximumDisplaySize,
		displayOption <-
			if website.collectionDisplayOption = #LineDirection then
				#LineDirection
			else
				#PageDirection
			endif
	)
}

abstract rule UnitChildFeature {
	from website : Website!UnitChildFeature
	to waf : WAF!UnitChildFeature (
	)
}

-- @extends UnitChildFeature
rule UnitChildElement {
	from website : Website!UnitChildElement
	to waf : WAF!UnitChildElement (
		serviceFeature <- website.serviceFeature
	)
}

-- @extends UnitChildFeature
rule UnitChildAssociation {
	from website : Website!UnitChildAssociation
	to waf : WAF!UnitChildAssociation (
		serviceFeature <- website.serviceFeature,
		childFeature <- website.childFeature
	)
}

-- @extends UnitField, NamedDisplayElement
abstract rule InterfaceField {
	from website : Website!InterfaceField
	to waf : WAF!InterfaceField (
		cardinality <-
			if website.required.oclIsUndefined() then
				#Optional
			else
				if website.required then
					#Required
				else
					#Optional
				endif
			endif,
		defaultValue <- website.defaultValue,
		mustMatch <- website.mustMatch,
		inputClass <- website.inputClass
	)
}

-- @extends InterfaceField
rule DataTypeField {
	from website : Website!DataTypeField
	to waf : WAF!DataTypeField (
		dataType <- thisModule.findOrmDataType(website.dataType.name),
		obfuscateFormFields <- website.obfuscateFormFields,
		encrypt <- website.encrypt
	)
}

-- @extends InterfaceField
rule DateField {
	from website : Website!DateField
	to waf : WAF!DateField (
		details <- website.details,
		format <- website.format
	)
}

-- @extends NamedDisplayElement
rule UnitSupportAction {
	from website : Website!UnitSupportAction
	to waf : WAF!UnitSupportAction (
		confirmMessage <- website.confirmMessage
	)
}


-- @extends DynamicUnit
abstract rule EditUnit {
	from website : Website!EditUnit
	to waf : WAF!EditUnit (
		confirmDestination <- website.confirmDestination,
		confirmLabel <-
			if not website.confirmLabel.oclIsUndefined() and website.confirmLabel <> '' then
				website.confirmLabel
			else
				if  website.oclIsTypeOf(Website!CreateUnit) then
					'Create'
				else if  website.oclIsTypeOf(Website!CreateUpdateUnit) then
					'Save'
				else if  website.oclIsTypeOf(Website!UpdateUnit) then
					'Update'
				else if  website.oclIsTypeOf(Website!MapUnit) then
					'Save'
				else
					'Edit'
				endif endif endif endif
			endif,
		cancelDestination <- website.cancelDestination,
		cancelLabel <-
			if not website.cancelLabel.oclIsUndefined() and website.cancelLabel <> '' then
				website.confirmLabel
			else
				'Cancel'
			endif
	)
}

-- @extends EditUnit
rule CreateUnit {
	from website : Website!CreateUnit
	to waf : WAF!CreateUnit (
	)
}

-- @extends EditUnit
rule CreateUpdateUnit {
	from website : Website!CreateUpdateUnit
	to waf : WAF!CreateUpdateUnit (
		clearLabel <- website.clearLabel
	)
}

-- @extends EditUnit
rule MapUnit {
	from website : Website!MapUnit
	to waf : WAF!MapUnit (
		readOnly <- website.readOnly,
		defaultZoomLevel <- website.defaultZoomLevel,
		location <- website.location,
		placeName <- website.placeName
	)
}

-- @extends EditUnit
rule UpdateUnit {
	from website : Website!UpdateUnit
	to waf : WAF!UpdateUnit (
	)
}

-- @extends DynamicUnit
abstract rule DataUnit {
	from website : Website!DataUnit
	to waf : WAF!DataUnit (
		selection <- website.selection,
		dynamicTitle <-
			if website.dynamicTitle.oclIsUndefined() then
				website.dynamicTitle
			else if website.dynamicTitle.oclIsKindOf(Website!Attribute) then
				if website.source.oclIsTypeOf(Website!Service) then
					website.source.features->select(f | f.name = website.dynamicTitle.name)->first()
				else
					OclUndefined
				endif
			else
				website.dynamicTitle
			endif endif
	)
}

-- @extends DataUnit
rule DetailsUnit {
	from website : Website!DetailsUnit
	to waf : WAF!DetailsUnit (
		omitFieldLabels <- website.omitFieldLabels
	)
}

-- @extends DataUnit, InlineActionContainer
abstract rule IndexUnit {
	from website : Website!IndexUnit
	to waf : WAF!IndexUnit (
		omitColumnLabels <- website.omitColumnLabels,
		defaultPaginationSize <- website.defaultPaginationSize,
		nextPageLabel <- website.nextPageLabel,
		previousPageLabel <- website.previousPageLabel,
		useFirstLastPageLinks <- website.useFirstLastPageLinks,
		firstPageLabel <- website.firstPageLabel,
		lastPageLabel <- website.lastPageLabel,
		rowClasses <- website.rowClasses.replaceAll(',', ' ')
	)
}

-- @extends IndexUnit
rule IndexGridUnit {
	from website : Website!IndexUnit (website.displayOption = #Grid)
	to waf : WAF!IndexGridUnit (
	)
}

-- @extends IndexUnit
rule IndexPageDirectionUnit {
	from website : Website!IndexUnit (website.displayOption = #PageDirection)
	to waf : WAF!IndexPageDirectionUnit (
	)
}

-- @extends IndexUnit
rule IndexLineDirectionUnit {
	from website : Website!IndexUnit (website.displayOption = #LineDirection)
	to waf : WAF!IndexLineDirectionUnit (
	)
}

-- @extends DynamicUnit
abstract rule ControlUnit {
	from website : Website!ControlUnit
	to waf : WAF!ControlUnit (
		submitLabel <-
			if not website.submitLabel.oclIsUndefined() and website.submitLabel <> '' then
				website.submitLabel
			else
				if  website.oclIsKindOf(Website!SearchUnit) then
					'Search'
				else if  website.oclIsKindOf(Website!RegistrationUnit) then
					'Register'
				else if  website.oclIsKindOf(Website!LoginUnit) then
					'Login'
				else if  website.oclIsKindOf(Website!ForgottenPasswordUnit) then
					'Forgotton Password'
				else
					'Control'
				endif endif endif endif
			endif,
		cancelDestination <- website.cancelDestination,
		cancelLabel <- website.cancelLabel
	)
}

-- @extends ControlUnit
rule SearchUnit {
	from website : Website!SearchUnit
	to waf : WAF!SearchUnit (
		resultsDestination <- website.resultsDestination
	)
}

-- @extends ControlUnit
rule ActionUnit {
	from website : Website!ActionUnit
	to waf : WAF!ActionUnit (
		omitFieldLabels <- website.omitFieldLabels
	)
}

-- @extends EditUnit
rule RegistrationUnit {
	from website : Website!RegistrationUnit
	to waf : WAF!RegistrationUnit (
	)
}

-- @extends ControlUnit
rule LoginUnit {
	from website : Website!LoginUnit
	to waf : WAF!LoginUnit (
		loginIdField <- website.loginIdField,
		passwordField <- website.passwordField,
		rememberMeField <- website.rememberMeField
	)
}

-- @extends ControlUnit
rule ForgottenPasswordUnit {
	from website : Website!ForgottenPasswordUnit
	to waf : WAF!ForgottenPasswordUnit (
		loginIdField <- website.loginIdField
	)
}


abstract rule InlineActionContainer {
	from website : Website!InlineActionContainer
	to waf : WAF!InlineActionContainer (
		actions <- website.actions
	)
}

-- @extends NamedDisplayElement
abstract rule InlineAction {
	from website : Website!InlineAction
	to waf : WAF!InlineAction (
		header <- website.header,
		footer <- website.footer,
		headerClass <- website.headerClass,
		footerClass <- website.footerClass
	)
}

-- @extends InlineAction
rule SelectAction {
	from website : Website!SelectAction
	to waf : WAF!SelectAction (
		target <- website.target
	)
}

-- @extends InlineAction
rule DeleteAction {
	from website : Website!DeleteAction 
	to waf : WAF!DeleteAction (
		destination <- website.destination,
		confirmMessage <- 
			if not website.confirmMessage.oclIsUndefined() then
				website.confirmMessage
			else if not website.displayLabel.oclIsUndefined() then
				website.displayLabel.concat('?')
			else
				website.name.createLabel().concat('?')
			endif endif
	)
}

-- @extends InlineAction
rule FeatureSupportAction {
	from website : Website!FeatureSupportAction 
	to waf : WAF!FeatureSupportAction (
		confirmMessage <-
			if not website.confirmMessage.oclIsUndefined() and website.confirmMessage <> '' then
				website.confirmMessage
			else
				OclUndefined
			endif
	)
}


helper context Website!Expression def: isInterfaceContainer() : Boolean
	= if self.refImmediateComposite().oclIsUndefined() then
			false
		else if self.refImmediateComposite().oclIsKindOf(Website!ServiceEntityElement) then
			true
		else if self.refImmediateComposite().oclIsKindOf(Website!UnitElement) then
			true
		else if self.refImmediateComposite().oclIsKindOf(Website!Selection) then
			true
		else if self.refImmediateComposite().oclIsKindOf(Website!Expression) then
			self.refImmediateComposite().isInterfaceContainer()
		else
			false
		endif endif endif endif endif;

helper context Website!Order def: isInterfaceContainer() : Boolean
	= if self.refImmediateComposite().oclIsUndefined() then
			false
		else if self.refImmediateComposite().oclIsKindOf(Website!Selection) then
			true
		else
			false
		endif endif;


abstract rule Literal {
	from website : Website!Literal (website.isInterfaceContainer())
	to waf : WAF!Literal (
	)
}

-- @extends Literal
rule NullLiteral {
	from website : Website!NullLiteral (website.isInterfaceContainer())
	to waf : WAF!NullLiteral (
	)
}

-- @extends Literal
rule IntegerLiteral {
	from website : Website!IntegerLiteral (website.isInterfaceContainer())
	to waf : WAF!IntegerLiteral (
		value <- website.value
	)
}

-- @extends Literal
rule StringLiteral {
	from website : Website!StringLiteral (website.isInterfaceContainer())
	to waf : WAF!StringLiteral (
		value <- website.value
	)
}

-- @extends Literal
rule CurrentTime {
	from website : Website!CurrentTime (website.isInterfaceContainer())
	to waf : WAF!CurrentTime (
	)
}

rule Function {
	from website : Website!Function
	to waf : WAF!Function (
		name <- website.name
	)
}

rule ModelReference {
	from website : Website!ModelReference
	to waf : WAF!ModelReference (
		unit <- website.unit
	)
}

rule FeatureReference {
	from website : Website!FeatureReference
	to waf : WAF!FeatureReference (
		feature <- website.field
	)
}

rule CurrentUserReference {
	from website : Website!CurrentUserReference
	to waf : WAF!CurrentUserReference (
	)
}

abstract rule Predicate {
	from website : Website!Predicate
	to waf : WAF!Predicate (
		negated <- website.negated
	)
}

-- @extends Predicate
rule PredicateBooleanOperator {
	from website : Website!PredicateBooleanOperator (website.isInterfaceContainer())
	to waf : WAF!PredicateBooleanOperator (
		expressions <- website.expressions,
		operator <- website.operator
	)
}

-- @extends Predicate
rule PredicateEqualityOperator {
	from website : Website!PredicateEqualityOperator (website.isInterfaceContainer())
	to waf : WAF!PredicateEqualityOperator (
		left <- website.left,
		right <- website.right
	)
}

-- @extends Predicate
rule PredicateComparisonOperator {
	from website : Website!PredicateComparisonOperator (website.isInterfaceContainer())
	to waf : WAF!PredicateComparisonOperator (
		left <- website.left,
		operator <- website.operator,
		right <- website.right
	)
}

-- @extends Predicate
rule PredicateIsOperator {
	from website : Website!PredicateIsOperator (website.isInterfaceContainer())
	to waf : WAF!PredicateIsOperator (
		left <- website.left,
		right <- website.right
	)
}

-- @extends Predicate
rule PredicateLikeOperator {
	from website : Website!PredicateLikeOperator (website.isInterfaceContainer())
	to waf : WAF!PredicateLikeOperator (
		left <- website.left,
		right <- website.right
	)
}

-- @extends Predicate
rule PredicateIsEmptyOperator {
	from website : Website!PredicateIsEmpty (website.isInterfaceContainer())
	to waf : WAF!PredicateIsEmpty (
		feature <- website.feature
	)
}

abstract rule Order {
	from website : Website!Order
	to waf : WAF!Order (
		path <- website.path
	)
}

-- @extends Order
rule Asc {
	from website : Website!Asc (website.isInterfaceContainer())
	to waf : WAF!Asc (
	)
}

-- @extends Order
rule Desc {
	from website : Website!Desc (website.isInterfaceContainer())
	to waf : WAF!Desc (
	)
}
