-- @atlcompiler emftvm 
--
-- @path WAF=/uk.ac.man.cs.mdsd.Waf.model/model/Waf.ecore

module CopyCriteria;
create waf : WAF from partialWaf : WAF;

 

helper context WAF!Expression def: isWafContainer() : Boolean
	= if self.refImmediateComposite().oclIsUndefined() then
			false
		else if self.refImmediateComposite().oclIsKindOf(WAF!IncludedElement) then
			true
		else if self.refImmediateComposite().oclIsKindOf(WAF!IncludedAssociation) then
			true
		else if self.refImmediateComposite().oclIsKindOf(WAF!Selection) then
			true
		else if self.refImmediateComposite().oclIsKindOf(WAF!Expression) then
			self.refImmediateComposite().isWafContainer()
		else if self.refImmediateComposite().oclIsKindOf(WAF!Order) then
			self.refImmediateComposite().isWafContainer()
		else
			false
		endif endif endif endif endif endif;


helper context WAF!Order def: isWafContainer() : Boolean
	= if self.refImmediateComposite().oclIsUndefined() then
			false
		else if self.refImmediateComposite().oclIsKindOf(WAF!Selection) then
			true
		else
			false
		endif endif;


abstract rule Literal {
	from partialWaf : WAF!Literal (partialWaf.isWafContainer())
	to waf : WAF!Literal (
	)
}

-- @extends Literal
rule NullLiteral {
	from partialWaf : WAF!NullLiteral (partialWaf.isWafContainer())
	to waf : WAF!NullLiteral (
	)
}

-- @extends Literal
rule IntegerLiteral {
	from partialWaf : WAF!IntegerLiteral (partialWaf.isWafContainer())
	to waf : WAF!IntegerLiteral (
		value <- partialWaf.value
	)
}

-- @extends Literal
rule StringLiteral {
	from partialWaf : WAF!StringLiteral (partialWaf.isWafContainer())
	to waf : WAF!StringLiteral (
		value <- partialWaf.value
	)
}

-- @extends Literal
rule CurrentTime {
	from partialWaf : WAF!CurrentTime (partialWaf.isWafContainer())
	to waf : WAF!CurrentTime (
	)
}


rule Function {
	from partialWaf : WAF!Function (partialWaf.isWafContainer())
	to waf : WAF!Function (
		name <- partialWaf.name
	)
}


abstract rule Predicate {
	from partialWaf : WAF!Predicate
	to waf : WAF!Predicate (
		negated <- partialWaf.negated
	)
}

-- @extends Predicate
rule PredicateBooleanOperator {
	from partialWaf : WAF!PredicateBooleanOperator (partialWaf.isWafContainer())
	to waf : WAF!PredicateBooleanOperator (
		expressions <- partialWaf.expressions,
		operator <- partialWaf.operator
	)
}

-- @extends Predicate
rule PredicateEqualityOperator {
	from partialWaf : WAF!PredicateEqualityOperator (partialWaf.isWafContainer())
	to waf : WAF!PredicateEqualityOperator (
		left <- partialWaf.left,
		right <- partialWaf.right
	)
}

-- @extends Predicate
rule PredicateComparisonOperator {
	from partialWaf : WAF!PredicateComparisonOperator (partialWaf.isWafContainer())
	to waf : WAF!PredicateComparisonOperator (
		left <- partialWaf.left,
		operator <- partialWaf.operator,
		right <- partialWaf.right
	)
}

-- @extends Predicate
rule PredicateIsOperator {
	from partialWaf : WAF!PredicateIsOperator (partialWaf.isWafContainer())
	to waf : WAF!PredicateIsOperator (
		left <- partialWaf.left,
		right <- partialWaf.right
	)
}

-- @extends Predicate
rule PredicateLikeOperator {
	from partialWaf : WAF!PredicateLikeOperator (partialWaf.isWafContainer())
	to waf : WAF!PredicateLikeOperator (
		left <- partialWaf.left,
		right <- partialWaf.right
	)
}

-- @extends Predicate
rule PredicateIsEmpty {
	from partialWaf : WAF!PredicateIsEmpty (partialWaf.isWafContainer())
	to waf : WAF!PredicateIsEmpty (
		feature <- partialWaf.feature
	)
}


abstract rule Order {
	from partialWaf : WAF!Order (partialWaf.isWafContainer())
	to waf : WAF!Order (
		path <- partialWaf.path
	)
}

-- @extends Order
rule Asc {
	from partialWaf : WAF!Asc (partialWaf.isWafContainer())
	to waf : WAF!Asc (
	)
}

-- @extends Order
rule Desc {
	from partialWaf : WAF!Desc (partialWaf.isWafContainer())
	to waf : WAF!Desc (
	)
}

