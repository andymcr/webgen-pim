-- @atlcompiler emftvm 
--
-- @path Website=/uk.ac.man.cs.mdsd.webgen.model/model/website.ecore
-- @path ORM=/uk.ac.man.cs.mdsd.orm.model/model/orm.ecore

module PassPersistenceEntityFeatures;
create dummyOrm : ORM refining orm : ORM, website : Website;

uses WebsiteHelpers;
uses PersistenceExpression;


abstract rule NamedElement {
	from website : Website!NamedElement
	to orm : ORM!NamedElement (
		name <- website.name
	)
}

-- @extends NamedElement
abstract rule NamedDisplayElement {
	from website : Website!NamedDisplayElement
	to orm : ORM!NamedDisplayElement (
		displayLabel <-
			if not website.displayLabel.oclIsUndefined() and website.displayLabel <> '' then
				website.displayLabel
			else
				website.name.createLabel()
			endif
	)
}


abstract rule Feature {
	from website : Website!Feature
	to orm : ORM!Feature (
		serializationExpose <- website.serializationExpose,
		serializationGroups <- website.serializationGroups
	)
}

-- @extends Feature
abstract rule Attribute {
	from website : Website!Attribute
	to orm : ORM!Attribute (
		defaultValue <- website.defaultValue,
		validationPattern <- website.validationPattern()
	)
}

-- @extends Feature
abstract rule Association {
	from website : Website!Association
	to orm : ORM!Association (
		serializationMaxDepth <- website.serializationMaxDepth
	)
}


rule Entity {
	from partialOrm : ORM!Entity
	to orm : ORM!Entity (
		-- features via partOf in features
--		features <-
--			thisModule.findWebsiteEntityOrView(partialOrm.name).associationEnds
--				->select(a | a.targetPrimaryKey)
--				->collect(a | thisModule.x(a))
	)
}

lazy rule x {
	from website : Website!EntityAssociation
	to orm : ORM!SingletonElement (
		name <- website.targetFeatureName().concat('Id'),
		displayLabel <- website.targetDisplayLabel(),
		cardinality <- #Required,
		dataType <- thisModule.findOrmDataType('String'),
		ormType <- thisModule.findWebsiteDataType('String').ormType(), 
		primaryKey <- true,
		persistentType <- thisModule.findWebsiteDataType('String').persistentType(), 
		columnName <- website.targetFeatureName().createAssociationColumnName()
	)
}

-- @extends NamedDisplayElement
abstract rule EntityFeature {
	from website : Website!EntityFeature
	to orm : ORM!EntityFeature (
		partOf <- thisModule.findOrmEntityOrView(website.partOf.name),
		cardinality <- website.cardinality
	)
}

-- @extends EntityFeature, Attribute
abstract rule EntityAttribute {
	from website : Website!EntityAttribute
	to orm : ORM!EntityAttribute (
		columnName <-
			if not website.columnName.oclIsUndefined() and website.columnName <> '' then
				website.columnName.createAttributeColumnName()
			else
				website.name.createAttributeColumnName()
			endif,
		primaryKey <- website.primaryKey
	)
}

-- @extends EntityAttribute
abstract rule SingletonAttribute {
	from website : Website!Attribute (website.cardinality <> #Many)
	to orm : ORM!SingletonAttribute (
		required <- website.cardinality = #Required,
		"unique" <- website."unique"
	)
}

-- @extends EntityAttribute
abstract rule CollectionAttribute {
	from website : Website!Attribute (website.cardinality = #Many)
	to orm : ORM!CollectionAttribute (
	)
}

-- @extends SingletonAttribute
rule SingletonElement {
	from website : Website!DataTypeAttribute (website.cardinality <> #Many)
	to orm : ORM!SingletonElement (
		dataType <- thisModule.findOrmDataType(website.dataType.name),
		persistentType <- 
			if not website.persistentType.oclIsUndefined() and website.persistentType <> '' then
				website.persistentType
			else
				website.dataType.persistentType()
			endif,
		ormType <- 
			if not website.ormType.oclIsUndefined() and website.ormType <> '' then
				website.ormType
			else 
				website.dataType.ormType()
			endif,
		obfuscateFormFields <- website.obfuscateFormFields,
		caseInsensitive <- website.caseInsensitive,
		encrypt <- website.encrypt
	)
}

-- @extends CollectionAttribute
rule CollectionElement {
	from website : Website!DataTypeAttribute (website.cardinality = #Many)
	to orm : ORM!CollectionElement (
	)
}

abstract rule DateAttribute {
	from website : Website!DateAttribute
	to orm : ORM!DateAttribute (
		persistentType <- 
			if not website.persistentType.oclIsUndefined() and website.persistentType <> '' then
				website.persistentType
			else
				if website.details = #DateOnly then
					'date'
				else if website.details = #TimeOnly then
					'time'
				else
					'datetime'
				endif endif
			endif,
		ormType <- 
			if not website.ormType.oclIsUndefined() and website.ormType <> '' then
				website.ormType
			else 
				if website.details = #DateOnly then
					'date'
				else if website.details = #TimeOnly then
					'time'
				else
					'datetime'
				endif endif
			endif,
		details <- website.details
	)
}

-- @extends SingletonAttribute, DateAttribute
rule SingletonDate {
	from website : Website!DateAttribute (website.cardinality <> #Many)
	to orm : ORM!SingletonDate (
	)
}

-- @extends CollectionAttribute, DateAttribute
rule CollectionDate {
	from website : Website!DateAttribute (website.cardinality = #Many)
	to orm : ORM!CollectionDate (
	)
}

-- @extends SingletonAttribute
rule SingletonURL {
	from website : Website!UrlAttribute (website.cardinality <> #Many)
	to orm : ORM!SingletonURL (
		displayValue <- website.displayValue,
		persistentType <-
			if not website.persistentType.oclIsUndefined() and website.persistentType <> '' then
				website.persistentType
			else
				thisModule.findWebsiteDataType('String').persistentType()
			endif,
		ormType <-
			if not website.ormType.oclIsUndefined() and website.ormType <> '' then
				website.ormType
			else 
				thisModule.findWebsiteDataType('String').ormType()
			endif
	)
}

-- @extends SingletonAttribute
abstract rule SingletonResource {
	from website : Website!ResourceAttribute (website.cardinality <> #Many)
	to orm : ORM!SingletonResource (
		persistentType <-
			if not website.persistentType.oclIsUndefined() and website.persistentType <> '' then
				website.persistentType
			else
				thisModule.findWebsiteDataType('String').persistentType()
			endif,
		ormType <-
			if not website.ormType.oclIsUndefined() and website.ormType <> '' then
				website.ormType
			else 
				thisModule.findWebsiteDataType('String').ormType()
			endif,
		maximumUploadSize <-
			if website.maximumUploadSize > 0 then
				website.maximumUploadSize
			else
				thisModule.findWebsiteProperties().defaultMaximumUploadSize
			endif,
		validUploadMimeTypes <- website.validUploadMimeTypes,
		validUploadExtensions <- website.validUploadExtensions,
		uploadsWithinWebsite <- website.uploadsWithinWebsite,
		uploadPath <- website.uploadPath
	)
}

abstract rule PathElement {
	from website: Website!PathElement
	to orm : ORM!PathElement(
	)
}

-- @extends PathElement
rule StaticPathElement {
	from website: Website!StaticPathElement
	to orm : ORM!StaticPathElement(
		element <- website.element
	)
}

-- @extends PathElement
rule DatePathElement {
	from website: Website!DatePathElement
	to orm : ORM!DatePathElement(
		format <- website.format
	)
}

-- @extends SingletonResource
rule SingletonFile {
	from website : Website!FileAttribute (website.cardinality <> #Many)
	to orm : ORM!SingletonFile (
	)
}

-- @extends SingletonResource
rule SingletonImage {
	from website : Website!ImageAttribute (website.cardinality <> #Many)
	to orm : ORM!SingletonImage (
	)
}

-- @extends SingletonAttribute
rule SingletonLocation {
	from website : Website!LocationAttribute (website.cardinality <> #Many)
	to orm : ORM!SingletonLocation (
	)
}

-- @extends EntityFeature, Association
abstract rule EntityAssociation {
	from website : Website!EntityAssociation
	to orm : ORM!EntityAssociation (
		columnName <-
			if not website.columnName.oclIsUndefined() and website.columnName <> '' then
				website.columnName
			else
				website.name.createAssociationColumnName()
			endif,
		pivotTableName <- website.createPivotTableName(),
		keys <- website.keys
	)
}

-- @extends EntityAssociation
rule OneToOneAssociationWithoutContainment {
	from website : Website!AssociationWithoutContainment (website.cardinality <> #Many and website.targetCardinality <> #Many)
	to orm : ORM!SingletonAssociation (
		associationRelationship <- #OneToOne,
		opposite <- associationEnd,
		owningEnd <- website.cardinality = #Required or website.targetCardinality <> #Required,
		required <- website.cardinality = #Required
	),
	associationEnd : ORM!SingletonAssociation (
		name <- website.targetFeatureName(),
		displayLabel <- website.targetDisplayLabel(),
		partOf <- thisModule.findOrmEntityOrView(website.targetEntity.name),
		associationRelationship <- #OneToOne,
		opposite <- orm,
		owningEnd <- website.cardinality <> #Required and website.targetCardinality = #Required,
		visible <- website.bidirectional,
		primaryKey <- website.targetPrimaryKey,
		columnName <-
			if not website.columnName.oclIsUndefined() and website.columnName <> '' then
				website.columnName
			else
				website.targetFeatureName().createAssociationColumnName()
			endif,
		required <- website.targetCardinality = #Required,
		pivotTableName <- website.createPivotTableName()
	)
}

-- @extends EntityAssociation
rule ManyToOneAssociationWithoutContainment {
	from website : Website!AssociationWithoutContainment (website.cardinality <> #Many and website.targetCardinality = #Many)
	to orm : ORM!SingletonAssociation (
		associationRelationship <- #ManyToOne,
		opposite <- associationEnd,
		owningEnd <- true,
		required <- website.cardinality = #Required
	),
	associationEnd : ORM!CollectionAssociation (
		name <- website.targetFeatureName(),
		displayLabel <- website.targetDisplayLabel(),
		partOf <- thisModule.findOrmEntityOrView(website.targetEntity.name),
		associationRelationship <- #OneToMany,
		opposite <- orm,
		owningEnd <- false,
		visible <- website.bidirectional,
		primaryKey <- website.targetPrimaryKey,
		pivotTableName <- website.createPivotTableName()
	)
}

-- @extends EntityAssociation
rule OneToManyAssociationWithoutContainment {
	from website : Website!AssociationWithoutContainment (website.cardinality = #Many and website.targetCardinality <> #Many)
	to orm : ORM!CollectionAssociation (
		collectionType <- thisModule.findOrmCollection(website.targetEntity.name),
		associationRelationship <- #OneToMany,
		opposite <- associationEnd,
		owningEnd <- false
	),
	associationEnd : ORM!SingletonAssociation (
		name <- website.targetFeatureName(),
		displayLabel <- website.targetDisplayLabel(),
		partOf <- thisModule.findOrmEntityOrView(website.targetEntity.name),
		associationRelationship <- #ManyToOne,
		opposite <- orm,
		owningEnd <- true,
		visible <- website.bidirectional,
		primaryKey <- website.targetPrimaryKey,
		columnName <-
			if not website.columnName.oclIsUndefined() and website.columnName <> '' then
				website.columnName
			else
				website.targetFeatureName().createAssociationColumnName()
			endif,
		required <- website.targetCardinality = #Required,
		pivotTableName <- website.createPivotTableName()
	)
}

-- @extends EntityAssociation
rule ManyToManyAssociationWithoutContainment {
	from website : Website!AssociationWithoutContainment (website.cardinality = #Many and website.targetCardinality = #Many)
	to orm : ORM!CollectionAssociation (
		collectionType <- thisModule.findOrmCollection(website.targetEntity.name),
		associationRelationship <- #ManyToMany,
		opposite <- associationEnd,
		owningEnd <- true
	),
	associationEnd : ORM!CollectionAssociation (
		name <- website.targetFeatureName(),
		displayLabel <- website.targetDisplayLabel(),
		partOf <- thisModule.findOrmEntityOrView(website.targetEntity.name),
		associationRelationship <- #ManyToMany,
		opposite <- orm,
		owningEnd <- false,
		pivotTableName <- website.createPivotTableName(),
		visible <- website.bidirectional,
		primaryKey <- website.targetPrimaryKey,
		columnName <- website.targetFeatureName().createAssociationColumnName()
	)
}

-- @extends EntityAssociation
rule OneToOneAssociationWithContainment {
	from website : Website!AssociationWithContainment (website.cardinality <> #Many)
	to orm : ORM!SingletonAssociation (
		associationRelationship <- #OneToOne,
		opposite <- associationEnd,
		contains <- true,
		visible <- website.sourceVisible,
		required <- website.cardinality = #Required
	),
	associationEnd : ORM!SingletonAssociation (
		name <- website.targetFeatureName(),
		displayLabel <- website.targetDisplayLabel(),
		partOf <- thisModule.findOrmEntityOrView(website.targetEntity.name),
		associationRelationship <- #OneToOne,
		opposite <- orm,
		owningEnd <- true,
		container <- true,
		visible <- website.bidirectional,
		primaryKey <- website.targetPrimaryKey,
		columnName <-
			if not website.columnName.oclIsUndefined() and website.columnName <> '' then
				website.columnName
			else
				website.targetFeatureName().createAssociationColumnName()
			endif,
		required <- true,
		pivotTableName <- website.createPivotTableName()
	)
}

-- @extends EntityAssociation
rule OneToManyAssociationWithContainment {
	from website : Website!AssociationWithContainment (website.cardinality = #Many)
	to orm : ORM!CollectionAssociation (
		associationRelationship <- #OneToMany,
		opposite <- associationEnd,
		contains <- true,
		visible <- website.sourceVisible
	),
	associationEnd : ORM!SingletonAssociation (
		name <- website.targetFeatureName(),
		displayLabel <- website.targetDisplayLabel(),
		partOf <- thisModule.findOrmEntityOrView(website.targetEntity.name),
		associationRelationship <- #ManyToOne,
		opposite <- orm,
		owningEnd <- true,
		container <- true,
		visible <- website.bidirectional,
		primaryKey <- website.targetPrimaryKey,
		columnName <-
			if not website.columnName.oclIsUndefined() and website.columnName <> '' then
				website.columnName
			else
				website.targetFeatureName().createAssociationColumnName()
			endif,
		required <- true,
		pivotTableName <- website.createPivotTableName()
	)
}

rule AssocationKey {
	from website : Website!AssociationKey
	to orm : ORM!AssociationKey (
		sourceFeature <- website.sourceFeature,
		targetFeature <-
			if website.targetFeature.oclIsKindOf(Website!EntityAttribute) then
				website.targetFeature
			else
				if website.keyFor.targetEntityX = website.keyFor.targetEntity then
					OclUndefined
				else
					website.targetFeature
				endif
			endif
	)
}
