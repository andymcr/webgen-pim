-- @atlcompiler emftvm

library WebsiteHelpers;

helper context String def: lowercaseFirst() : String
	= self.substring(1, 1).toLower().concat(self.substring(2, self.size()));

helper context String def: uppercaseFirst() : String
	= self.substring(1, 1).toUpper().concat(self.substring(2, self.size()));

helper context String def: createName() : String
	= if self.trim().replaceAll('[A-Z]', '') = '' then
			self.trim()
		else
			self.trim().lowercaseFirst().replaceAll('([A-Z])', '_$1')
		endif;

helper context String def: createLabel() : String
	= if self.trim().replaceAll('[A-Z]', '') = '' then
			self
		else
			self.replaceAll('([A-Z])', ' $1').trim().uppercaseFirst()
		endif;


helper def: findWebGenModel() : Website!WebGenModel
	= Website!WebGenModel.allInstancesFrom('website')->first();

helper def: findWebsiteProperties() : Website!WebsiteProperties
	= thisModule.findWebGenModel().websiteProperties;


helper context String def: createTableName() : String
	= let properties : Website!WebsiteProperties = thisModule.findWebsiteProperties()
		in if properties.databaseTechnology = #Oracle then
				self.toUpper()
			else
				self.toLower()
			endif;

helper context String def: createAttributeColumnName() : String
	= let properties : Website!WebsiteProperties = thisModule.findWebsiteProperties()
		in if properties.databaseTechnology = #Oracle then
				self.createName().toUpper()
			else
				self.createName().toLower()
			endif;

helper context String def: createAssociationColumnName() : String
	= let properties : Website!WebsiteProperties = thisModule.findWebsiteProperties()
		in let name : String
				= if properties.ormTechnology = #Kohana 
							or properties.ormTechnology = #DoctrineORM then
						self.createName().concat('_id')
					else
						self.createName()
					endif
			in if properties.databaseTechnology = #Oracle then
					name.toUpper()
				else
					name.toLower()
				endif;

helper context Website!DataType def: persistentType() : String
	= if not self.persistentType.oclIsUndefined() and self.persistentType <> '' then
			self.persistentType
		else
			if self.oclIsTypeOf(Website!EnumerationType) then
				'Integer'
			else
				self.name
			endif
		endif;

helper context Website!DataType def: ormType() : String
	= if not self.ormType.oclIsUndefined() and self.ormType <> '' then
			self.ormType
		else
			let typeName : String
				= if self.oclIsTypeOf(Website!EnumerationType) then
						'Integer'
					else
						self.name
					endif
			in let properties : Website!WebsiteProperties = thisModule.findWebsiteProperties()
				in if properties.ormTechnology = #DoctrineORM then
						typeName.toLowerCase()
					else
						typeName
					endif
		endif;

helper context Website!Association def: targetEntityName() : String
	= if self.oclIsTypeOf(Website!EncapsulatedAssociation) then
			self.association.targetEntityName()
		else
			self.targetEntity.name
		endif;

	helper context Website!Association def: targetFeatureName() : String
	= if self.oclIsTypeOf(Website!EncapsulatedAssociation) then
			self.association.targetFeatureName()
		else
			if not self.targetFeatureName.oclIsUndefined() and self.targetFeatureName <> '' then
				self.targetFeatureName
			else
				'inv'.concat(self.name.uppercaseFirst())
			endif
		endif;

helper context Website!Association def: targetDisplayLabel() : String
	= if not self.targetDisplayLabel.oclIsUndefined() and self.targetDisplayLabel <> '' then
			self.targetDisplayLabel
		else
			self.targetFeatureName().createLabel()
		endif;

helper context Website!Association def: createPivotTableName() : String
	= let name : String
			= if not self.pivotTableName.oclIsUndefined() and self.pivotTableName <> '' then
					self.pivotTableName
				else
					self.partOf.name.concat('_').concat(self.targetEntity.name)
				endif
		in let properties : Website!WebsiteProperties = thisModule.findWebsiteProperties()
			in if properties.databaseTechnology = #Oracle then
					name.toUpper()
				else
					name.toLower()
				endif;

	

helper context Website!Feature def: collectionType() : ORM!CollectionType
    = if self."unique" then
		if self.ordered then
			#"OrderedSet"
		else
			#"Set"
		endif
	else
		if self.ordered then
			#List
		else
			#"Bag"
		endif
	endif;

helper context Website!Feature def: inverseCollectionType() : ORM!CollectionType
    = if self.targetUnique then
		#"Set"
	else
		#"Bag"
	endif;


helper def: findWebsiteEntityOrView(name : String) : Website!EntityOrView
	= Website!EntityOrView.allInstancesFrom('website')->any(e | e.name = name);

helper context Website!EntityOrView def: getWebsiteFeature(featureName : String) : Website!Feature
	= self.features->any(f | f.name = featureName);

helper def: findWebsiteDataType(name : String) : Website!EntityOrView
	= Website!DataType.allInstancesFrom('website')->any(t | t.name = name);

helper def: findOrmDataType(name : String) : ORM!DataType
	= ORM!DataType.allInstancesFrom('orm')->any(d | d.name = name);

helper context Website!Feature def: findOrmTargetEntity() : ORM!Entity
	= thisModule.findOrmEntityOrView(self.targetEntity.name);

helper def: findOrmEntityOrView(name : String) : ORM!EntityOrView
	= ORM!EntityOrView.allInstancesFrom('orm')->any(e | e.name = name);

helper context Website!Feature def: findOrmEntityOrView() : ORM!EntityOrView
	= thisModule.findOrmEntityOrView(self.partOf.name);

helper context ORM!EntityOrView def: getOrmFeature(featureName : String) : ORM!Feature
	= self.features->any(f | f.name = featureName);

helper context ORM!EntityOrView def: getOrmLabel(labelName : String) : ORM!ModelLabel
	= self.labels->any(l | l.name = labelName);

helper def: findOrmCollection(name : String) : ORM!DataType
	= ORM!CollectionType.allInstancesFrom('orm')
		->any(c | c.elementType.name = name );


helper def: findWafService(name : String) : WAF!Service
	= WAF!Service.allInstancesFrom('waf')->any(d | d.name = name);


helper def: findWafMenu(name : String) : WAF!Menu
	= WAF!Menu.allInstancesFrom('waf')->select(m | m.name = name)->first();


helper context WAF!Service def: findServiceFeature(name : String) : WAF!ServiceFeature
	= self.features->any(f | f.name = name);

