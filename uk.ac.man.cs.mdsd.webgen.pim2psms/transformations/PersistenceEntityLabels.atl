-- @atlcompiler emftvm 
--
-- @path Website=/uk.ac.man.cs.mdsd.webgen.model/model/website.ecore
-- @path ORM=/uk.ac.man.cs.mdsd.orm.model/model/orm.ecore

module PersistenceEntityLabels;
create dummyOrm : ORM refining orm : ORM, website : Website;

uses WebsiteHelpers;


abstract rule NamedElement {
	from website : Website!NamedElement
	to orm : ORM!NamedElement (
		name <- website.name
	)
}


abstract rule EntityOrView {
	from partialOrm : ORM!EntityOrView
	to orm : ORM!EntityOrView (
	)
}

-- @extends NamedElement
rule ModelLabel {
	from website : Website!ModelLabel
	to orm : ORM!ModelLabel (
		format <- website.format,
		features <- website.features
	)
}

abstract rule ModelLabelFeature {
	from website : Website!ModelLabelFeature
	to orm : ORM!ModelLabelFeature (
	)
}

-- @extends ModelLabelFeature
rule ModelLabelAttribute {
	from website : Website!ModelLabelAttribute
	to orm : ORM!ModelLabelAttribute (
		attribute <-
			if website.attribute.oclIsKindOf(Website!EntityAttribute) then
				website.attribute.findOrmFeature()
			else
				website.attribute
			endif,
		dateFormat <-
			if not website.dateFormat.oclIsUndefined() and website.dateFormat.displayLabel <> '' then
				website.dateFormat
			else
				website.attribute.dateFormat()
			endif
	)
}

-- @extends ModelLabelFeature
rule ModelLabelAssociation {
	from website : Website!ModelLabelAssociation
	to orm : ORM!ModelLabelAssociation (
		association <-
			if website.association.oclIsUndefined() then
				website.association
			else
				if website.isSourceAssociation then
					website.association.findOrmEntityOrView().getOrmFeature(website.association.name)
				else
					website.association.findOrmTargetEntity().getOrmFeature(website.association.targetFeatureName)
				endif
			endif,
		dynamicLabel <- website.dynamicLabel
	)
}


-- @extends EntityOrView
rule Entity {
	from partialOrm : ORM!Entity
	to orm : ORM!Entity (
		labels <-
			let website : Website!EntityOrView
				= thisModule.findWebsiteEntityOrView(partialOrm.name)
				in if website.labels->exists(l | l.name = 'default') then
						website.labels
					else
						website.labels-> union(
							if partialOrm.features->exists(f | f.name = 'name') then
								Sequence{thisModule.implicitEntityLabel(
									partialOrm.features->any(f | f.name = 'name'))
								}
							else if partialOrm.features->exists(f | f.name = 'title') then
								Sequence{thisModule.implicitEntityLabel(
									partialOrm.features->any(f | f.name = 'title'))
								}
							else
								Sequence{}
							endif endif)
					endif
	)
}

lazy rule implicitEntityLabel {
	from website : ORM!EntityFeature
	to orm : ORM!ModelLabel (
		name <- 'default',
		format <- '%s',
		features <- Sequence{feature}
	), feature : ORM!ModelLabelAttribute (
		attribute <- website
	)
	do {
		orm;
	}
}


-- @extends EntityOrView
rule View {
	from partialOrm : ORM!View
	to orm : ORM!View (
		-- features via partOf in features
		keys <- thisModule.findWebsiteEntityOrView(partialOrm.name).keys,
		labels <-
			let website : Website!EntityOrView
				= thisModule.findWebsiteEntityOrView(partialOrm.name)
				in if website.labels->exists(l | l.name = 'default') then
						website.labels
					else
						website.labels-> union(
							if website.features->exists(f | f.name = 'name') then
								Sequence{thisModule.implicitViewLabel(
									website.features->any(f | f.name = 'name'))
								}
							else if website.features->exists(f | f.name = 'title') then
								Sequence{thisModule.implicitViewLabel(
									website.features->any(f | f.name = 'title'))
								}
							else
								Sequence{}
							endif endif)
					endif
	)
}

lazy rule implicitViewLabel {
	from website : Website!ViewFeature
	to orm : ORM!ModelLabel (
		name <- 'default',
		format <- '%s',
		features <- Sequence{feature}
	), feature : ORM!ModelLabelAttribute (
		attribute <- website
	)
	do {
		orm;
	}
}


abstract rule ViewFeature {
	from website : Website!ViewFeature
	to orm : ORM!ViewFeature (
		partOf <- thisModule.findOrmEntityOrView(website.partOf.name)
	)
}

-- @extends ViewFeature
abstract rule EncapsulatedFeature {
	from website : Website!EncapsulatedFeature
	to orm : ORM!ViewFeature (
		name <- website.name,
		displayLabel <-
			if not website.displayLabel.oclIsUndefined() and website.displayLabel <> '' then
				website.displayLabel
			else
				website.name.createLabel()
			endif
	)
}

-- @extends EncapsulatedFeature
rule EncapsulatedAttribute {
	from website : Website!EncapsulatedAttribute
	to orm : ORM!EncapsulatedAttribute (
		attribute <-
			if website.attribute.oclIsKindOf(Website!EntityAttribute) then
				website.attribute.findOrmEntityOrView().getOrmFeature(website.attribute.name)
			else
				website.attribute
			endif,
		columnName <-
			if not website.columnName.oclIsUndefined() and website.columnName <> '' then
				website.columnName
			else
				website.name.createAttributeColumnName()
			endif,
		validationPattern <- website.validationPattern(),
		defaultValue <- website.defaultValue
	)
}

-- @extends EncapsulatedFeature
rule EncapsulatedAssociation {
	from website : Website!EncapsulatedAssociation
	to orm : ORM!EncapsulatedAssociation (
		association <-
			if website.association.oclIsUndefined() then
				website.association
			else
				if website.isSourceAssociation then
					website.association.findOrmEntityOrView().getOrmFeature(website.association.name)
				else
					website.association.findOrmTargetEntity().getOrmFeature(website.association.targetFeatureName)
				endif
			endif,
		encapsulatedTarget <- website.encapsulatedTarget,
		columnName <-
			if not website.columnName.oclIsUndefined() and website.columnName <> '' then
				website.columnName
			else
				website.name.createAssociationColumnName()
			endif
	)
}

-- @extends ViewFeature
rule ViewAssociation {
	from website : Website!ViewAssociation
	to orm : ORM!ViewAssociation (
		name <- website.name,
		displayLabel <-
			if not website.displayLabel.oclIsUndefined() and website.displayLabel <> '' then
				website.displayLabel
			else
				website.name.createLabel()
			endif,
		opposite <- website.opposite,
		cardinality <- website.cardinality
	)
}

