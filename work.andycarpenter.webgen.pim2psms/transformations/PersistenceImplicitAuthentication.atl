-- @atlcompiler emftvm 
--
-- @path Website=/uk.ac.man.cs.mdsd.webgen.model/model/website.ecore
-- @path ORM=/uk.ac.man.cs.mdsd.orm.model/model/orm.ecore

module PersistenceImplicitAuthentication;
create dummyOrm : ORM refining orm : ORM, website : Website;

uses PersistenceHelpers;
uses AuthenticationHelpers;


rule OrmModel {
	from partialOrm : ORM!OrmModel
	to orm : ORM!OrmModel (
		dataTypes <-
			let security : Website!Security = thisModule.findWebsiteSecurity()
			in partialOrm.dataTypes
				->union(
					if not security.isLocallyAuthenticated() then
						Sequence{}
					else
						let authentication : Website!LocalAuthenticationSystem
							= security.authentication
						in if authentication.authenticationModel.oclIsUndefined() then
								if thisModule.findOrmDataType('Boolean').oclIsUndefined() then
									Sequence{thisModule.implicitBooleanDataType(authentication)}
								else
									Sequence{}
								endif
							else
								Sequence{}
							endif
					endif)
				->union(
					if not security.isLocallyAuthenticated() then
						Sequence{}
					else
						let authentication : Website!LocalAuthenticationSystem
							= security.authentication
						in if authentication.authenticationModel.oclIsUndefined() then
								if thisModule.findOrmDataType('Email').oclIsUndefined() then
									Sequence{thisModule.implicitEmailDataType(authentication)}
								else
									Sequence{}
								endif
							else
								Sequence{}
							endif
					endif)
				->union(
					if not security.isLocallyAuthenticated() then
						Sequence{}
					else
						let authentication : Website!LocalAuthenticationSystem
							= security.authentication
						in if authentication.authenticationModel.oclIsUndefined() then
								if thisModule.findOrmDataType('String').oclIsUndefined() then
									Sequence{thisModule.implicitStringDataType(authentication)}
								else
									Sequence{}
								endif
							else
								Sequence{}
							endif
					endif),
		collectionTypes <-
			let security : Website!Security = thisModule.findWebsiteSecurity()
			in partialOrm.collectionTypes
				->union(
					if not security.isLocallyAuthenticated() then
						Sequence{}
					else
						let authentication : Website!LocalAuthenticationSystem
							= security.authentication
						in if authentication.authenticationModel.oclIsUndefined() then
								if thisModule.findOrmCollectionType('String').oclIsUndefined() then
									Sequence{thisModule.implicitStringCollectionType(authentication)}
								else
									Sequence{}
								endif
							else
								Sequence{}
							endif
					endif),
		entities <-
			let security : Website!Security = thisModule.findWebsiteSecurity()
			in partialOrm.entities
				->union(if not security.isLocallyAuthenticated() then
							Sequence{}
						else
							let authentication : Website!LocalAuthenticationSystem
								= security.authentication
								in if authentication.authenticationModel.oclIsUndefined() then
									Sequence{thisModule.implicitAuthenticationEntity(authentication)}
								else
									Sequence{}
								endif
						endif)
				->union(if not security.isLocallyAuthenticated() then
							Sequence{}
						else
							let authentication : Website!LocalAuthenticationSystem
								= security.authentication
								in if authentication.resetPasswordRequestModel.oclIsUndefined() then
										Sequence{thisModule.implicitResetPasswordRequestEntity(authentication)}
									else
										Sequence{}
									endif
						endif)
	)
}

unique lazy rule implicitBooleanDataType {
	from website: Website!LocalAuthenticationSystem
	to orm : ORM!DataType (
		name <- 'Boolean',
		displayLabel <- 'Boolean'
	)
	do {
		orm;
	}
}

unique lazy rule implicitEmailDataType {
	from website: Website!LocalAuthenticationSystem
	to orm : ORM!DataType (
		name <- 'Email',
		displayLabel <- 'Email'
	)
	do {
		orm;
	}
}

unique lazy rule implicitStringDataType {
	from website: Website!LocalAuthenticationSystem
	to orm : ORM!DataType (
		name <- 'String',
		displayLabel <- 'String'
	)
	do {
		orm;
	}
}

unique lazy rule implicitStringCollectionType {
	from website: Website!LocalAuthenticationSystem
	to orm : ORM!CollectionType (
		name <- 'String',
		elementType <- website.getDataType('String'),
		persistenceType <- 'String',
		ormType <- website.getPersistentType('array')
	)
	do {
		orm;
	}
}


unique lazy rule implicitAuthenticationEntity {
	from website: Website!LocalAuthenticationSystem
	to orm : ORM!Entity (
		name <- website.authenticationName,
		tableName <- 'authentications',
		autoKeyName <- 'id',
		autoKeyPersistentType <- 'integer',
		keys <- Sequence{email},
		displayLabel <- website.authenticationName.createLabel(),
		allFeatures <- Sequence{username, usernameCanonical, email, emailCanonical,
				password, enabled, locked, expired, expiresAt, confirmationToken,
				passwordRequestedAt, passwordChangedAt, credentialsExpired,
				credentialsExpireAt, roles, lastLogin, lastIp, userDetails}
			->union(
				if website.allowRememberMe and false then
					Sequence{thisModule.implicitAutoLoginOpposite(website)}
				else
					Sequence{}
				endif),
		labels <- Sequence{label},
		implementsUserInterface <- true
	),
	label : ORM!ModelLabel (
		name <- 'default',
		format <- '%s',
		features <- Sequence{labelFeature}
	),
	labelFeature : ORM!ModelLabelAttribute (
		attribute <- email
	),
	username : ORM!SingletonElement (
		name <- 'username',
		displayLabel <- 'Username',
		attributeDataType <- website.getDataType('String'),
		cardinality <- #Required,
		"unique" <- true,
		columnName <- 'username',
		persistentType <- website.getPersistentType('String'),
		ormType <- website.getOrmType('String')
	),
	usernameCanonical : ORM!SingletonElement (
		name <- 'usernameCanonical',
		displayLabel <- 'Username (Canonical)',
		attributeDataType <- website.getDataType('String'),
		cardinality <- #Required,
		"unique" <- true,
		columnName <- 'username_canonical',
		persistentType <- website.getPersistentType('String'),
		ormType <- website.getOrmType('String')
	),
	email : ORM!SingletonElement (
		name <- 'email',
		displayLabel <- 'Email',
		attributeDataType <- website.getDataType('Email'),
		cardinality <- #Required,
		"unique" <- true,
		caseInsensitive <- true,
		columnName <- 'email',
		persistentType <- website.getPersistentType('Email'),
		ormType <- website.getOrmType('Email')
	),
	emailCanonical : ORM!SingletonElement (
		name <- 'emailCanonical',
		displayLabel <- 'Email (Canonical)',
		attributeDataType <- website.getDataType('Email'),
		cardinality <- #Required,
		"unique" <- true,
		caseInsensitive <- true,
		columnName <- 'email_canonical',
		persistentType <- website.getPersistentType('Email'),
		ormType <- website.getOrmType('Email')
	),
	password : ORM!SingletonElement (
		name <- 'password',
		displayLabel <- 'Password',
		attributeDataType <- website.getDataType('String'),
		cardinality <- #Required,
		"unique" <- false,
		obfuscateFormFields <- true,
		encrypt <- true,
		columnName <- 'password',
		persistentType <- website.getPersistentType('String'),
		ormType <- website.getOrmType('String')
	),
	enabled : ORM!SingletonElement (
		name <- 'enabled',
		displayLabel <- 'Enabled',
		attributeDataType <- website.getDataType('Boolean'),
		ormType <- website.getOrmType('Boolean'),
		cardinality <- #Required,
		"unique" <- false,
		columnName <- 'enabled',
		attributeDefaultValue <- enabledDefault,
		persistentType <- website.getPersistentType('Boolean'),
		ormType <- website.getOrmType('Boolean')
	),
	enabledDefault : ORM!BooleanLiteral (
		value <- true
	),
	locked : ORM!SingletonElement (
		name <- 'localed',
		displayLabel <- 'Locked',
		attributeDataType <- website.getDataType('Boolean'),
		ormType <- website.getOrmType('Boolean'),
		cardinality <- #Required,
		"unique" <- false,
		columnName <- 'locked',
		attributeDefaultValue <- lockedDefault,
		persistentType <- website.getPersistentType('Boolean'),
		ormType <- website.getOrmType('Boolean')
	),
	lockedDefault : ORM!BooleanLiteral (
		value <- false
	),
	expired : ORM!SingletonElement (
		name <- 'expired',
		displayLabel <- 'Expired',
		attributeDataType <- website.getDataType('Boolean'),
		ormType <- website.getOrmType('Boolean'),
		cardinality <- #Required,
		"unique" <- false,
		columnName <- 'expired',
		attributeDefaultValue <- expiredDefault,
		persistentType <- website.getPersistentType('Boolean'),
		ormType <- website.getOrmType('Boolean')
	),
	expiredDefault : ORM!BooleanLiteral (
		value <- false
	),
	expiresAt : ORM!SingletonDate (
		name <- 'expiresAt',
		displayLabel <- 'Expires At',
		cardinality <- #Optional,
		attributeDefaultValue <- lastLoginDefault,
		"unique" <- false,
		columnName <- 'expires_at',
		details <- #DateAndTime,
		ormType <- 'datetime'
	),
	confirmationToken : ORM!SingletonElement (
		name <- 'confirmationToken',
		displayLabel <- 'Confirmation Token',
		attributeDataType <- website.getDataType('String'),
		cardinality <- #Optional,
		"unique" <- false,
		columnName <- 'confirmation_token',
		persistentType <- website.getPersistentType('String'),
		ormType <- website.getOrmType('String')
	),
	passwordRequestedAt : ORM!SingletonDate (
		name <- 'passwordRequestedAt',
		displayLabel <- 'Password Requested At',
		cardinality <- #Optional,
		"unique" <- false,
		columnName <- 'password_requested_at',
		details <- #DateAndTime,
		ormType <- 'datetime'
	),
	passwordChangedAt : ORM!SingletonDate (
		name <- 'passwordChangedAt',
		displayLabel <- 'Password Changed At',
		cardinality <- #Optional,
		"unique" <- false,
		columnName <- 'password_changed_at',
		details <- #DateAndTime,
		ormType <- 'datetime'
	),
	credentialsExpired : ORM!SingletonElement (
		name <- 'credentialsExpired',
		displayLabel <- 'Credentials Expired',
		attributeDataType <- website.getDataType('Boolean'),
		cardinality <- #Optional,
		"unique" <- false,
		columnName <- 'credentials_expired',
		persistentType <- website.getPersistentType('Boolean'),
		ormType <- website.getOrmType('Boolean')
	),
	credentialsExpireAt : ORM!SingletonDate (
		name <- 'credentialsExpireAt',
		displayLabel <- 'Credentials Expire At',
		cardinality <- #Optional,
		"unique" <- false,
		columnName <- 'credentials_expire_at',
		details <- #DateAndTime,
		ormType <- 'datetime'
	),
	roles : ORM!CollectionElement (
		name <- 'roles',
		displayLabel <- 'Roles',
		singletonName <- 'role',
		cardinality <- #Many,
		columnName <- 'roles',
		collectionType <- website.getCollectionType('String'),
		collectionOrmAllowAdd <- true,
		collectionOrmAllowRemove <- true
	),
	lastLogin : ORM!SingletonDate (
		name <- 'lastLogin',
		displayLabel <- 'Last Login',
		cardinality <- #Required,
		"unique" <- false,
		columnName <- 'last_login',
		details <- #DateAndTime,
		attributeDefaultValue <- lastLoginDefault,
		ormType <- 'datetime'
	),
	lastLoginDefault : ORM!StringLiteral (
		value <- '0000-00-00 00:00:00'
	),
	lastIp : ORM!SingletonElement (
		name <- 'lastIp',
		displayLabel <- 'lastIp',
		attributeDataType <- website.getDataType('String'),
		cardinality <- #Required,
		"unique" <- false,
		columnName <- 'last_ip',
		attributeDefaultValue <- lastIpDefault,
		persistentType <- website.getPersistentType('String'),
		ormType <- website.getOrmType('String')
	),
	lastIpDefault : ORM!StringLiteral (
		value <- '0.0.0.0'
	),
	userDetails : ORM!SingletonAssociation (
		name <- 'userDetails',
		displayLabel <- 'User details',
		cardinality <- #Required,
		associationOwningEnd <- true,
		visible <- true,
		associationRelationship <- #OneToOne,
		columnName <- website.user.name.createAssociationColumnName(),
		opposite <- thisModule.implicitUserAuthentication(website)
	)
	do {
		orm;
	}
}

lazy rule implicitUserAuthentication {
	from website: Website!LocalAuthenticationSystem
	to orm : ORM!SingletonAssociation (
		partOf <- thisModule.findOrmEntity(website.user.name),
		name <- website.authenticationName.lowercaseFirst(),
		displayLabel <- website.authenticationName,
		associationOwningEnd <- false,
		visible <- false,
		associationRelationship <- #OneToOne
	)
	do {
		orm;
	}
}

lazy rule implicitResetPasswordRequestEntity {
	from website: Website!LocalAuthenticationSystem
	to orm : ORM!Entity (
		name <- website.resetPasswordRequestName,
		tableName <- 'resetpasswordrequests',
		autoKeyName <- 'id',
		autoKeyPersistentType <- 'integer',
		displayLabel <- website.resetPasswordRequestName.createLabel(),
		allFeatures <- Sequence{selector, hashedToken, requestedAt, expiresAt, user},
		implementsResetPasswordInterface <- true
	),
	selector : ORM!SingletonElement (
		name <- 'selector',
		displayLabel <- 'Selector',
		attributeDataType <- website.getDataType('String'),
		cardinality <- #Required,
		"unique" <- false,
		columnName <- 'selector',
		persistentType <- website.getPersistentType('String'),
		ormType <- website.getOrmType('String')
	),
	hashedToken : ORM!SingletonElement (
		name <- 'ipAddress',
		displayLabel <- 'IP Address',
		attributeDataType <- website.getDataType('String'),
		cardinality <- #Required,
		"unique" <- false,
		columnName <- 'hashed_token',
		persistentType <- website.getPersistentType('String'),
		ormType <- website.getOrmType('String')
	),
	requestedAt : ORM!SingletonDate (
		name <- 'requestedAt',
		displayLabel <- 'Requested At',
		cardinality <- #Required,
		"unique" <- false,
		columnName <- 'requested_at',
		details <- #DateAndTime,
		ormType <- 'datetime'
	),
	expiresAt : ORM!SingletonDate (
		name <- 'expiresAt',
		displayLabel <- 'Expires At',
		cardinality <- #Required,
		"unique" <- false,
		columnName <- 'expires_at',
		details <- #DateAndTime,
		ormType <- 'datetime'
	),
	user : ORM!SingletonAssociation (
		name <- 'user',
		displayLabel <- 'User',
		cardinality <- #Required,
		associationOwningEnd <- true,
		visible <- true,
		associationRelationship <- #ManyToOne,
		columnName <-
			if website.authenticationModel.oclIsUndefined() then
				website.authenticationName.createAssociationColumnName()
			else
				website.authenticationModel.name.createAssociationColumnName()
			endif,
		opposite <- thisModule.implicitUserAuthentication2(website),
		serializationMaxDepth <- 0
	)
	do {
		orm;
	}
}

lazy rule implicitUserAuthentication2 {
	from website: Website!LocalAuthenticationSystem
	to orm : ORM!CollectionAssociation (
		partOf <-
			if website.authenticationModel.oclIsUndefined() then
				thisModule.implicitAuthenticationEntity(website)
			else
				thisModule.findOrmEntity(website.authenticationModel.name)
			endif,
		name <- website.resetPasswordRequestName.lowercaseFirst(),
		displayLabel <- website.resetPasswordRequestName,
		associationOwningEnd <- false,
		visible <- false,
		associationRelationship <- #OneToMany
	)
	do {
		orm;
	}
}