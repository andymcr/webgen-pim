-- @atlcompiler emftvm 
--
-- @path Website=/work.andycarpenter.webgen.pims.model/model/website.ecore
-- @path ORM=/work.andycarpenter.psms.orm/model/orm.xcore

module PersistenceImplicitResetPassword;
create dummyOrm : ORM refining orm : ORM, website : Website;

uses PersistenceHelpers;
uses SecurityHelpers;


rule OrmModel {
	from partialOrm : ORM!OrmModel
	to orm : ORM!OrmModel (
		dataTypes <-
			let security : Website!Security = thisModule.findWebsiteSecurity()
			in partialOrm.dataTypes
				->union(
					if not security.isLocallyAuthenticated() then
						Sequence{}
					else
						let authentication : Website!LocalAuthenticationSystem
							= security.authentication
						in if authentication.authenticationModel.oclIsUndefined() then
								if thisModule.findOrmDataType('Boolean').oclIsUndefined() then
									Sequence{thisModule.implicitBooleanDataType(authentication)}
								else
									Sequence{}
								endif
							else
								Sequence{}
							endif
					endif)
				->union(
					if not security.isLocallyAuthenticated() then
						Sequence{}
					else
						let authentication : Website!LocalAuthenticationSystem
							= security.authentication
						in if authentication.authenticationModel.oclIsUndefined() then
								if thisModule.findOrmDataType('Email').oclIsUndefined() then
									Sequence{thisModule.implicitEmailDataType(authentication)}
								else
									Sequence{}
								endif
							else
								Sequence{}
							endif
					endif)
				->union(
					if not security.isLocallyAuthenticated() then
						Sequence{}
					else
						let authentication : Website!LocalAuthenticationSystem
							= security.authentication
						in if authentication.authenticationModel.oclIsUndefined() then
								if thisModule.findOrmDataType('String').oclIsUndefined() then
									Sequence{thisModule.implicitStringDataType(authentication)}
								else
									Sequence{}
								endif
							else
								Sequence{}
							endif
					endif),
		entities <-
			let security : Website!Security = thisModule.findWebsiteSecurity()
			in partialOrm.entities
				->union(if not security.isLocallyAuthenticated() then
							Sequence{}
						else
							let authentication : Website!LocalAuthenticationSystem
								= security.authentication
								in if authentication.resetPasswordRequestModel.oclIsUndefined() then
										Sequence{thisModule.implicitResetPasswordRequestEntity(authentication)}
									else
										Sequence{}
									endif
						endif)
	)
}

unique lazy rule implicitBooleanDataType {
	from website: Website!LocalAuthenticationSystem
	to orm : ORM!DataType (
		name <- 'Boolean',
		displayLabel <- 'Boolean'
	)
	do {
		orm;
	}
}

unique lazy rule implicitEmailDataType {
	from website: Website!LocalAuthenticationSystem
	to orm : ORM!DataType (
		name <- 'Email',
		displayLabel <- 'Email'
	)
	do {
		orm;
	}
}

unique lazy rule implicitStringDataType {
	from website: Website!LocalAuthenticationSystem
	to orm : ORM!DataType (
		name <- 'String',
		displayLabel <- 'String'
	)
	do {
		orm;
	}
}


lazy rule implicitResetPasswordRequestEntity {
	from website: Website!LocalAuthenticationSystem
	to orm : ORM!Entity (
		name <- website.resetPasswordRequestName,
		tableName <- 'resetpasswordrequests',
		autoKeyName <- 'id',
		autoKeyPersistentType <- 'integer',
		displayLabel <- website.resetPasswordRequestName.createLabel(),
		allFeatures <- Sequence{selector, hashedToken, requestedAt, expiresAt, user},
		implementsResetPasswordInterface <- true
	),
	selector : ORM!DataTypeAttribute (
		name <- 'selector',
		displayLabel <- 'Selector',
		attributeDataType <-
			if website.authenticationKey = #Email then
				website.getDataType('Email')
			else
				website.getDataType('String')
			endif,
		cardinality <- #Required,
		"unique" <- false,
		columnName <- 'selector'
	),
	hashedToken : ORM!DataTypeAttribute (
		name <- 'ipAddress',
		displayLabel <- 'IP Address',
		attributeDataType <- website.getDataType('String'),
		cardinality <- #Required,
		"unique" <- false,
		columnName <- 'hashed_token'
	),
	requestedAt : ORM!DateAttribute (
		name <- 'requestedAt',
		displayLabel <- 'Requested At',
		cardinality <- #Required,
		columnName <- 'requested_at',
		details <- #DateAndTime
	),
	expiresAt : ORM!DateAttribute (
		name <- 'expiresAt',
		displayLabel <- 'Expires At',
		cardinality <- #Required,
		columnName <- 'expires_at',
		details <- #DateAndTime
	),
	user : ORM!Association (
		name <- 'user',
		displayLabel <- 'User',
		cardinality <- #Required,
		associationOwningEnd <- true,
		visible <- true,
		associationRelationship <- #ManyToOne,
		columnName <-
			if website.authenticationModel.oclIsUndefined() then
				website.authenticationName.createAssociationColumnName()
			else
				website.authenticationModel.name.createAssociationColumnName()
			endif,
		opposite <- userAssociationEnd
	),
	userAssociationEnd : ORM!Association (
		name <- 'resetPasswordRequest',
		displayLabel <- 'Reset Password Request',
		partOf <-
			if website.authenticationModel.oclIsUndefined() then
				thisModule.findOrmEntity(website.authenticationName)
			else
				thisModule.findOrmEntity(website.authenticationModel.name)
			endif,
		cardinality <- #Many,
		associationRelationship <- #OneToMany,
		opposite <- user,
		associationOwningEnd <- false,
		visible <- false,
		columnName <- 'resetpasswordrequest_id'
	)
	do {
		orm;
	}
}