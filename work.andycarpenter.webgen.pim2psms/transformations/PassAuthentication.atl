-- @atlcompiler emftvm 
--
-- @path Website=/work.andycarpenter.webgen.pims.model/model/website.ecore
-- @path ORM=/work.andycarpenter.psms.orm/model/orm.xcore
-- @path WAF=/work.andycarpenter.psms.waf/model/Waf.xcore

module PassAuthentication;
create dummyWaf : WAF, dummySecurity : Security refining waf : WAF, website : Website, orm : ORM, security : Security;

uses PersistenceHelpers;
uses AuthenticationHelpers;
uses WebsiteHelpers;


rule WafModel {
	from partialWaf : WAF!WafModel
	to waf : WAF!WafModel (
		pages <- partialWaf.pages
			->union(
				let security : Website!Security = thisModule.findWebsiteSecurity()
					in if not security.isLocallyAuthenticated() then
							Sequence{}
						else
							let authentication : Website!LocalAuthenticationSystem
								= security.authentication
								in if security.hasImplicitAuthenticationPage() then
										if security.hasImplicitSecurityPage() then
											Sequence{
												thisModule.implicitAuthenticationsPage(authentication),
												thisModule.implicitSecurityPage(authentication)
											}
										else
											Sequence{thisModule.implicitAuthenticationsPage(authentication)}
										endif
									else
										if security.hasImplicitSecurityPage() then
											Sequence{thisModule.implicitSecurityPage(authentication)}
										else
											Sequence{}
										endif
						endif endif)
	)
}


rule LocalAuthenticationSystem {
	from partialSecurity : Security!LocalAuthenticationSystem
	to security : Security!LocalAuthenticationSystem (
		registrationUnit <-
			let authentication : Website!LocalAuthenticationSystem
				= thisModule.findWebsiteSecurity().authentication
				in if authentication.registrationUnit.oclIsUndefined() then
						thisModule.implicitRegistrationUnit(authentication)
					else
						authentication.registrationUnit.findWafUnit()
					endif,
		loginUnit <-
			let authentication : Website!LocalAuthenticationSystem
				= thisModule.findWebsiteSecurity().authentication
				in if authentication.loginUnit.oclIsUndefined() then
						thisModule.implicitLoginUnit(authentication)
					else
						authentication.loginUnit.findWafUnit()
					endif,
		logoutUnit <-
			let authentication : Website!LocalAuthenticationSystem
				= thisModule.findWebsiteSecurity().authentication
				in if authentication.logoutUnit.oclIsUndefined() then
						thisModule.implicitLogoutUnit(authentication)
					else
						authentication.logoutUnit.findWafUnit()
					endif,
		forgottenPasswordUnit <-
			let authentication : Website!LocalAuthenticationSystem
				= thisModule.findWebsiteSecurity().authentication
				in if authentication.forgottenPasswordUnit.oclIsUndefined() then
						thisModule.implicitForgottenPasswordUnit(authentication)
					else
						authentication.forgottenPasswordUnit.findWafUnit()
					endif,
		resetPasswordUnit <-
			let authentication : Website!LocalAuthenticationSystem
				= thisModule.findWebsiteSecurity().authentication
				in if authentication.resetPasswordUnit.oclIsUndefined() then
						thisModule.implicitResetPasswordUnit(authentication)
					else
						authentication.resetPasswordUnit.findWafUnit()
					endif
	)
}


unique lazy rule implicitSecurityPage {
	from website : Website!LocalAuthenticationSystem
	to waf : WAF!Page (
		name <- 'Security',
		displayLabel <- 'Security',
		units <-
			if website.registrationUnit.oclIsUndefined() and website.allowSelfRegistration then
				Sequence{ thisModule.implicitRegistrationUnit(website) }
			else
				Sequence{}
			endif
			->union(if website.loginUnit.oclIsUndefined() then
					Sequence{ thisModule.implicitLoginUnit(website) }
				else
					Sequence{}
				endif)
			->union(if website.logoutUnit.oclIsUndefined() then
					Sequence{ thisModule.implicitLogoutUnit(website) }
				else
					Sequence{}
				endif)
			->union(if website.forgottenPasswordUnit.oclIsUndefined() then
					Sequence{ thisModule.implicitForgottenPasswordUnit(website),
							thisModule.implicitResetPasswordUnit(website) }
				else
					Sequence{}
				endif)
	)
}

unique lazy rule implicitRegistrationUnit {
	from website : Website!LocalAuthenticationSystem
	to waf : WAF!RegistrationUnit (
		name <- website.implicitRegistrationName,
		useCaptcha <- website.useCaptcha,
		displayLabel <- website.implicitRegistrationUnitLabel,
		uriElement <- website.implicitRegistrationUri,
		contentType <-
			if website.authenticationModel.oclIsUndefined() then
				thisModule.findOrmEntity(website.authenticationName)
			else
				thisModule.findOrmEntity(website.authentication.name)
			endif,
		displayFields <-
			Sequence{
				thisModule.implicitUsernameField(website),
				thisModule.implicitRegistrationPasswordField(website)
			},
		confirmLabel <- website.implicitRegistrationConfirmLabel
	)
}

unique lazy rule implicitLoginUnit {
	from website : Website!LocalAuthenticationSystem
	to waf : WAF!LoginUnit (
		name <- website.implicitLoginName,
		useCaptcha <- website.useCaptcha,
		displayLabel <- website.implicitLoginUnitLabel,
		uriElement <- website.implicitLoginUri,
		contentType <-
			if website.authenticationModel.oclIsUndefined() then
				thisModule.findOrmEntity(website.authenticationName)
			else
				thisModule.findOrmEntity(website.authentication.name)
			endif,
		displayFields <-
			if website.authenticationModel.oclIsUndefined() then
				thisModule.findOrmEntity(website.authenticationName)
			else
				thisModule.findOrmEntity(website.authenticationModel.name)
			endif.features
				->select(f |
					(f.name = 'email' and website.authenticationKey = #Email)
					or (f.name = 'username' and website.authenticationKey <> #Email))
				->collect(f | thisModule.implicitUnitAttribute(f))
			->union(
					Sequence{thisModule.implicitLoginPasswordField(website)})
			->union(if website.allowRememberMe then
						Sequence{thisModule.implicitRememberMeField(website)}
					else
						Sequence{}
					endif),
		confirmLabel <- website.implicitLoginConfirmLabel,
		allActions <- Sequence{recoverAction}
			->union(if website.allowSelfRegistration then
					Sequence{ thisModule.implicitRegistrationAction(website)}
				else
					Sequence{}
				endif)
	),
	recoverAction : WAF!SecurityAction (
		name <- website.implicitForgottenPasswordName,
		displayLabel <- website.implicitForgottenPasswordActionLabel,
		target <- thisModule.implicitForgottenPasswordUnit(website)
	)
}

unique lazy rule implicitRegistrationAction {
	from website : Website!LocalAuthenticationSystem
	to waf : WAF!SecurityAction (
		name <- website.implicitRegistrationName,
		displayLabel <- website.implicitRegistrationActionLabel,
		target <- thisModule.implicitRegistrationUnit(website)
	)
}


unique lazy rule implicitLogoutUnit {
	from website : Website!LocalAuthenticationSystem
	to waf : WAF!LogoutUnit (
		name <- website.implicitLogoutName,
		displayLabel <- website.implicitLogoutConfirmLabel,
		uriElement <- website.implicitLogoutUri --,
--		confirmLabel <- website.implicitLogoutConfirmLabel
	)
}

unique lazy rule implicitForgottenPasswordUnit {
	from website : Website!LocalAuthenticationSystem
	to waf : WAF!ForgottenPasswordUnit (
		name <- website.implicitForgottenPasswordName,
		resetPasswordUnit <-
			if website.resetPasswordUnit.oclIsUndefined() then
				thisModule.implicitResetPasswordUnit(website)
			else
				website.resetPasswordUnit.findWafUnit()
			endif,
		useCaptcha <- website.useCaptcha,
		displayLabel <- website.implicitForgottenPasswordUnitLabel,
		uriElement <- website.implicitForgottenPasswordUriRequest,
		uriEmailSent <- website.implicitForgottenPasswordUriEmailSent,
		contentType <-
			if website.resetPasswordRequestModel.oclIsUndefined() then
				thisModule.findOrmEntity(website.resetPasswordRequestName)
			else
				thisModule.findOrmEntity(website.resetPasswordRequestModel.name)
			endif,
		displayFields <-
			Sequence{thisModule.implicitUsernameField(website)},
		confirmLabel <- website.implicitForgottenPasswordConfirmLabel,
		allActions <- Sequence{}
			->union(if website.allowSelfRegistration then
					Sequence{ thisModule.implicitRegistrationAction(website)}
				else
					Sequence{}
				endif),
		emailSubject <- website.implicitForgottenPasswordEmailSubject,
		emailMessage <- website.implicitForgottenPasswordEmailMessage,
		emailSentCaption <- website.implicitForgottenPasswordEmailSentCaption,
		emailSentMessage <- website.implicitForgottenPasswordEmailSentMessage
	)
}

unique lazy rule implicitResetPasswordUnit {
	from website : Website!LocalAuthenticationSystem
	to waf : WAF!ResetPasswordUnit (
		name <- website.implicitResetPasswordName,
		useCaptcha <- website.useCaptcha,
		displayLabel <- website.implicitResetPasswordUnitLabel,
		uriElement <- website.implicitResetPasswordUri,
		contentType <-
			if website.authenticationModel.oclIsUndefined() then
				thisModule.findOrmEntity(website.authenticationName)
			else
				thisModule.findOrmEntity(website.authentication.name)
			endif,
		displayFields <-
			Sequence{thisModule.implicitResetPasswordField(website)},
		confirmLabel <- website.implicitResetPasswordConfirmLabel
	)
}


unique lazy rule implicitAuthenticationsPage {
	from website : Website!LocalAuthenticationSystem
	to waf : WAF!Page (
		parentPage <-
			if website.security.hasImplicitSecurityPage() then
				thisModule.implicitSecurityPage(website)
			else
				OclUndefined
			endif,
		name <- 'ManageAuthentications',
		displayLabel <- 'Manage Authentications',
		units <- Sequence{authentications, update},
		uriElement <- 'authentications'
	),
	authentications : WAF!TextCardsUnit (
		name <- 'authentications',
		displayLabel <- 'Authentications',
		authorisationRoles <- website.viewRole,
		omitCaption <- false,
		defaultPaginationSize <- 12,
		nextPageLabel <- '>',
		previousPageLabel <- '<',
		contentType <-
			if website.authenticationModel.oclIsUndefined() then
				thisModule.findOrmEntity(website.authenticationName)
			else
				thisModule.findOrmEntity(website.authentication.name)
			endif,
		displayFields <-
			if website.authenticationModel.oclIsUndefined() then
				thisModule.findOrmEntity(website.authenticationName)
			else
				thisModule.findOrmEntity(website.authentication.name)
			endif.features
				->select(f | f.name = 'email' or f.name = 'roles')
				->collect(f | thisModule.implicitUnitAttribute(f)),
		elementTitle <- elementTitle,
		allActions <- Sequence{updateAction, deleteAction}
	),
	elementTitle : WAF!FeaturePathAttribute (
		attribute <- 
			thisModule.findOrmEntity(website.authenticationName).features
				->any(f | f.name = 'username')
	),
	updateAction : WAF!InstanceSelectAction (
		name <- 'update',
		displayLabel <- 'Update',
		target <- update
	),
	deleteAction : WAF!DeleteAction (
		name <- 'delete',
		displayLabel <- 'Delete',
		localAuthorisationRoles <- website.editRole,
		confirmMessage <- 'Delete authentication?',
		uriElement <- 'delete'
	),
	update : WAF!UpdateUnit (
		name <- 'update',
		displayLabel <- 'Update Authentication',
		authorisationRoles <- website.editRole,
		omitCaption <- false,
		confirmLabel <- 'Save',
		contentType <-
			if website.authenticationModel.oclIsUndefined() then
				thisModule.findOrmEntity(website.authenticationName)
			else
				thisModule.findOrmEntity(website.authentication.name)
			endif,
		displayFields <-
			if website.authenticationModel.oclIsUndefined() then
				thisModule.findOrmEntity(website.authenticationName)
			else
				thisModule.findOrmEntity(website.authentication.name)
			endif.features
				->select(f | f.name <> 'password')
				->select(f | f.oclIsKindOf(ORM!Attribute))
				->collect(f | 
					if f.oclIsTypeOf(ORM!DateAttribute) then
						thisModule.implicitUnitDateAttribute(f)
					else
						thisModule.implicitUnitAttribute(f)
					endif),
		successMessage <- successMessage,
		uriElement <- 'update'
	),
	successMessage : WAF!Message (
		text <- 'Authentication saved'
	)
	do {
		waf;
	}
}

lazy abstract rule implicitUnitFeature {
	from partialWaf : ORM!Feature
	to waf : WAF!UnitFeature (
		truncate <- true,
		collectionDisplayOption <- #PageDirection
	)
}

-- @extends implicitUnitFeature
lazy rule implicitUnitAttribute {
	from partialWaf : ORM!Attribute
	to waf : WAF!UnitAttribute (
		attribute <- partialWaf
	)
	do {
		waf;
	}
}

-- @extends implicitUnitFeature
lazy rule implicitUnitDateAttribute {
	from partialWaf : ORM!Attribute
	to waf : WAF!UnitAttribute (
		attribute <- partialWaf,
		dateFormat <- 'jS F Y G.i'
	)
	do {
		waf;
	}
}

lazy rule implicitUsernameField {
	from website : Website!LocalAuthenticationSystem
	to waf : WAF!DataTypeField (
		name <-
			if website.authenticationKey = #Email then
				'email'
			else
				'username'
			endif,
		displayLabel <-
			if website.authenticationKey = #Email then
				'Email'
			else
				'Username'
			endif,
		fieldTitle <-
			if website.authenticationKey = #Email then
				'Email'
			else
				'Username'
			endif,
		fieldPlaceholder <-
			if website.authenticationKey = #Email then
				'Email'
			else
				'Username'
			endif,
		localHelp <- 'Enter your email address and we we will send you a link to reset your password',
		fieldDataType <-
			if website.authenticationKey = #Email then
				thisModule.findOrmDataType('Email')
			else
				thisModule.findOrmDataType('String')
			endif,
		fieldRequired <- true
	)
	do {
		waf;
	}
}

lazy rule implicitRegistrationPasswordField {
	from website : Website!LocalAuthenticationSystem
	to waf : WAF!DataTypeField (
		name <- 'plainPassword',
		displayLabel <- 'Password',
		validationPattern <- '^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])\\w{8,}$',
		fieldRequired <- true,
		obfuscateFormFields <- true,
		repeatedField <- true,
		fieldTitle <- 'Password',
		fieldPlaceholder <- 'Password',
		fieldDataType <- thisModule.findOrmDataType('String'),
		secondDisplayLabel <- 'Confirm Password',
		secondTitle <- 'Confirm Password',
		secondPlaceholder <- 'Confirm Password'
	)
	do {
		waf;
	}
}

lazy rule implicitLoginPasswordField {
	from website : Website!LocalAuthenticationSystem
	to waf : WAF!DataTypeField (
		name <- 'plainPassword',
		displayLabel <- 'Password',
		fieldRequired <- true,
		obfuscateFormFields <- true,
		fieldTitle <- 'Password',
		fieldPlaceholder <- 'Password',
		fieldDataType <- thisModule.findOrmDataType('String')
	)
	do {
		waf;
	}
}

lazy rule implicitResetPasswordField {
	from website : Website!LocalAuthenticationSystem
	to waf : WAF!DataTypeField (
		name <- 'plainPassword',
		displayLabel <- 'New Password',
		obfuscateFormFields <- true,
		fieldRequired <- true,
		repeatedField <- true,
		fieldTitle <- 'New Password',
		fieldPlaceholder <- 'New Password',
		fieldDataType <- thisModule.findOrmDataType('String'),
		secondDisplayLabel <- 'Confirm Password',
		secondTitle <- 'Confirm Password',
		secondPlaceholder <- 'Confirm Password'
	)
	do {
		waf;
	}
}

unique lazy rule implicitRememberMeField {
	from website : Website!LocalAuthenticationSystem
	to waf : WAF!DataTypeField (
		name <- 'rememberMe',
		fieldDataType <- thisModule.findOrmDataType('Boolean'),
		fieldRequired <- false,
		displayLabel <- 'Remember Me',
		interfaceType <- thisModule.findWebsiteDataType('Boolean').interfaceType
	)
	do {
		waf;
	}
}
