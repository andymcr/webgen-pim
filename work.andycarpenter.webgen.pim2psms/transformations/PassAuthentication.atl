-- @atlcompiler emftvm 
--
-- @path Website=/work.andycarpenter.webgen.pims.model/model/website.ecore
-- @path ORM=/work.andycarpenter.psms.orm/model/orm.ecore
-- @path WAF=/work.andycarpenter.psms.waf/model/Waf.ecore

module PassAuthentication;
create dummyWaf : WAF refining waf : WAF, website : Website, orm : ORM;

uses PersistenceHelpers;


rule WafModel {
	from partialWaf : WAF!WafModel
	to waf : WAF!WafModel (
		pages <-
			let security : Website!Security = thisModule.findWebsiteSecurity()
			in partialWaf.pages
				->union(
					if security.authentication.oclIsUndefined() then
						Sequence{}
					else if security.authentication.oclIsTypeOf(Website!LocalAuthenticationSystem) then
						let authentication : Website!LocalAuthenticationSystem
							= security.authentication.oclAsType(Website!LocalAuthenticationSystem)
						in if authentication.authentication.oclIsUndefined() then
								Sequence{thisModule.implicitManageAuthenticationsPage(authentication)}
							else
								Sequence{}
							endif
					else
						Sequence{}
					endif endif),
		authentication <- thisModule.findWebsiteSecurity().authentication
	)
}


abstract rule Authentication {
	from website : Website!Authentication
	to waf : WAF!Authentication (
		user <-
			if website.user.oclIsUndefined() then
				OclUndefined
			else
				thisModule.findOrmEntity(website.user.name)
			endif,
		userKey <-
			if website.user.oclIsUndefined() 
					or website.userKey.oclIsUndefined() then
				OclUndefined
			else
				website.userKey.findOrmAttribute()
			endif,
		loginLabel <- website.loginLabel,
		logoutLabel <- website.logoutLabel
	)
}

-- @extends Authentication
rule LocalAuthenticationSystem {
	from website : Website!LocalAuthenticationSystem
	to waf : WAF!LocalAuthenticationSystem (
		authentication <-
			if thisModule.findWebsiteProperties().frameworkTechnology = #Symfony then
				OclUndefined
			else if website.authentication.oclIsUndefined() then
				thisModule.findOrmEntity('Authentication')
			else
				thisModule.findOrmEntity(website.authentication.name)
			endif endif,
		authenticationKey <- website.authenticationKey,
		loginAttempt <-
			if not website.trackLoginAttempts
					or thisModule.findWebsiteProperties().frameworkTechnology = #Symfony then
				OclUndefined
			else
				thisModule.findOrmEntity('LoginAttempt')
			endif,
		useCaptcha <- website.useCaptcha,
		allowRememberMe <- website.allowRememberMe,
		allowSelfRegistration <- website.allowSelfRegistration,
		autoLogin <-
			if not website.allowRememberMe
					or thisModule.findWebsiteProperties().frameworkTechnology = #Symfony then
				OclUndefined
			else
				thisModule.findOrmEntity('AutoLogin')
			endif,
		useEmailActivation <- website.useEmailActivation,
		sendWelcomeEmail <- website.sendWelcomeEmail
	)
}

-- @extends Authentication
rule CasAuthentication {
	from website : Website!CasAuthentication
	to waf : WAF!CasAuthentication (
	)
}


unique lazy rule implicitManageAuthenticationsPage {
	from website : Website!LocalAuthenticationSystem
	to waf : WAF!Page (
		name <- 'ManageAuthentications',
		displayLabel <- 'Manage Authentications',
		units <- Sequence{authentications, edit},
		uriElement <- 'authentications'
	),
	authentications : WAF!TextCardsUnit (
		name <- 'authentications',
		displayLabel <- 'Authentications',
		requiresRole <- website.viewRole,
		omitCaption <- false,
		defaultPaginationSize <- 12,
		nextPageLabel <- '>',
		previousPageLabel <- '<',
		contentType <- Sequence{thisModule.findOrmEntity('Authentication')},
		elementTitle <- elementTitle,
		displayFields <-
			thisModule.findOrmEntity('Authentication').features
				->select(f | f.name = 'email' or f.name = 'roles')
				->collect(f | thisModule.implicitUnitAttribute(f)),
		repositoriesUsed <- Sequence { thisModule.findRepository('Authentication') },
		actions <- Sequence{editAction, deleteAction},
		rowClass <- thisModule.findWebsiteUI().defaultRowClass,
		columnClass <- thisModule.findWebsiteUI().defaultColumnClass,
		cardClass <- thisModule.findWebsiteUI().defaultCardClass,
		cardHeaderClass <- thisModule.findWebsiteUI().defaultCardHeaderClass,
		cardBodyClass <- thisModule.findWebsiteUI().defaultCardBodyClass,
		cardFooterClass <- thisModule.findWebsiteUI().defaultCardFooterClass,
		fieldListClass <- thisModule.findWebsiteUI().defaultFieldListClass,
		actionNavigationClass <- thisModule.findWebsiteUI().defaultActionNavigationClass
	),
	elementTitle : WAF!FeaturePathAttribute (
		attribute <- 
			thisModule.findOrmEntity('Authentication').features
				->any(f | f.name = 'username')
	),
	editAction : WAF!SelectAction (
		name <- 'edit',
		displayLabel <- 'Edit',
		target <- edit,
		anchorClass <- thisModule.findWebsiteUI().defaultAnchorClass
	),
	deleteAction : WAF!DeleteAction (
		name <- 'delete',
		displayLabel <- 'Delete',
		requiresRole <- website.editRole,
		anchorClass <- thisModule.findWebsiteUI().defaultAnchorClass
	),
	edit : WAF!UpdateUnit (
		name <- 'edit',
		displayLabel <- 'Edit Authentication',
		requiresRole <- website.editRole,
		omitCaption <- false,
		confirmLabel <- 'Save',
		contentType <- thisModule.findOrmEntity('Authentication'),
		displayFields <-
			thisModule.findOrmEntity('Authentication').features
				->select(f | f.name <> 'password')
				->select(f | f.oclIsKindOf(ORM!Attribute))
				->collect(f | 
					if f.oclIsTypeOf(ORM!SingletonDate) then
						thisModule.implicitUnitDateAttribute(f)
					else
						thisModule.implicitUnitAttribute(f)
					endif),
		repositoriesUsed <- Sequence { thisModule.findRepository('Authentication') },
		captionClass <- 'unit_caption',
		controlClass <- 'unit_control',
		contentClass <- 'input_form'
	)
	do {
		waf;
	}
}

lazy abstract rule implicitUnitFeature {
	from partialWaf : ORM!Feature
	to waf : WAF!UnitFeature (
		displayLabel <- partialWaf.displayLabel,
		title <- partialWaf.displayLabel,
		truncate <- true,
		collectionDisplayOption <- #PageDirection
	)
}

-- @extends implicitUnitFeature
lazy rule implicitUnitAttribute {
	from partialWaf : ORM!Attribute
	to waf : WAF!UnitAttribute (
		attribute <- partialWaf,
		placeholder <- partialWaf.name.createLabel()
	)
	do {
		waf;
	}
}

-- @extends implicitUnitFeature
lazy rule implicitUnitDateAttribute {
	from partialWaf : ORM!Attribute
	to waf : WAF!UnitAttribute (
		attribute <- partialWaf,
		dateFormat <- 'jS F Y G.i'
	)
	do {
		waf;
	}
}

unique lazy rule implicitRememberMeField {
	from website : Website!LocalAuthenticationSystem
	to waf : WAF!DataTypeField (
		name <- 'rememberMe',
		dataType <- thisModule.findOrmDataType('Boolean'),
		required <- false,
		displayLabel <- 'Remember Me',
		interfaceType <- thisModule.findWebsiteDataType('Boolean').interfaceType,
		inputClass <- 'input_checkbox'
	)
	do {
		waf;
	}
}

lazy rule implicitCaptchaField {
	from website : Website!LocalAuthenticationSystem
	to waf : WAF!CaptchaField (
		name <- 'captcha',
		displayLabel <- 'Captcha'
	)
	do {
		waf;
	}
}
