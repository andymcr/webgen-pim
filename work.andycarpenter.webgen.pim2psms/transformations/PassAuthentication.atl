-- @atlcompiler emftvm 
--
-- @path Website=/work.andycarpenter.webgen.pims.model/model/website.ecore
-- @path ORM=/work.andycarpenter.psms.orm/model/orm.ecore
-- @path WAF=/work.andycarpenter.psms.waf/model/Waf.ecore

module PassAuthentication;
create dummyWaf : WAF refining waf : WAF, website : Website, orm : ORM;

uses PersistenceHelpers;
uses AuthenticationHelpers;
uses WebsiteHelpers;


rule WafModel {
	from partialWaf : WAF!WafModel
	to waf : WAF!WafModel (
		pages <- partialWaf.pages
			->union(
				let security : Website!Security = thisModule.findWebsiteSecurity()
					in if not security.isLocallyAuthenticated() then
							Sequence{}
						else
							let authentication : Website!LocalAuthenticationSystem
								= security.authentication
								in if security.hasImplicitAuthenticationPage() then
										if security.hasImplicitSecurityPage() then
											Sequence{
												thisModule.implicitAuthenticationsPage(authentication),
												thisModule.implicitSecurityPage(authentication)
											}
										else
											Sequence{thisModule.implicitAuthenticationsPage(authentication)}
										endif
									else
										if security.hasImplicitSecurityPage() then
											Sequence{thisModule.implicitSecurityPage(authentication)}
										else
											Sequence{}
										endif
						endif endif),
		authentication <- thisModule.findWebsiteSecurity().authentication
	)
}


abstract rule Authentication {
	from website : Website!Authentication
	to waf : WAF!Authentication (
		user <-
			if website.user.oclIsUndefined() then
				OclUndefined
			else
				thisModule.findOrmEntity(website.user.name)
			endif,
		userKey <-
			if website.user.oclIsUndefined() 
					or website.userKey.oclIsUndefined() then
				OclUndefined
			else
				website.userKey.findOrmAttribute()
			endif
	)
}

-- @extends Authentication
rule LocalAuthenticationSystem {
	from website : Website!LocalAuthenticationSystem
	to waf : WAF!LocalAuthenticationSystem (
		authenticationModel <-
			if website.authenticationModel.oclIsUndefined() then
				thisModule.findOrmEntity(website.authenticationName)
			else
				thisModule.findOrmEntity(website.authentication.name)
			endif,
		authenticationKey <- website.authenticationKey,
		registrationUnit <-
			if website.registrationUnit.oclIsUndefined() then
				thisModule.implicitRegistrationUnit(website)
			else
				website.registrationUnit.findWafUnit()
			endif,
		loginUnit <-
			if website.loginUnit.oclIsUndefined() then
				thisModule.implicitLoginUnit(website)
			else
				website.loginUnit.findWafUnit()
			endif,
		logoutUnit <-
			if website.logoutUnit.oclIsUndefined() then
				thisModule.implicitLogoutUnit(website)
			else
				website.logoutUnit.findWafUnit()
			endif,
		forgottenPasswordUnit <-
			if website.forgottenPasswordUnit.oclIsUndefined() then
				thisModule.implicitForgottenPasswordUnit(website)
			else
				website.forgottenPasswordUnit.findWafUnit()
			endif,
		useCaptcha <- website.useCaptcha,
		allowRememberMe <- website.allowRememberMe,
		allowSelfRegistration <- website.allowSelfRegistration,
		useEmailActivation <- website.useEmailActivation,
		sendWelcomeEmail <- website.sendWelcomeEmail
	)
}

-- @extends Authentication
rule CasAuthentication {
	from website : Website!CasAuthentication
	to waf : WAF!CasAuthentication (
		loginLabel <- website.loginLabel,
		logoutLabel <- website.logoutLabel
	)
}


unique lazy rule implicitSecurityPage {
	from website : Website!LocalAuthenticationSystem
	to waf : WAF!Page (
		name <- 'Security',
		displayLabel <- 'Security',
		units <-
			if website.registrationUnit.oclIsUndefined() then
				Sequence{ thisModule.implicitRegistrationUnit(website) }
			else
				Sequence{}
			endif
			->union(if website.loginUnit.oclIsUndefined() then
					Sequence{ thisModule.implicitLoginUnit(website) }
				else
					Sequence{}
				endif)
			->union(if website.logoutUnit.oclIsUndefined() then
					Sequence{ thisModule.implicitLogoutUnit(website) }
				else
					Sequence{}
				endif)
			->union(if website.forgottenPasswordUnit.oclIsUndefined() then
					Sequence{ thisModule.implicitForgottenPasswordUnit(website) }
				else
					Sequence{}
				endif)
	)
}

unique lazy rule implicitRegistrationUnit {
	from website : Website!LocalAuthenticationSystem
	to waf : WAF!RegistrationUnit (
		name <- website.implicitRegistrationName,
		displayLabel <- website.implicitRegistrationLabel,
		uriElement <- website.implicitRegistrationUri
	)
}

unique lazy rule implicitLoginUnit {
	from website : Website!LocalAuthenticationSystem
	to waf : WAF!LoginUnit (
		name <- website.implicitLoginName,
		displayLabel <- website.implicitLoginLabel,
		uriElement <- website.implicitLoginUri,
		contentType <-
			if website.authenticationModel.oclIsUndefined() then
				thisModule.findOrmEntity(website.authenticationName)
			else
				thisModule.findOrmEntity(website.authentication.name)
			endif,
		displayFields <-
			if website.authenticationModel.oclIsUndefined() then
				thisModule.findOrmEntity(website.authenticationName)
			else
				thisModule.findOrmEntity(website.authentication.name)
			endif.features
				->select(f |
					(f.name = 'email' and website.authenticationKey = #Email)
					or (f.name = 'username' and website.authenticationKey <> #Email)
					or f.name = 'password')
				->collect(f | thisModule.implicitUnitAttribute(f)),
		confirmLabel <- website.implicitLoginLabel,
		allActions <- Sequence{recoverAction}
			->union(if website.allowSelfRegistration then
					Sequence{ thisModule.implicitRegistrationAction(website)}
				else
					Sequence{}
				endif)
	),
	recoverAction : WAF!SecurityAction (
		name <- website.implicitForgottenPasswordName,
		displayLabel <- website.implicitForgottenPasswordLabel,
		target <- thisModule.implicitForgottenPasswordUnit(website)
	)
}

unique lazy rule implicitRegistrationAction {
	from website : Website!LocalAuthenticationSystem
	to waf : WAF!SecurityAction (
		name <- website.implicitRegistrationName,
		displayLabel <- website.implicitRegistrationLabel,
		target <- thisModule.implicitRegistrationUnit(website)
	)
}


unique lazy rule implicitLogoutUnit {
	from website : Website!LocalAuthenticationSystem
	to waf : WAF!LogoutUnit (
		name <- website.implicitLogoutName,
		displayLabel <- website.implicitLogoutLabel,
		uriElement <- website.implicitLogoutUri
	)
}

unique lazy rule implicitForgottenPasswordUnit {
	from website : Website!LocalAuthenticationSystem
	to waf : WAF!ForgottenPasswordUnit (
		name <- website.implicitForgottenPasswordName,
		displayLabel <- website.implicitForgottenPasswordLabel,
		uriElement <- website.implicitForgottenPasswordUri
	)
}


unique lazy rule implicitAuthenticationsPage {
	from website : Website!LocalAuthenticationSystem
	to waf : WAF!Page (
		parentPage <-
			if website.security.hasImplicitSecurityPage() then
				thisModule.implicitSecurityPage(website)
			else
				OclUndefined
			endif,
		name <- 'ManageAuthentications',
		displayLabel <- 'Manage Authentications',
		units <- Sequence{authentications, update},
		uriElement <- 'authentications'
	),
	authentications : WAF!TextCardsUnit (
		name <- 'authentications',
		displayLabel <- 'Authentications',
		authorisationRoles <- website.viewRole,
		omitCaption <- false,
		defaultPaginationSize <- 12,
		nextPageLabel <- '>',
		previousPageLabel <- '<',
		contentType <-
			if website.authenticationModel.oclIsUndefined() then
				thisModule.findOrmEntity(website.authenticationName)
			else
				thisModule.findOrmEntity(website.authentication.name)
			endif,
		displayFields <-
			if website.authenticationModel.oclIsUndefined() then
				thisModule.findOrmEntity(website.authenticationName)
			else
				thisModule.findOrmEntity(website.authentication.name)
			endif.features
				->select(f | f.name = 'email' or f.name = 'roles')
				->collect(f | thisModule.implicitUnitAttribute(f)),
		elementTitle <- elementTitle,
		allActions <- Sequence{updateAction, deleteAction}
	),
	elementTitle : WAF!FeaturePathAttribute (
		attribute <- 
			thisModule.findOrmEntity(website.authenticationName).features
				->any(f | f.name = 'username')
	),
	updateAction : WAF!SelectAction (
		name <- 'update',
		displayLabel <- 'Update',
		target <- update
	),
	deleteAction : WAF!DeleteAction (
		name <- 'delete',
		displayLabel <- 'Delete',
		localAuthorisationRoles <- website.editRole,
		confirmMessage <- 'Delete authentication?',
		uriElement <- 'delete'
	),
	update : WAF!UpdateUnit (
		name <- 'update',
		displayLabel <- 'Update Authentication',
		authorisationRoles <- website.editRole,
		omitCaption <- false,
		confirmLabel <- 'Save',
		contentType <-
			if website.authenticationModel.oclIsUndefined() then
				thisModule.findOrmEntity(website.authenticationName)
			else
				thisModule.findOrmEntity(website.authentication.name)
			endif,
		displayFields <-
			if website.authenticationModel.oclIsUndefined() then
				thisModule.findOrmEntity(website.authenticationName)
			else
				thisModule.findOrmEntity(website.authentication.name)
			endif.features
				->select(f | f.name <> 'password')
				->select(f | f.oclIsKindOf(ORM!Attribute))
				->collect(f | 
					if f.oclIsTypeOf(ORM!SingletonDate) then
						thisModule.implicitUnitDateAttribute(f)
					else
						thisModule.implicitUnitAttribute(f)
					endif),
		successMessage <- 'Authentication saved',
		uriElement <- 'update'
	)
	do {
		waf;
	}
}

lazy abstract rule implicitUnitFeature {
	from partialWaf : ORM!Feature
	to waf : WAF!UnitFeature (
		truncate <- true,
		collectionDisplayOption <- #PageDirection
	)
}

-- @extends implicitUnitFeature
lazy rule implicitUnitAttribute {
	from partialWaf : ORM!Attribute
	to waf : WAF!UnitAttribute (
		attribute <- partialWaf
	)
	do {
		waf;
	}
}

-- @extends implicitUnitFeature
lazy rule implicitUnitDateAttribute {
	from partialWaf : ORM!Attribute
	to waf : WAF!UnitAttribute (
		attribute <- partialWaf,
		dateFormat <- 'jS F Y G.i'
	)
	do {
		waf;
	}
}

unique lazy rule implicitRememberMeField {
	from website : Website!LocalAuthenticationSystem
	to waf : WAF!DataTypeField (
		name <- 'rememberMe',
		dataType <- thisModule.findOrmDataType('Boolean'),
		required <- false,
		displayLabel <- 'Remember Me',
		interfaceType <- thisModule.findWebsiteDataType('Boolean').interfaceType
	)
	do {
		waf;
	}
}

lazy rule implicitCaptchaField {
	from website : Website!LocalAuthenticationSystem
	to waf : WAF!CaptchaField (
		name <- 'captcha',
		displayLabel <- 'Captcha'
	)
	do {
		waf;
	}
}
