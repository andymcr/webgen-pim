-- @atlcompiler emftvm 
--
-- @path Website=/work.andycarpenter.webgen.pims.model/model/website.ecore
-- @path ORM=/work.andycarpenter.psms.orm/model/orm.ecore
-- @path WAF=/work.andycarpenter.psms.waf/model/Waf.ecore

module PassAuthentication;
create dummyWaf : WAF refining waf : WAF, website : Website, orm : ORM;

uses WebsiteHelpers;


rule WafModel {
	from partialWaf : WAF!WafModel
	to waf : WAF!WafModel (
		pages <- partialWaf.pages,
		authentication <- thisModule.findWebsiteSecurity().authentication
	)
}


abstract rule Authentication {
	from website : Website!Authentication
	to waf : WAF!Authentication (
		user <-
			if website.user.oclIsUndefined() then
				OclUndefined
			else
				thisModule.findOrmEntity(website.user.name)
			endif,
		userKey <-
			if website.user.oclIsUndefined() 
					or website.userKey.oclIsUndefined() then
				OclUndefined
			else
				website.userKey.findOrmAttribute()
			endif,
		loginLabel <- website.loginLabel,
		logoutLabel <- website.logoutLabel
	)
}

-- @extends Authentication
rule LocalAuthenticationSystem {
	from website : Website!LocalAuthenticationSystem
	to waf : WAF!LocalAuthenticationSystem (
		authentication <-
			if thisModule.findWebsiteProperties().frameworkTechnology = #Symfony then
				OclUndefined
			else if website.authentication.oclIsUndefined() then
				thisModule.findOrmEntity('Authentication')
			else
				thisModule.findOrmEntity(website.authentication.name)
			endif endif,
		authenticationKey <- website.authenticationKey,
		loginAttempt <-
			if not website.trackLoginAttempts
					or thisModule.findWebsiteProperties().frameworkTechnology = #Symfony then
				OclUndefined
			else
				thisModule.findOrmEntity('LoginAttempt')
			endif,
		useCaptcha <- website.useCaptcha,
		allowRememberMe <- website.allowRememberMe,
		allowSelfRegistration <- website.allowSelfRegistration,
		autoLogin <-
			if not website.allowRememberMe
					or thisModule.findWebsiteProperties().frameworkTechnology = #Symfony then
				OclUndefined
			else
				thisModule.findOrmEntity('AutoLogin')
			endif,
		useEmailActivation <- website.useEmailActivation,
		sendWelcomeEmail <- website.sendWelcomeEmail
	)
}

-- @extends Authentication
rule CasAuthentication {
	from website : Website!CasAuthentication
	to waf : WAF!CasAuthentication (
	)
}


helper context ORM!Feature def: isBooleanDataType() : Boolean
	= if not self.oclIsTypeOf(ORM!SingletonElement) then
			false
		else
			self.dataType.name = 'Boolean'
		endif;

lazy abstract rule implicitUnitFeature {
	from partialWaf : ORM!Feature
	to waf : WAF!UnitFeature (
		displayLabel <- partialWaf.displayLabel,
		inputClass <-
			if partialWaf.isBooleanDataType() then
				'input_checkbox'
			else
				'input_attribute'
			endif
	)
}

-- @extends implicitUnitFeature
lazy rule implicitUnitAttribute {
	from partialWaf : ORM!SingletonElement
	to waf : WAF!UnitAttribute (
		attribute <- partialWaf,
		obfuscateFormFields <- partialWaf.obfuscateFormFields
	)
	do {
		waf;
	}
}

-- @extends implicitUnitFeature
lazy rule implicitUnitDateAttribute {
	from partialWaf : ORM!SingletonDate
	to waf : WAF!UnitAttribute (
		attribute <- partialWaf,
		dateFormat <- 'jS F Y G.i'
	)
	do {
		waf;
	}
}

unique lazy rule implicitRememberMeField {
	from website : Website!LocalAuthenticationSystem
	to waf : WAF!DataTypeField (
		name <- 'rememberMe',
		dataType <- thisModule.findOrmDataType('Boolean'),
		required <- false,
		displayLabel <- 'Remember Me',
		interfaceType <- thisModule.findWebsiteDataType('Boolean').interfaceType,
		inputClass <- 'input_checkbox'
	)
	do {
		waf;
	}
}

lazy rule implicitCaptchaField {
	from website : Website!LocalAuthenticationSystem
	to waf : WAF!CaptchaField (
		name <- 'captcha',
		displayLabel <- 'Captcha'
	)
	do {
		waf;
	}
}