-- @atlcompiler emftvm 
--
-- @path Website=/work.andycarpenter.webgen.pims.model/model/website.ecore
-- @path ORM=/work.andycarpenter.psms.orm/model/orm.ecore
-- @path WAF=/work.andycarpenter.psms.waf/model/Waf.ecore

module PassAuthentication;
create dummyWaf : WAF refining waf : WAF, website : Website, orm : ORM;

uses PersistenceHelpers;
uses AuthenticationHelpers;
uses WebsiteHelpers;


rule WafModel {
	from partialWaf : WAF!WafModel
	to waf : WAF!WafModel (
		pages <- partialWaf.pages
			->union(
				let security : Website!Security = thisModule.findWebsiteSecurity()
					in if not security.isLocallyAuthenticated() then
							Sequence{}
						else
							let authentication : Website!LocalAuthenticationSystem
								= security.authentication
								in if security.hasImplicitAuthenticationPage() then
										if security.hasImplicitSecurityPage() then
											Sequence{
												thisModule.implicitAuthenticationsPage(authentication),
												thisModule.implicitSecurityPage(authentication)
											}
										else
											Sequence{thisModule.implicitAuthenticationsPage(authentication)}
										endif
									else
										if security.hasImplicitSecurityPage() then
											Sequence{thisModule.implicitSecurityPage(authentication)}
										else
											Sequence{}
										endif
						endif endif),
		authentication <- thisModule.findWebsiteSecurity().authentication
	)
}


abstract rule Authentication {
	from website : Website!Authentication
	to waf : WAF!Authentication (
		user <-
			if website.user.oclIsUndefined() then
				OclUndefined
			else
				thisModule.findOrmEntity(website.user.name)
			endif,
		userKey <-
			if website.user.oclIsUndefined() 
					or website.userKey.oclIsUndefined() then
				OclUndefined
			else
				website.userKey.findOrmAttribute()
			endif,
		registrationLabel <- website.registrationLabel,
		loginLabel <- website.loginLabel,
		logoutLabel <- website.logoutLabel
	)
}

-- @extends Authentication
rule LocalAuthenticationSystem {
	from website : Website!LocalAuthenticationSystem
	to waf : WAF!LocalAuthenticationSystem (
		authenticationModel <-
			if website.authenticationModel.oclIsUndefined() then
				thisModule.findOrmEntity(website.authenticationName)
			else
				thisModule.findOrmEntity(website.authentication.name)
			endif,
		authenticationKey <- website.authenticationKey,
		registrationUnit <-
			if website.registrationUnit.oclIsUndefined() then
				thisModule.implicitRegistrationUnit(website)
			else
				website.registrationUnit.findWafUnit()
			endif,
		loginUnit <-
			if website.loginUnit.oclIsUndefined() then
				thisModule.implicitLoginUnit(website)
			else
				website.loginUnit.findWafUnit()
			endif,
		logoutUnit <-
			if website.logoutUnit.oclIsUndefined() then
				thisModule.implicitLogoutUnit(website)
			else
				website.logoutUnit.findWafUnit()
			endif,
		forgottenPasswordUnit <-
			if website.forgottenPasswordUnit.oclIsUndefined() then
				thisModule.implicitForgottenPasswordUnit(website)
			else
				website.forgottenPasswordUnit.findWafUnit()
			endif,
		useCaptcha <- website.useCaptcha,
		allowRememberMe <- website.allowRememberMe,
		allowSelfRegistration <- website.allowSelfRegistration,
		useEmailActivation <- website.useEmailActivation,
		sendWelcomeEmail <- website.sendWelcomeEmail
	)
}

-- @extends Authentication
rule CasAuthentication {
	from website : Website!CasAuthentication
	to waf : WAF!CasAuthentication (
	)
}


unique lazy rule implicitAuthenticationsPage {
	from website : Website!LocalAuthenticationSystem
	to waf : WAF!Page (
		parentPage <-
			if website.security.hasImplicitSecurityPage() then
				thisModule.implicitSecurityPage(website)
			else
				OclUndefined
			endif,
		name <- 'ManageAuthentications',
		displayLabel <- 'Manage Authentications',
		units <- Sequence{authentications, edit},
		uriElement <- 'authentications'
	),
	authentications : WAF!TextCardsUnit (
		name <- 'authentications',
		displayLabel <- 'Authentications',
		requiresRole <- website.viewRole,
		omitCaption <- false,
		defaultPaginationSize <- 12,
		nextPageLabel <- '>',
		previousPageLabel <- '<',
		contentType <-
			if website.authenticationModel.oclIsUndefined() then
				Sequence{thisModule.findOrmEntity(website.authenticationName)}
			else
				Sequence{thisModule.findOrmEntity(website.authentication.name)}
			endif,
		repositoriesUsed <-
			if website.authenticationModel.oclIsUndefined() then
				Sequence{ thisModule.findRepository(website.authenticationName) }
			else
				Sequence{ thisModule.findRepository(website.authentication.name) }
			endif,
		displayFields <-
			if website.authenticationModel.oclIsUndefined() then
				thisModule.findOrmEntity(website.authenticationName)
			else
				thisModule.findOrmEntity(website.authentication.name)
			endif.features
				->select(f | f.name = 'email' or f.name = 'roles')
				->collect(f | thisModule.implicitUnitAttribute(f)),
		elementTitle <- elementTitle,
		actions <- Sequence{editAction, deleteAction},
		captionClass <-
			if thisModule.findWebsiteUI().defaultCaptionClass.trim() <> '' then
				thisModule.findWebsiteUI().defaultCaptionClass.trim()
			else
				OclUndefined
			endif,
		contentClass <- 
			if thisModule.findWebsiteUI().defaultCardsContentClass.trim() <> '' then
				thisModule.findWebsiteUI().defaultCardsContentClass.trim()
			else if thisModule.findWebsiteUI().defaultContentClass.trim() <> '' then
				thisModule.findWebsiteUI().defaultContentClass.trim()
			else
				OclUndefined
			endif endif,
		rowClass <- thisModule.findWebsiteUI().defaultRowClass,
		columnClass <- thisModule.findWebsiteUI().defaultColumnClass,
		cardClass <- thisModule.findWebsiteUI().defaultCardClass,
		cardHeaderClass <- thisModule.findWebsiteUI().defaultCardHeaderClass,
		cardBodyClass <- thisModule.findWebsiteUI().defaultCardBodyClass,
		cardFooterClass <- thisModule.findWebsiteUI().defaultCardFooterClass,
		fieldListClass <- thisModule.findWebsiteUI().defaultFieldListClass,
		controlClass <- 
			if thisModule.findWebsiteUI().defaultCardsControlClass.trim() <> '' then
				thisModule.findWebsiteUI().defaultCardsControlClass.trim()
			else if thisModule.findWebsiteUI().defaultControlClass.trim() <> '' then
				thisModule.findWebsiteUI().defaultControlClass.trim()
			else
				OclUndefined
			endif endif
	),
	elementTitle : WAF!FeaturePathAttribute (
		attribute <- 
			thisModule.findOrmEntity(website.authenticationName).features
				->any(f | f.name = 'username')
	),
	editAction : WAF!SelectAction (
		name <- 'edit',
		displayLabel <- 'Edit',
		target <- edit,
		anchorClass <- thisModule.findWebsiteUI().defaultAnchorClass
	),
	deleteAction : WAF!DeleteAction (
		name <- 'delete',
		displayLabel <- 'Delete',
		requiresRole <- website.editRole,
		anchorClass <- thisModule.findWebsiteUI().defaultAnchorClass
	),
	edit : WAF!UpdateUnit (
		name <- 'edit',
		displayLabel <- 'Edit Authentication',
		requiresRole <- website.editRole,
		omitCaption <- false,
		confirmLabel <- 'Save',
		contentType <-
			if website.authenticationModel.oclIsUndefined() then
				thisModule.findOrmEntity(website.authenticationName)
			else
				thisModule.findOrmEntity(website.authentication.name)
			endif,
		repositoriesUsed <-
			if website.authenticationModel.oclIsUndefined() then
				Sequence{ thisModule.findRepository(website.authenticationName) }
			else
				Sequence{ thisModule.findRepository(website.authentication.name) }
			endif,
		displayFields <-
			if website.authenticationModel.oclIsUndefined() then
				thisModule.findOrmEntity(website.authenticationName)
			else
				thisModule.findOrmEntity(website.authentication.name)
			endif.features
				->select(f | f.name <> 'password')
				->select(f | f.oclIsKindOf(ORM!Attribute))
				->collect(f | 
					if f.oclIsTypeOf(ORM!SingletonDate) then
						thisModule.implicitUnitDateAttribute(f)
					else
						thisModule.implicitUnitAttribute(f)
					endif),
		captionClass <-
			if thisModule.findWebsiteUI().defaultCaptionClass.trim() <> '' then
				thisModule.findWebsiteUI().defaultCaptionClass.trim()
			else
				OclUndefined
			endif,
		contentClass <- 
			if thisModule.findWebsiteUI().defaultFormContentClass.trim() <> '' then
				thisModule.findWebsiteUI().defaultFormContentClass.trim()
			else if thisModule.findWebsiteUI().defaultContentClass.trim() <> '' then
				thisModule.findWebsiteUI().defaultContentClass.trim()
			else
				OclUndefined
			endif endif,
		controlClass <- 
			if thisModule.findWebsiteUI().defaultFormControlClass.trim() <> '' then
				thisModule.findWebsiteUI().defaultFormControlClass.trim()
			else if thisModule.findWebsiteUI().defaultControlClass.trim() <> '' then
				thisModule.findWebsiteUI().defaultControlClass.trim()
			else
				OclUndefined
			endif endif
	)
	do {
		waf;
	}
}

unique lazy rule implicitSecurityPage {
	from website : Website!LocalAuthenticationSystem
	to waf : WAF!Page (
		name <- 'Security',
		displayLabel <- 'Security',
		units <-
			if website.registrationUnit.oclIsUndefined() then
				Sequence{ thisModule.implicitRegistrationUnit(website) }
			else
				Sequence{}
			endif
			->union(if website.loginUnit.oclIsUndefined() then
					Sequence{ thisModule.implicitLoginUnit(website) }
				else
					Sequence{}
				endif)
			->union(if website.logoutUnit.oclIsUndefined() then
					Sequence{ thisModule.implicitLogoutUnit(website) }
				else
					Sequence{}
				endif)
			->union(if website.forgottenPasswordUnit.oclIsUndefined() then
					Sequence{ thisModule.implicitForgottenPasswordUnit(website) }
				else
					Sequence{}
				endif)
	)
}

unique lazy rule implicitRegistrationUnit {
	from website : Website!LocalAuthenticationSystem
	to waf : WAF!RegistrationUnit (
		name <- website.registrationName,
		displayLabel <- website.registrationLabel,
		uriElement <- website.registrationUri
	)
}

unique lazy rule implicitLoginUnit {
	from website : Website!LocalAuthenticationSystem
	to waf : WAF!LoginUnit (
		name <- website.loginName,
		displayLabel <- website.loginLabel,
		uriElement <- website.loginUri,
		contentType <-
			if website.authenticationModel.oclIsUndefined() then
				thisModule.findOrmEntity(website.authenticationName)
			else
				thisModule.findOrmEntity(website.authentication.name)
			endif,
--		repositoriesUsed <-
--			if website.authenticationModel.oclIsUndefined() then
--				Sequence{ thisModule.findRepository(website.authenticationName) }
--			else
--				Sequence{ thisModule.findRepository(website.authentication.name) }
--			endif,
		displayFields <-
			if website.authenticationModel.oclIsUndefined() then
				thisModule.findOrmEntity(website.authenticationName)
			else
				thisModule.findOrmEntity(website.authentication.name)
			endif.features
				->select(f |
					(f.name = 'email' and website.authenticationKey = #Email)
					or (f.name = 'username' and website.authenticationKey <> #Email)
					or f.name = 'password')
				->collect(f | thisModule.implicitUnitAttribute(f)),
		confirmLabel <- website.loginLabel,
		captionClass <-
			if thisModule.findWebsiteUI().defaultCaptionClass.trim() <> '' then
				thisModule.findWebsiteUI().defaultCaptionClass.trim()
			else
				OclUndefined
			endif,
		contentClass <- 
			if thisModule.findWebsiteUI().defaultFormContentClass.trim() <> '' then
				thisModule.findWebsiteUI().defaultFormContentClass.trim()
			else if thisModule.findWebsiteUI().defaultContentClass.trim() <> '' then
				thisModule.findWebsiteUI().defaultContentClass.trim()
			else
				OclUndefined
			endif endif,
		controlClass <- 
			if thisModule.findWebsiteUI().defaultFormControlClass.trim() <> '' then
				thisModule.findWebsiteUI().defaultFormControlClass.trim()
			else if thisModule.findWebsiteUI().defaultControlClass.trim() <> '' then
				thisModule.findWebsiteUI().defaultControlClass.trim()
			else
				OclUndefined
			endif endif
	)
}

unique lazy rule implicitLogoutUnit {
	from website : Website!LocalAuthenticationSystem
	to waf : WAF!LogoutUnit (
		name <- website.logoutName,
		displayLabel <- website.logoutLabel,
		uriElement <- website.logoutUri
	)
}

unique lazy rule implicitForgottenPasswordUnit {
	from website : Website!LocalAuthenticationSystem
	to waf : WAF!ForgottenPasswordUnit (
		name <- 'reset',
		displayLabel <- 'Password Recovery',
		uriElement <- 'reset-password'
	)
}


lazy abstract rule implicitUnitFeature {
	from partialWaf : ORM!Feature
	to waf : WAF!UnitFeature (
		displayLabel <- partialWaf.displayLabel,
		title <- partialWaf.displayLabel,
		truncate <- true,
		collectionDisplayOption <- #PageDirection,
		inputGroupClass <-
			if thisModule.findWebsiteUI().defaultInputGroupClass.trim() <> '' then
				thisModule.findWebsiteUI().defaultInputGroupClass.trim()
			else
				OclUndefined
			endif,
		fieldLabelClass <-
			if thisModule.findWebsiteUI().defaultInputLabelClass.trim() <> '' then
				thisModule.findWebsiteUI().defaultInputLabelClass.trim()
			else if thisModule.findWebsiteUI().defaultFieldLabelClass.trim() <> '' then
				thisModule.findWebsiteUI().defaultFieldLabelClass.trim()
			else
				OclUndefined
			endif endif,
		fieldValueClass <-
			if thisModule.findWebsiteUI().defaultInputValueClass.trim() <> '' then
				thisModule.findWebsiteUI().defaultInputValueClass.trim()
			else if thisModule.findWebsiteUI().defaultFieldValueClass.trim() <> '' then
				thisModule.findWebsiteUI().defaultFieldValueClass.trim()
			else
				OclUndefined
			endif endif
	)
}

-- @extends implicitUnitFeature
lazy rule implicitUnitAttribute {
	from partialWaf : ORM!Attribute
	to waf : WAF!UnitAttribute (
		attribute <- partialWaf,
		placeholder <- partialWaf.name.createLabel()
	)
	do {
		waf;
	}
}

-- @extends implicitUnitFeature
lazy rule implicitUnitDateAttribute {
	from partialWaf : ORM!Attribute
	to waf : WAF!UnitAttribute (
		attribute <- partialWaf,
		dateFormat <- 'jS F Y G.i'
	)
	do {
		waf;
	}
}

unique lazy rule implicitRememberMeField {
	from website : Website!LocalAuthenticationSystem
	to waf : WAF!DataTypeField (
		name <- 'rememberMe',
		dataType <- thisModule.findOrmDataType('Boolean'),
		required <- false,
		displayLabel <- 'Remember Me',
		interfaceType <- thisModule.findWebsiteDataType('Boolean').interfaceType,
		inputClass <- 'input_checkbox'
	)
	do {
		waf;
	}
}

lazy rule implicitCaptchaField {
	from website : Website!LocalAuthenticationSystem
	to waf : WAF!CaptchaField (
		name <- 'captcha',
		displayLabel <- 'Captcha'
	)
	do {
		waf;
	}
}
