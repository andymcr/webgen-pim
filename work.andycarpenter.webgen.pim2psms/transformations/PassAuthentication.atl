-- @atlcompiler emftvm 
--
-- @path Website=/uk.ac.man.cs.mdsd.webgen.model/model/website.ecore
-- @path ORM=/uk.ac.man.cs.mdsd.orm.model/model/orm.ecore
-- @path WAF=/uk.ac.man.cs.mdsd.waf.model/model/Waf.ecore

module PassAuthentication;
create dummyWaf : WAF refining waf : WAF, website : Website, orm : ORM;

uses WebsiteHelpers;


rule WafModel {
	from partialWaf : WAF!WafModel
	to waf : WAF!WafModel (
		pages <-
			let security : Website!Security
				= thisModule.findWebsiteSecurity()
			in partialWaf.pages
				->union(
					if security.authentication.oclIsUndefined()
							or thisModule.findWebsiteProperties().frameworkTechnology = #Symfony then
						Sequence{}
					else if security.authentication.oclIsTypeOf(Website!LocalAuthenticationSystem) then
						let authentication : Website!LocalAuthenticationSystem
							= security.authentication.oclAsType(Website!LocalAuthenticationSystem)
						in if authentication.loginUnit.oclIsUndefined() then
								Sequence{thisModule.implicitLoginPage(authentication)}
							else
								Sequence{}
							endif
					else
						Sequence{}
					endif endif)
				->union(
					if security.authentication.oclIsUndefined()
							or thisModule.findWebsiteProperties().frameworkTechnology = #Symfony then
						Sequence{}
					else if security.authentication.oclIsTypeOf(Website!LocalAuthenticationSystem) then
						let authentication : Website!LocalAuthenticationSystem
							= security.authentication.oclAsType(Website!LocalAuthenticationSystem)
						in if authentication.authentication.oclIsUndefined() then
								if authentication.allowSelfRegistration  then
									Sequence{
										thisModule.implicitRegistrationPage(authentication),
										thisModule.implicitManageAuthenticationsPage(authentication)}
								else
									Sequence{
										thisModule.implicitManageAuthenticationsPage(authentication)}
									endif
							else
								Sequence{}
							endif
					else
						Sequence{}
					endif endif),
		authentication <- thisModule.findWebsiteSecurity().authentication
	)
}


abstract rule Authentication {
	from website : Website!Authentication
	to waf : WAF!Authentication (
		user <-
			if website.user.oclIsUndefined() then
				OclUndefined
			else
				thisModule.findOrmEntityOrView(website.user.name)
			endif,
		userKey <-
			if website.user.oclIsUndefined() 
					or website.userKey.oclIsUndefined() then
				OclUndefined
			else
				website.userKey.findOrmAttribute()
			endif,
		loginLabel <- website.loginLabel,
		logoutLabel <- website.logoutLabel
	)
}

-- @extends Authentication
rule LocalAuthenticationSystem {
	from website : Website!LocalAuthenticationSystem
	to waf : WAF!LocalAuthenticationSystem (
		authentication <-
			if thisModule.findWebsiteProperties().frameworkTechnology = #Symfony then
				OclUndefined
			else if website.authentication.oclIsUndefined() then
				thisModule.findOrmEntityOrView('Authentication')
			else
				thisModule.findOrmEntityOrView(website.authentication.name)
			endif endif,
		authenticationKey <- website.authenticationKey,
		loginAttempt <-
			if not website.trackLoginAttempts
					or thisModule.findWebsiteProperties().frameworkTechnology = #Symfony then
				OclUndefined
			else
				thisModule.findOrmEntityOrView('LoginAttempt')
			endif,
		useCaptcha <- website.useCaptcha,
		allowRememberMe <- website.allowRememberMe,
		allowSelfRegistration <- website.allowSelfRegistration,
		autoLogin <-
			if not website.allowRememberMe
					or thisModule.findWebsiteProperties().frameworkTechnology = #Symfony then
				OclUndefined
			else
				thisModule.findOrmEntityOrView('AutoLogin')
			endif,
		useEmailActivation <- website.useEmailActivation,
		sendWelcomeEmail <- website.sendWelcomeEmail,
		registrationUnit <-
			if thisModule.findWebsiteProperties().frameworkTechnology = #Symfony then
				OclUndefined
			else if not website.registrationUnit.oclIsUndefined() then
				website.registrationUnit
			else if website.allowSelfRegistration then
				thisModule.implicitRegistrationUnit(website)
			else
				OclUndefined
			endif endif endif,
		loginUnit <-
			if thisModule.findWebsiteProperties().frameworkTechnology = #Symfony then
				OclUndefined
			else if not website.loginUnit.oclIsUndefined() then
				website.loginUnit
			else
				thisModule.implicitLoginUnit(website)
			endif endif,
		forgottenPasswordUnit <-
			if thisModule.findWebsiteProperties().frameworkTechnology = #Symfony then
				OclUndefined
			else if not website.forgottenPasswordUnit.oclIsUndefined() then
				website.forgottenPasswordUnit
			else if not website.loginUnit.oclIsUndefined() then
				thisModule.implicitForgottenPasswordUnit(website)
			else
				OclUndefined
			endif endif endif
	)
}

-- @extends Authentication
rule CasAuthentication {
	from website : Website!CasAuthentication
	to waf : WAF!CasAuthentication (
	)
}


unique lazy rule implicitRegistrationUnit {
	from website : Website!LocalAuthenticationSystem
	to waf : WAF!RegistrationUnit (
		name <- 'RegisterUser',
		displayLabel <- 'Register User',
		omitCaption <- false,
		confirmDestination <- 
			if not website.loginUnit.oclIsUndefined() then
				website.loginUnit.displayedOn
			else
				thisModule.implicitLoginPage(website)
			endif,
		confirmLabel <- 'Register',
		entities <- Sequence{thisModule.findOrmEntityOrView('Authentication')},
		displayFields <-
			let features : Sequence(ORM!EntityFeature)
				= thisModule.findOrmEntityOrView('Authentication').features
					->select(f | f.name = 'username' or f.name = 'email' or f.name = 'password')
				in features->select(f | f.name = 'username')
					->collect(f | thisModule.implicitUnitAttribute(f))
				->union(features->select(f | f.name = 'email')
					->collect(f | thisModule.implicitUnitAttribute(f)))
				->union(Sequence{confirmEmail})
				->union(features->select(f | f.name = 'password')
					->collect(f | thisModule.implicitUnitAttribute(f)))
				->union(Sequence{confirmPassword})
				->union(if website.useCaptcha then
						Sequence{thisModule.implicitCaptchaField(website)}
					else
						Sequence{}
					endif),
		noRouteParameters <- false,
		styleClass <- 'unit register_unit framed',
		headerClass <- 'unit_header',
		captionClass <- 'unit_caption',
		controlClass <- 'unit_control',
		footerClass <- 'unit_footer',
		errorClass <- 'error',
		contentClass <- 'input_form'
	),
	confirmEmail : WAF!DataTypeField (
		name <- 'confirmEmail',
		dataType <- thisModule.findOrmDataType('Email'),
		required <- true,
		caseInsensitive <- true,
		displayLabel <- 'Confirm Email',
		interfaceType <- thisModule.findWebsiteDataType('Email').interfaceType,
		inputClass <- 'input_attribute'
		),
	confirmPassword : WAF!DataTypeField (
		name <- 'confirmPassword',
		dataType <- thisModule.findOrmDataType('String'),
		required <- true,
		obfuscateFormFields <- true,
		encrypt <- true,
		displayLabel <- 'Confirm Password',
		interfaceType <- thisModule.findWebsiteDataType('String').interfaceType,
		inputClass <- 'input_attribute'
	)
	do {
		waf;
	}
}

unique lazy rule implicitLoginUnit {
	from website : Website!LocalAuthenticationSystem
	to waf : WAF!LoginUnit (
		name <- 'Login',
		displayLabel <- 'Login',
		omitCaption <- false,
		submitLabel <- 'Login',
		entities <- Sequence{thisModule.findOrmEntityOrView('Authentication')},
		displayFields <-
			let features : Sequence(ORM!EntityFeature)
				= thisModule.findOrmEntityOrView('Authentication').features
					->select(f | f.name = 'email' or f.name = 'password')
				in features->select(f | f.name = 'email')
					->collect(f | thisModule.implicitUnitAttribute(f))
				->union(features->select(f | f.name = 'password')
					->collect(f | thisModule.implicitUnitAttribute(f)))
				->union(if website.allowRememberMe then
						Sequence{thisModule.implicitRememberMeField(website)}
					else
						Sequence{}
					endif),
-- assigned in next pass		loginIdField <- OclUndefined,
-- assigned in next pass		passwordField <- OclUndefined,
-- assigned in next pass		rememberMeField <- rememberMe,
		uriElement <- 'login',
		logoutUriElement <- 'logout',
		noRouteParameters <- false,
		styleClass <- 'unit login_unit framed',
		headerClass <- 'unit_header',
		captionClass <- 'unit_caption',
		controlClass <- 'unit_control',
		footerClass <- 'unit_footer',
		errorClass <- 'error',
		contentClass <- 'control_form'
	)
	do {
		waf;
	}
}

unique lazy rule implicitForgottenPasswordUnit {
	from website : Website!LocalAuthenticationSystem
	to waf : WAF!ForgottenPasswordUnit (
		name <- 'ForgottenPassword',
		displayLabel <- 'Recover Forgotten Password',
		omitCaption <- false,
		submitLabel <- 'Recover Password',
		entities <- Sequence{thisModule.findOrmEntityOrView('Authentication')},
		displayFields <-
			let features : Sequence(ORM!EntityFeature)
				= thisModule.findOrmEntityOrView('Authentication').features
					->select(f | f.name = 'email')
				in features
					->collect(f | thisModule.implicitUnitAttribute(f)),
-- assigned in next pass		loginIdField <- OclUndefined,
		uriElement <- 'forgotten',
		noRouteParameters <- false,
		styleClass <- 'unit forgotten_password_unit framed',
		headerClass <- 'unit_header',
		captionClass <- 'unit_caption',
		controlClass <- 'unit_control',
		footerClass <- 'unit_footer',
		errorClass <- 'error',
		contentClass <- 'control_form'
	)
	do {
		waf;
	}
}


helper context ORM!EntityFeature def: isBooleanDataType() : Boolean
	= if not self.oclIsTypeOf(ORM!SingletonElement) then
			false
		else
			self.dataType.name = 'Boolean'
		endif;

lazy abstract rule implicitUnitFeature {
	from partialWaf : ORM!EntityFeature
	to waf : WAF!UnitFeature (
		displayLabel <- partialWaf.displayLabel,
		inputClass <-
			if partialWaf.isBooleanDataType() then
				'input_checkbox'
			else
				'input_attribute'
			endif
	)
}

-- @extends implicitUnitFeature
lazy rule implicitUnitAttribute {
	from partialWaf : ORM!SingletonElement
	to waf : WAF!UnitAttribute (
		attribute <- partialWaf,
		obfuscateFormFields <- partialWaf.obfuscateFormFields
	)
	do {
		waf;
	}
}

-- @extends implicitUnitFeature
lazy rule implicitUnitDateAttribute {
	from partialWaf : ORM!SingletonDate
	to waf : WAF!UnitAttribute (
		attribute <- partialWaf,
		dateFormat <- 'jS F Y G.i'
	)
	do {
		waf;
	}
}

unique lazy rule implicitRememberMeField {
	from website : Website!LocalAuthenticationSystem
	to waf : WAF!DataTypeField (
		name <- 'rememberMe',
		dataType <- thisModule.findOrmDataType('Boolean'),
		required <- false,
		displayLabel <- 'Remember Me',
		interfaceType <- thisModule.findWebsiteDataType('Boolean').interfaceType,
		inputClass <- 'input_checkbox'
	)
	do {
		waf;
	}
}

lazy rule implicitCaptchaField {
	from website : Website!LocalAuthenticationSystem
	to waf : WAF!CaptchaField (
		name <- 'captcha',
		displayLabel <- 'Captcha'
	)
	do {
		waf;
	}
}

unique lazy rule implicitRegistrationPage {
	from website : Website!LocalAuthenticationSystem
	to waf : WAF!Page (
		name <- 'RegisterAuthentication',
		displayLabel <- 'Register Authentication',
		units <- Sequence{thisModule.implicitRegistrationUnit(website)},
		authenticated <- not website.allowSelfRegistration,
		uriElement <- 'register',
		navigationLabel <- 'Register',
		sideMenu <-
			let sideMenu : Website!Menu
				= thisModule.findWebsiteProperties().sideMenu
			in if sideMenu.oclIsUndefined() then
					OclUndefined
				else
					thisModule.findWafMenu(sideMenu.name)
				endif
	)
	do {
		waf;
	}
}

unique lazy rule implicitLoginPage {
	from website : Website!LocalAuthenticationSystem
	to waf : WAF!Page (
		name <- 'Authentication',
		displayLabel <- 'Login',
		units <- Sequence{thisModule.implicitLoginUnit(website)}
			->union(
				if website.forgottenPasswordUnit.oclIsUndefined() then
					Sequence{thisModule.implicitForgottenPasswordUnit(website)}
				else
					Sequence{}
				endif),
		authenticated <- false,
		navigationLabel <- 'Login',
		sideMenu <-
			let sideMenu : Website!Menu
				= thisModule.findWebsiteProperties().sideMenu
			in if sideMenu.oclIsUndefined() then
					OclUndefined
				else
					thisModule.findWafMenu(sideMenu.name)
				endif
	)
	do {
		waf;
	}
}

unique lazy rule implicitManageAuthenticationsPage {
	from website : Website!LocalAuthenticationSystem
	to waf : WAF!Page (
		name <- 'ManageAuthentications',
		displayLabel <- 'Manage Authentications',
		units <- Sequence{users, editUser},
		authenticated <- true,
		uriElement <- 'auth',
		topMenuOption <- #IncludeWhenAuthenticated,
		topMenuRank <- 100,
		navigationLabel <- 'Authentications',
		sideMenu <-
			let sideMenu : Website!Menu
				= thisModule.findWebsiteProperties().sideMenu
			in if sideMenu.oclIsUndefined() then
					OclUndefined
				else
					thisModule.findWafMenu(sideMenu.name)
				endif
	),
	users : WAF!IndexGridUnit (
		name <- 'users',
		displayLabel <- 'Users',
		omitCaption <- false,
		defaultPaginationSize <- 10,
		nextPageLabel <- '>',
		previousPageLabel <- '<',
		entities <- Sequence{thisModule.findOrmEntityOrView('Authentication')},
		displayFields <-
			let features : Sequence(ORM!EntityFeature)
				= thisModule.findOrmEntityOrView('Authentication').features
					->select(f | f.name = 'username' or f.name = 'email' or f.name = 'lastLogin')
				in features
					->collect(f | 
						if f.name = 'lastLogin' then
							thisModule.implicitUnitDateAttribute(f)
						else
							thisModule.implicitUnitAttribute(f)
						endif),
		actions <- Sequence{editUserAction},
		noRouteParameters <- false,
		styleClass <- 'unit index_unit framed',
		headerClass <- 'unit_header',
		captionClass <- 'unit_caption',
		controlClass <- 'unit_control',
		footerClass <- 'unit_footer',
		errorClass <- 'error',
		contentClass <- 'index_layout',
		rowClasses <- 'odd_row even_row'
	),
	editUserAction : WAF!SelectAction (
		name <- 'edit',
		displayLabel <- 'Edit',
		target <- editUser
	),
	editUser : WAF!UpdateUnit (
		name <- 'editUser',
		displayLabel <- 'Edit User',
		omitCaption <- false,
		confirmLabel <- 'Save',
		entities <- Sequence{thisModule.findOrmEntityOrView('Authentication')},
		displayFields <-
			let features : Sequence(ORM!EntityFeature)
				= thisModule.findOrmEntityOrView('Authentication').features
					->select(f | f.name <> 'password')
				in features
					->select(f | f.oclIsKindOf(ORM!EntityAttribute))
					->collect(f | 
						if f.oclIsTypeOf(ORM!SingletonDate) then
							thisModule.implicitUnitDateAttribute(f)
						else
							thisModule.implicitUnitAttribute(f)
						endif),
		noRouteParameters <- false,
		styleClass <- 'unit update_unit framed',
		headerClass <- 'unit_header',
		captionClass <- 'unit_caption',
		controlClass <- 'unit_control',
		footerClass <- 'unit_footer',
		errorClass <- 'error',
		contentClass <- 'input_form'
	)
	do {
		waf;
	}
}
