-- @atlcompiler emftvm 
--
-- @path Website=/work.andycarpenter.webgen.pims.model/model/website.ecore
-- @path ORM=/work.andycarpenter.psms.orm/model/orm.xcore
-- @path WAF=/work.andycarpenter.psms.waf/model/Waf.xcore

module PassAuthentication;
create dummyWaf : WAF, dummySecurity : Security refining waf : WAF, website : Website, orm : ORM, security : Security;

uses PersistenceHelpers;
uses AuthenticationHelpers;
uses WebsiteHelpers;


rule WafModel {
	from partialWaf : WAF!WafModel
	to waf : WAF!WafModel (
		pages <- partialWaf.pages
			->union(
				let security : Website!Security = thisModule.findWebsiteSecurity()
					in if not security.isLocallyAuthenticated() then
							Sequence{}
						else
							let authentication : Website!LocalAuthenticationSystem
								= security.authentication
								in if security.hasImplicitAuthenticationPage() then
										Sequence{thisModule.implicitAuthenticationsPage(authentication)}
									else
										Sequence{}
						endif endif)
	)
}


rule LocalAuthenticationSystem {
	from partialSecurity : Security!LocalAuthenticationSystem
	to security : Security!LocalAuthenticationSystem (
		registrationElement <-
			let authentication : Website!LocalAuthenticationSystem
				= thisModule.findWebsiteSecurity().authentication
				in if authentication.registrationUnit.oclIsUndefined() then
						if authentication.allowSelfRegistration then
							thisModule.implicitRegistrationElement(authentication)
						else
							OclUndefined
						endif
					else
						authentication.registrationUnit.findWafUnit()
					endif,
		loginElement <-
			let authentication : Website!LocalAuthenticationSystem
				= thisModule.findWebsiteSecurity().authentication
				in if authentication.loginUnit.oclIsUndefined() then
						thisModule.implicitLoginElement(authentication)
					else
						authentication.loginUnit.findWafUnit()
					endif,
		logoutElement <-
			let authentication : Website!LocalAuthenticationSystem
				= thisModule.findWebsiteSecurity().authentication
				in if authentication.logoutUnit.oclIsUndefined() then
						thisModule.implicitLogoutElement(authentication)
					else
						authentication.logoutUnit.findWafUnit()
					endif,
		forgottenPasswordElement <-
			let authentication : Website!LocalAuthenticationSystem
				= thisModule.findWebsiteSecurity().authentication
				in if authentication.forgottenPasswordUnit.oclIsUndefined() then
						thisModule.implicitForgottenPasswordElement(authentication)
					else
						authentication.forgottenPasswordUnit.findWafUnit()
					endif,
		resetPasswordElement <-
			let authentication : Website!LocalAuthenticationSystem
				= thisModule.findWebsiteSecurity().authentication
				in if authentication.resetPasswordUnit.oclIsUndefined() then
						thisModule.implicitResetPasswordElement(authentication)
					else
						authentication.resetPasswordUnit.findWafUnit()
					endif
	)
}

unique lazy rule implicitRegistrationElement {
	from website : Website!LocalAuthenticationSystem
	to waf : Security!RegistrationElement (
		name <- website.implicitRegistrationName,
		displayLabel <- website.implicitRegistrationUnitLabel,
		uriElement <- website.implicitRegistrationUri,
		confirmLabel <- website.implicitRegistrationConfirmLabel
	)
}


unique lazy rule implicitLoginElement {
	from website : Website!LocalAuthenticationSystem
	to waf : Security!LoginElement (
		name <- website.implicitLoginName,
		displayLabel <- website.implicitLoginUnitLabel,
		uriElement <- website.implicitLoginUri,
		confirmLabel <- website.implicitLoginConfirmLabel
	)
}


unique lazy rule implicitLogoutElement {
	from website : Website!LocalAuthenticationSystem
	to waf : Security!LogoutElement (
		name <- website.implicitLogoutName,
		displayLabel <- website.implicitLogoutConfirmLabel,
		uriElement <- website.implicitLogoutUri --,
--		confirmLabel <- website.implicitLogoutConfirmLabel
	)
}


unique lazy rule implicitForgottenPasswordElement {
	from website : Website!LocalAuthenticationSystem
	to waf : Security!ForgottenPasswordElement (
		name <- website.implicitForgottenPasswordName,
		displayLabel <- website.implicitForgottenPasswordUnitLabel,
		uriElement <- website.implicitForgottenPasswordUriRequest,
		uriEmailSent <- website.implicitForgottenPasswordUriEmailSent,
		confirmLabel <- website.implicitForgottenPasswordConfirmLabel,
		emailSubject <- website.implicitForgottenPasswordEmailSubject,
		emailMessage <- website.implicitForgottenPasswordEmailMessage,
		emailSentCaption <- website.implicitForgottenPasswordEmailSentCaption,
		emailSentMessage <- website.implicitForgottenPasswordEmailSentMessage
	)
}


unique lazy rule implicitResetPasswordElement {
	from website : Website!LocalAuthenticationSystem
	to waf : Security!ResetPasswordElement (
		name <- website.implicitResetPasswordName,
		displayLabel <- website.implicitResetPasswordUnitLabel,
		uriElement <- website.implicitResetPasswordUri,
		confirmLabel <- website.implicitResetPasswordConfirmLabel
	)
}


unique lazy rule implicitAuthenticationsPage {
	from website : Website!LocalAuthenticationSystem
	to waf : WAF!Page (
		name <- 'ManageAuthentications',
		displayLabel <- 'Manage Authentications',
		units <- Sequence{authentications, update},
		uriElement <- 'authentications'
	),
	authentications : WAF!TextCardsUnit (
		name <- 'authentications',
		displayLabel <- 'Authentications',
		authorisationRoles <- website.viewRole,
		omitCaption <- false,
		contentType <-
			if website.authenticationModel.oclIsUndefined() then
				thisModule.findOrmEntity(website.authenticationName)
			else
				thisModule.findOrmEntity(website.authenticationModel.name)
			endif,
		displayFields <-
			if website.authenticationModel.oclIsUndefined() then
				thisModule.findOrmEntity(website.authenticationName)
			else
				thisModule.findOrmEntity(website.authenticationModel.name)
			endif.features
				->select(f | f.name = 'email' or f.name = 'roles')
				->collect(f | thisModule.implicitUnitAttribute(f)),
			defaultPaginationSize <- 12,
		nextPageLabel <- '>',
		previousPageLabel <- '<',
		elementTitle <- elementTitle,
		allActions <- Sequence{updateAction, deleteAction}
	),
	elementTitle : WAF!FeaturePathAttribute (
		attribute <- 
			thisModule.findOrmEntity(website.authenticationName).features
				->any(f | f.name = 'username')
	),
	updateAction : WAF!InstanceSelectAction (
		name <- 'update',
		displayLabel <- 'Update',
		target <- update
	),
	deleteAction : WAF!DeleteAction (
		name <- 'delete',
		displayLabel <- 'Delete',
		localAuthorisationRoles <- website.editRole,
		confirmMessage <- 'Delete authentication?',
		uriElement <- 'delete'
	),
	update : WAF!UpdateUnit (
		name <- 'update',
		displayLabel <- 'Update Authentication',
		authorisationRoles <- website.editRole,
		omitCaption <- false,
		confirmLabel <- 'Save',
		contentType <-
			if website.authenticationModel.oclIsUndefined() then
				thisModule.findOrmEntity(website.authenticationName)
			else
				thisModule.findOrmEntity(website.authentication.name)
			endif,
		displayFields <-
			if website.authenticationModel.oclIsUndefined() then
				thisModule.findOrmEntity(website.authenticationName)
			else
				thisModule.findOrmEntity(website.authentication.name)
			endif.features
				->select(f | f.name <> 'password')
				->select(f | f.oclIsKindOf(ORM!Attribute))
				->collect(f | 
					if f.oclIsTypeOf(ORM!DateAttribute) then
						thisModule.implicitUnitDateAttribute(f)
					else
						thisModule.implicitUnitAttribute(f)
					endif),
		successMessage <- successMessage,
		uriElement <- 'update'
	),
	successMessage : WAF!Message (
		text <- 'Authentication saved'
	)
	do {
		waf;
	}
}


lazy abstract rule implicitUnitFeature {
	from partialWaf : ORM!Feature
	to waf : WAF!UnitFeature (
		truncate <- true,
		collectionDisplayOption <- #PageDirection
	)
}

-- @extends implicitUnitFeature
lazy rule implicitUnitAttribute {
	from partialWaf : ORM!Attribute
	to waf : WAF!UnitAttribute (
		attribute <- partialWaf
	)
	do {
		waf;
	}
}

-- @extends implicitUnitFeature
lazy rule implicitUnitDateAttribute {
	from partialWaf : ORM!Attribute
	to waf : WAF!UnitAttribute (
		attribute <- partialWaf,
		dateFormat <- 'jS F Y G.i'
	)
	do {
		waf;
	}
}