-- @atlcompiler emftvm 
--
-- @path Website=/work.andycarpenter.webgen.pims.model/model/website.ecore
-- @path ORM=/work.andycarpenter.psms.orm/model/Orm.ecore

module PersistenceEntityFeatures;
create dummyOrm : ORM refining orm : ORM, website : Website;

uses WebsiteHelpers;
uses PersistenceHelpers;
uses PersistenceFeatureExpression;


abstract rule NamedElement {
	from website : Website!NamedElement
	to orm : ORM!NamedElement (
		name <- website.name
	)
}

-- @extends NamedElement
abstract rule NamedDisplayElement {
	from website : Website!NamedDisplayElement
	to orm : ORM!NamedDisplayElement (
		displayLabel <-
			if not website.displayLabel.oclIsUndefined() and website.displayLabel <> '' then
				website.displayLabel
			else
				website.name.createLabel()
			endif
	)
}


-- @extends NamedDisplayElement
abstract rule Feature {
	from website : Website!Feature
	to orm : ORM!Feature (
		partOf <- thisModule.findOrmEntity(website.partOf.name),
		cardinality <- website.cardinality,
		primaryKey <- website.primaryKey,
		"derived" <- website."derived",
		customiseSet <- website.customiseSet,
		singletonName <-
			if website.singletonName.oclIsUndefined() or website.singletonName = '' then
				website.name
			else
				website.singletonName
			endif,
		pluralisedName <-
			if website.pluralisedName.oclIsUndefined() or website.pluralisedName = '' then
				website.name
			else
				website.pluralisedName
			endif,
		booleanIsHasChoice <- website.booleanIsHasChoice,
		encodeUriKey <- website.encodeUriKey,
		collectionOrmAllowAdd <- website.collectionOrmAllowAdd,
		collectionOrmAllowRemove <- website.collectionOrmAllowRemove,
		serializationGroups <-
			website.serializationGroups
				->collect(g | thisModule.findOrmSerializationGroup(g.name))
	)
}

-- @extends Feature
abstract rule Attribute {
	from website : Website!Attribute
	to orm : ORM!Attribute (
		defaultValue <- website.defaultValue,
		slugFields <- website.slugFields,
		hidden <- website.hidden,
		columnName <-
			if not website.columnName.oclIsUndefined() and website.columnName <> '' then
				website.columnName.createAttributeColumnName()
			else
				website.name.createAttributeColumnName()
			endif,
		validationPattern <- website.validationPattern()
	)
}

-- @extends Attribute
abstract rule SingletonAttribute {
	from website : Website!Attribute (website.cardinality <> #Many)
	to orm : ORM!SingletonAttribute (
		"unique" <- website."unique",
		containerUnique <- website.containerUnique
	)
}

-- @extends Attribute
abstract rule CollectionAttribute {
	from website : Website!Attribute (website.cardinality = #Many)
	to orm : ORM!CollectionAttribute (
	)
}

-- @extends SingletonAttribute
rule SingletonElement {
	from website : Website!DataTypeAttribute (website.cardinality <> #Many)
	to orm : ORM!SingletonElement (
		persistentType <- 
			if not website.persistentType.oclIsUndefined() and website.persistentType <> '' then
				website.persistentType
			else
				website.dataType.persistentType()
			endif,
		ormType <- 
			if not website.ormType.oclIsUndefined() and website.ormType <> '' then
				website.ormType
			else 
				website.dataType.ormType()
			endif,
		dataType <- thisModule.findOrmDataType(website.dataType.name),
		obfuscateFormFields <- website.obfuscateFormFields,
		caseInsensitive <- website.caseInsensitive,
		encrypt <- website.encrypt
	)
}

-- @extends CollectionAttribute
rule CollectionElement {
	from website : Website!DataTypeAttribute (website.cardinality = #Many)
	to orm : ORM!CollectionElement (
		collectionType <- thisModule.findOrmCollectionType(website.dataType.name),
		ormType <- 'array'
	)
}

abstract rule DateAttribute {
	from website : Website!DateAttribute
	to orm : ORM!DateAttribute (
		persistentType <- 
			if not website.persistentType.oclIsUndefined() and website.persistentType <> '' then
				website.persistentType
			else
				if website.details = #DateOnly then
					'date'
				else if website.details = #TimeOnly then
					'time'
				else
					'datetime'
				endif endif
			endif,
		ormType <- 
			if not website.ormType.oclIsUndefined() and website.ormType <> '' then
				website.ormType
			else 
				if website.details = #DateOnly then
					'date'
				else if website.details = #TimeOnly then
					'time'
				else
					'datetime'
				endif endif
			endif,
		details <- website.details
	)
}

-- @extends SingletonAttribute, DateAttribute
rule SingletonDate {
	from website : Website!DateAttribute (website.cardinality <> #Many)
	to orm : ORM!SingletonDate (
	)
}

-- @extends CollectionAttribute, DateAttribute
rule CollectionDate {
	from website : Website!DateAttribute (website.cardinality = #Many)
	to orm : ORM!CollectionDate (
	)
}

-- @extends SingletonAttribute
rule SingletonURL {
	from website : Website!UrlAttribute (website.cardinality <> #Many)
	to orm : ORM!SingletonURL (
		displayValue <- website.displayValue,
		persistentType <-
			if not website.persistentType.oclIsUndefined() and website.persistentType <> '' then
				website.persistentType
			else
				thisModule.findWebsiteDataType('String').persistentType()
			endif,
		ormType <-
			if not website.ormType.oclIsUndefined() and website.ormType <> '' then
				website.ormType
			else 
				thisModule.findWebsiteDataType('String').ormType()
			endif
	)
}

-- @extends SingletonAttribute
abstract rule SingletonResource {
	from website : Website!ResourceAttribute (website.cardinality <> #Many)
	to orm : ORM!SingletonResource (
		persistentType <-
			if not website.persistentType.oclIsUndefined() and website.persistentType <> '' then
				website.persistentType
			else
				thisModule.findWebsiteDataType('String').persistentType()
			endif,
		ormType <-
			if not website.ormType.oclIsUndefined() and website.ormType <> '' then
				website.ormType
			else 
				thisModule.findWebsiteDataType('String').ormType()
			endif,
		maximumUploadSize <-
			if website.maximumUploadSize > 0 then
				website.maximumUploadSize
			else
				thisModule.findWebsiteUI().defaultMaximumUploadSize
			endif,
		validUploadMimeTypes <- website.validUploadMimeTypes,
		validUploadExtensions <- website.validUploadExtensions,
		uploadsWithinWebsite <- website.uploadsWithinWebsite,
		uploadPath <- website.uploadPath
	)
}

abstract rule PathElement {
	from website: Website!PathElement
	to orm : ORM!PathElement(
	)
}

-- @extends PathElement
rule StaticPathElement {
	from website: Website!StaticPathElement
	to orm : ORM!StaticPathElement(
		element <- website.element
	)
}

-- @extends PathElement
rule DatePathElement {
	from website: Website!DatePathElement
	to orm : ORM!DatePathElement(
		format <- website.format
	)
}

-- @extends SingletonResource
rule SingletonFile {
	from website : Website!FileAttribute (website.cardinality <> #Many)
	to orm : ORM!SingletonFile (
	)
}

-- @extends SingletonResource
rule SingletonImage {
	from website : Website!ImageAttribute (website.cardinality <> #Many)
	to orm : ORM!SingletonImage (
	)
}

-- @extends SingletonAttribute
rule SingletonLocation {
	from website : Website!LocationAttribute (website.cardinality <> #Many)
	to orm : ORM!SingletonLocation (
	)
}

-- @extends Feature
abstract rule Association {
	from website : Website!Association
	to orm : ORM!Association (
		keys <- website.keys,
		columnName <-
			if not website.columnName.oclIsUndefined() and website.columnName <> '' then
				website.columnName
			else
				website.name.createAssociationColumnName()
			endif,
		pivotTableName <- website.createPivotTableName(),
		serializationMaxDepth <- website.serializationMaxDepth
	)
}

-- @extends Association
rule OneToOneAssociationWithoutContainment {
	from website : Website!AssociationWithoutContainment (website.cardinality <> #Many and website.targetCardinality <> #Many)
	to orm : ORM!SingletonAssociation (
		associationRelationship <- #OneToOne,
		opposite <- associationEnd,
		owningEnd <- website.cardinality = #Required or website.targetCardinality <> #Required
	),
	associationEnd : ORM!SingletonAssociation (
		name <- website.targetFeatureName(),
		displayLabel <- website.targetDisplayLabel(),
		partOf <- thisModule.findOrmEntity(website.targetEntity.name),
		associationRelationship <- #OneToOne,
		opposite <- orm,
		owningEnd <- website.cardinality <> #Required and website.targetCardinality = #Required,
		primaryKey <- website.targetPrimaryKey,
		visible <- website.bidirectional,
		columnName <-
			if not website.targetColumnName.oclIsUndefined() and website.targetColumnName <> '' then
				website.targetColumnName
			else
				website.targetFeatureName().createAssociationColumnName()
			endif,
		pivotTableName <- website.createPivotTableName(),
		keys <- website.keys->collect(k | thisModule.OppositeAssociationKey(k))
	)
}

-- @extends Association
rule ManyToOneAssociationWithoutContainment {
	from website : Website!AssociationWithoutContainment (website.cardinality <> #Many and website.targetCardinality = #Many)
	to orm : ORM!SingletonAssociation (
		associationRelationship <- #ManyToOne,
		opposite <- associationEnd,
		owningEnd <- true
	),
	associationEnd : ORM!CollectionAssociation (
		name <- website.targetFeatureName(),
		displayLabel <- website.targetDisplayLabel(),
		partOf <- thisModule.findOrmEntity(website.targetEntity.name),
		associationRelationship <- #OneToMany,
		opposite <- orm,
		owningEnd <- false,
		primaryKey <- website.targetPrimaryKey,
		visible <- website.bidirectional,
		pivotTableName <- website.createPivotTableName(),
		keys <- website.keys->collect(k | thisModule.OppositeAssociationKey(k))
	)
}

-- @extends Association
rule OneToManyAssociationWithoutContainment {
	from website : Website!AssociationWithoutContainment (website.cardinality = #Many and website.targetCardinality <> #Many)
	to orm : ORM!CollectionAssociation (
		collectionType <- thisModule.findOrmCollection(website.targetEntity.name),
		associationRelationship <- #OneToMany,
		opposite <- associationEnd,
		owningEnd <- false
	),
	associationEnd : ORM!SingletonAssociation (
		name <- website.targetFeatureName(),
		displayLabel <- website.targetDisplayLabel(),
		partOf <- thisModule.findOrmEntity(website.targetEntity.name),
		associationRelationship <- #ManyToOne,
		opposite <- orm,
		owningEnd <- true,
		primaryKey <- website.targetPrimaryKey,
		visible <- website.bidirectional,
		columnName <-
			if not website.targetColumnName.oclIsUndefined() and website.targetColumnName <> '' then
				website.targetColumnName
			else
				website.targetFeatureName().createAssociationColumnName()
			endif,
		pivotTableName <- website.createPivotTableName(),
		keys <- website.keys->collect(k | thisModule.OppositeAssociationKey(k))
	)
}

-- @extends Association
rule ManyToManyAssociationWithoutContainment {
	from website : Website!AssociationWithoutContainment (website.cardinality = #Many and website.targetCardinality = #Many)
	to orm : ORM!CollectionAssociation (
		collectionType <- thisModule.findOrmCollection(website.targetEntity.name),
		associationRelationship <- #ManyToMany,
		opposite <- associationEnd,
		owningEnd <- true,
		columnName <-
			if not website.columnName.oclIsUndefined() and website.columnName <> '' then
				website.columnName
			else
				website.partOf.createEntityColumnName()
			endif
	),
	associationEnd : ORM!CollectionAssociation (
		name <- website.targetFeatureName(),
		displayLabel <- website.targetDisplayLabel(),
		partOf <- thisModule.findOrmEntity(website.targetEntity.name),
		associationRelationship <- #ManyToMany,
		opposite <- orm,
		owningEnd <- false,
		primaryKey <- website.targetPrimaryKey,
		pivotTableName <- website.createPivotTableName(),
		keys <- website.keys->collect(k | thisModule.OppositeAssociationKey(k)),
		visible <- website.bidirectional,
		columnName <-
			if not website.targetColumnName.oclIsUndefined() and website.targetColumnName <> '' then
				website.targetColumnName
			else
				website.targetEntity.createEntityColumnName()
			endif
	)
}

-- @extends Association
rule OneToOneAssociationWithContainment {
	from website : Website!AssociationWithContainment (website.cardinality <> #Many)
	to orm : ORM!SingletonAssociation (
		associationRelationship <- #OneToOne,
		opposite <- associationEnd,
		contains <- true,
		visible <- website.sourceVisible
	),
	associationEnd : ORM!SingletonAssociation (
		name <- website.targetFeatureName(),
		displayLabel <- website.targetDisplayLabel(),
		partOf <- thisModule.findOrmEntity(website.targetEntity.name),
		associationRelationship <- #OneToOne,
		cardinality <- #Required,
		opposite <- orm,
		owningEnd <- true,
		primaryKey <- website.targetPrimaryKey,
		container <- true,
		visible <- website.bidirectional,
		columnName <-
			if not website.targetColumnName.oclIsUndefined() and website.targetColumnName <> '' then
				website.targetColumnName
			else
				website.targetFeatureName().createAssociationColumnName()
			endif,
		pivotTableName <- website.createPivotTableName(),
		keys <- website.keys->collect(k | thisModule.OppositeAssociationKey(k))
	)
}

-- @extends Association
rule OneToManyAssociationWithContainment {
	from website : Website!AssociationWithContainment (website.cardinality = #Many)
	to orm : ORM!CollectionAssociation (
		associationRelationship <- #OneToMany,
		opposite <- associationEnd,
		contains <- true,
		visible <- website.sourceVisible
	),
	associationEnd : ORM!SingletonAssociation (
		name <- website.targetFeatureName(),
		displayLabel <- website.targetDisplayLabel(),
		partOf <- thisModule.findOrmEntity(website.targetEntity.name),
		associationRelationship <- #ManyToOne,
		cardinality <- #Required,
		opposite <- orm,
		owningEnd <- true,
		primaryKey <- website.targetPrimaryKey,
		container <- true,
		visible <- website.bidirectional,
		columnName <-
			if not website.targetColumnName.oclIsUndefined() and website.targetColumnName <> '' then
				website.targetColumnName
			else
				website.targetFeatureName().createAssociationColumnName()
			endif,
		pivotTableName <- website.createPivotTableName(),
		keys <- website.keys->collect(k | thisModule.OppositeAssociationKey(k))
	)
}

rule AssocationKey {
	from website : Website!AssociationKey
	to orm : ORM!AssociationKey (
		sourceFeature <- website.sourceFeature,
		targetFeature <-
			if website.targetFeature.oclIsKindOf(Website!Attribute) then
				website.targetFeature
			else
				if website.keyFor.targetEntityX = website.keyFor.targetEntity then
					OclUndefined
				else
					website.targetFeature
				endif
			endif
	)
}

lazy rule OppositeAssociationKey {
	from website : Website!AssociationKey
	to orm : ORM!AssociationKey (
		sourceFeature <-
			if website.targetFeature.oclIsKindOf(Website!Attribute) then
				website.targetFeature
			else
				if website.keyFor.targetEntityX = website.keyFor.targetEntity then
					OclUndefined
				else
					website.targetFeature
				endif
			endif,
		targetFeature <- website.sourceFeature
	)
}