-- @atlcompiler emftvm 
--
-- @path Website=/work.andycarpenter.webgen.pims.model/model/website.ecore
-- @path ORM=/work.andycarpenter.psms.orm/model/Orm.ecore

module PersistenceEntityFeatures;
create dummyOrm : ORM refining orm : ORM, website : Website;

uses WebsiteHelpers;
uses PersistenceHelpers;
uses PersistenceFeatureExpression;


abstract rule NamedElement {
	from website : Website!NamedElement
	to orm : ORM!NamedElement (
		name <- website.name
	)
}

-- @extends NamedElement
abstract rule NamedDisplayElement {
	from website : Website!NamedDisplayElement
	to orm : ORM!NamedDisplayElement (
		displayLabel <-
			if not website.displayLabel.oclIsUndefined() and website.displayLabel <> '' then
				website.displayLabel
			else
				website.name.createLabel()
			endif
	)
}


-- @extends NamedDisplayElement
abstract rule Feature {
	from website : Website!Feature
	to orm : ORM!Feature (
		partOf <- thisModule.findOrmEntity(website.partOf.name),
		cardinality <- website.cardinality,
		isPrimaryKey <- website.primaryKey,
		isDerived <- website."derived",
		customiseSet <- website.customiseSet,
		singletonName <-
			if website.singletonName.oclIsUndefined() or website.singletonName = '' then
				website.name
			else
				website.singletonName
			endif,
		pluralisedName <-
			if website.pluralisedName.oclIsUndefined() or website.pluralisedName = '' then
				website.name
			else
				website.pluralisedName
			endif,
		encodeUriKey <- website.encodeUriKey,
		collectionOrmAllowAdd <- website.collectionOrmAllowAdd,
		collectionOrmAllowRemove <- website.collectionOrmAllowRemove,
		serializationGroups <-
			website.serializationGroups
				->collect(g | thisModule.findOrmSerializationGroup(g.name))
	)
}

-- @extends Feature
abstract rule Attribute {
	from website : Website!Attribute
	to orm : ORM!Attribute (
		attributeDefaultValue <- website.defaultValue,
		slugFields <- website.slugFields,
		hidden <- website.hidden,
		columnName <-
			if not website.columnName.oclIsUndefined() and website.columnName <> '' then
				website.columnName.createAttributeColumnName()
			else
				website.name.createAttributeColumnName()
			endif,
		booleanIsHasChoice <- website.booleanIsHasChoice
	)
}

-- @extends Attribute
rule DataTypeAttribute {
	from website : Website!DataTypeAttribute
	to orm : ORM!DataTypeAttribute (
		attributeDataType <- thisModule.findOrmDataType(website.dataType.name),
		obfuscateFormFields <- website.obfuscateFormFields,
		caseInsensitive <- website.caseInsensitive,
		encrypt <- website.encrypt,
		"unique" <- website."unique",
		containerUnique <- website.containerUnique,
		validationPattern <- website.validationPattern()
	)
}

-- @extends Attribute
rule DateAttribute {
	from website : Website!DateAttribute
	to orm : ORM!DateAttribute (
		details <- website.details
	)
}

-- @extends Feature
abstract rule ResourceFeature {
	from website : Website!ResourceFeature
	to orm : ORM!ResourceFeature (
		maximumUploadSize <-
			if website.maximumUploadSize > 0 then
				website.maximumUploadSize
			else
				thisModule.findWebsiteUI().defaultMaximumUploadSize
			endif,
		validUploadMimeTypes <- website.validUploadMimeTypes,
		validUploadExtensions <- website.validUploadExtensions,
		uriPrefix <- website.uriPrefix,
		baseUploadDirectory <- website.baseUploadDirectory,
		directoryNamer <- website.directoryNamer,
		fileNamer <- website.fileNamer
	)
}

abstract rule DirectoryNamer {
	from website: Website!DirectoryNamer
	to orm : ORM!DirectoryNamer(
	)
}

-- @extends DirectoryNamer
rule SubDirectory {
	from website: Website!SubDirectory
	to orm : ORM!SubDirectory(
		charactersPerDirectory <- website.charactersPerDirectory,
		directoryCount <- website.directoryCount
	)
}

-- @extends DirectoryNamer
rule PropertyDirectory {
	from website: Website!PropertyDirectory
	to orm : ORM!PropertyDirectory(
		attribute <- website.attribute
	)
}

-- @extends DirectoryNamer
rule DateTimeDirectory {
	from website: Website!DateTimeDirectory
	to orm : ORM!DateTimeDirectory(
		format <- website.format,
		attribute <- website.attribute
	)
}

abstract rule FileNamer {
	from website: Website!FileNamer
	to orm : ORM!FileNamer(
	)
}

-- @extends FileNamer
rule UniqueIdNamer {
	from website: Website!UniqueIdNamer
	to orm : ORM!UniqueIdNamer(
	)
}

-- @extends FileNamer
rule OriginalNamer {
	from website: Website!OriginalNamer
	to orm : ORM!OriginalNamer(
	)
}

-- @extends FileNamer
rule PropertyNamer {
	from website: Website!PropertyNamer
	to orm : ORM!PropertyNamer(
		attribute <- website.attribute
	)
}

-- @extends FileNamer
rule HashNamer {
	from website: Website!HashNamer
	to orm : ORM!HashNamer(
		algoritm <- website.algorithm,
		length <- website.length
	)
}

-- @extends FileNamer
rule Base64Namer {
	from website: Website!Base64Namer
	to orm : ORM!Base64Namer(
		length <- website.length
	)
}

-- @extends FileNamer
rule SmartUniqueNamer {
	from website: Website!SmartUniqueNamer
	to orm : ORM!SmartUniqueNamer(
	)
}

-- @extends FileNamer
rule SlugNamer {
	from website: Website!SlugNamer
	to orm : ORM!SlugNamer(
	)
}

-- @extends ResourceFeature
rule FileResource {
	from website : Website!FileResource
	to orm : ORM!FileResource (
	)
}

-- @extends ResourceFeature
rule ImageResource {
	from website : Website!ImageResource
	to orm : ORM!ImageResource (
	)
}

-- @extends Feature
rule LocationFeature {
	from website : Website!LocationAttribute
	to orm : ORM!LocationFeature (
	)
}

-- @extends Feature
abstract rule Association {
	from website : Website!Association
	to orm : ORM!Association (
		keys <- website.keys,
		columnName <-
			if not website.columnName.oclIsUndefined() and website.columnName <> '' then
				website.columnName
			else
				website.name.createAssociationColumnName()
			endif,
		pivotTableName <- website.createPivotTableName(),
		serializationMaxDepth <- website.serializationMaxDepth
	)
}

-- @extends Association
rule OneToOneAssociationWithoutContainment {
	from website : Website!AssociationWithoutContainment (website.cardinality <> #Many and website.targetCardinality <> #Many)
	to orm : ORM!Association (
		associationRelationship <- #OneToOne,
		opposite <- associationEnd,
		associationOwningEnd <- website.cardinality = #Required or website.targetCardinality <> #Required
	),
	associationEnd : ORM!Association (
		name <- website.targetFeatureName(),
		displayLabel <- website.targetDisplayLabel(),
		partOf <- thisModule.findOrmEntity(website.targetEntity.name),
		cardinality <- website.targetCardinality,
		associationRelationship <- #OneToOne,
		opposite <- orm,
		associationOwningEnd <- website.cardinality <> #Required and website.targetCardinality = #Required,
		isPrimaryKey <- website.targetPrimaryKey,
		visible <- website.bidirectional,
		columnName <-
			if not website.targetColumnName.oclIsUndefined() and website.targetColumnName <> '' then
				website.targetColumnName
			else
				website.targetFeatureName().createAssociationColumnName()
			endif,
		pivotTableName <- website.createPivotTableName(),
		keys <- website.keys->collect(k | thisModule.OppositeAssociationKey(k))
	)
}

-- @extends Association
rule ManyToOneAssociationWithoutContainment {
	from website : Website!AssociationWithoutContainment (website.cardinality <> #Many and website.targetCardinality = #Many)
	to orm : ORM!Association (
		associationRelationship <- #ManyToOne,
		opposite <- associationEnd,
		associationOwningEnd <- true
	),
	associationEnd : ORM!Association (
		name <- website.targetFeatureName(),
		displayLabel <- website.targetDisplayLabel(),
		partOf <- thisModule.findOrmEntity(website.targetEntity.name),
		cardinality <- website.targetCardinality,
		associationRelationship <- #OneToMany,
		opposite <- orm,
		associationOwningEnd <- false,
		isPrimaryKey <- website.targetPrimaryKey,
		visible <- website.bidirectional,
		pivotTableName <- website.createPivotTableName(),
		keys <- website.keys->collect(k | thisModule.OppositeAssociationKey(k))
	)
}

-- @extends Association
rule OneToManyAssociationWithoutContainment {
	from website : Website!AssociationWithoutContainment (website.cardinality = #Many and website.targetCardinality <> #Many)
	to orm : ORM!Association (
		associationRelationship <- #OneToMany,
		opposite <- associationEnd,
		associationOwningEnd <- false
	),
	associationEnd : ORM!Association (
		name <- website.targetFeatureName(),
		displayLabel <- website.targetDisplayLabel(),
		partOf <- thisModule.findOrmEntity(website.targetEntity.name),
		cardinality <- website.targetCardinality,
		associationRelationship <- #ManyToOne,
		opposite <- orm,
		associationOwningEnd <- true,
		isPrimaryKey <- website.targetPrimaryKey,
		visible <- website.bidirectional,
		columnName <-
			if not website.targetColumnName.oclIsUndefined() and website.targetColumnName <> '' then
				website.targetColumnName
			else
				website.targetFeatureName().createAssociationColumnName()
			endif,
		pivotTableName <- website.createPivotTableName(),
		keys <- website.keys->collect(k | thisModule.OppositeAssociationKey(k))
	)
}

-- @extends Association
rule ManyToManyAssociationWithoutContainment {
	from website : Website!AssociationWithoutContainment (website.cardinality = #Many and website.targetCardinality = #Many)
	to orm : ORM!Association (
		associationRelationship <- #ManyToMany,
		opposite <- associationEnd,
		associationOwningEnd <- true,
		columnName <-
			if not website.columnName.oclIsUndefined() and website.columnName <> '' then
				website.columnName
			else
				website.partOf.createEntityColumnName()
			endif
	),
	associationEnd : ORM!Association (
		name <- website.targetFeatureName(),
		displayLabel <- website.targetDisplayLabel(),
		partOf <- thisModule.findOrmEntity(website.targetEntity.name),
		cardinality <- website.targetCardinality,
		associationRelationship <- #ManyToMany,
		opposite <- orm,
		associationOwningEnd <- false,
		isPrimaryKey <- website.targetPrimaryKey,
		pivotTableName <- website.createPivotTableName(),
		keys <- website.keys->collect(k | thisModule.OppositeAssociationKey(k)),
		visible <- website.bidirectional,
		columnName <-
			if not website.targetColumnName.oclIsUndefined() and website.targetColumnName <> '' then
				website.targetColumnName
			else
				website.targetEntity.createEntityColumnName()
			endif
	)
}

-- @extends Association
rule OneToOneAssociationWithContainment {
	from website : Website!AssociationWithContainment (website.cardinality <> #Many)
	to orm : ORM!Association (
		associationRelationship <- #OneToOne,
		opposite <- associationEnd,
		associationContains <- true,
		visible <- website.sourceVisible
	),
	associationEnd : ORM!Association (
		name <- website.targetFeatureName(),
		displayLabel <- website.targetDisplayLabel(),
		partOf <- thisModule.findOrmEntity(website.targetEntity.name),
		associationRelationship <- #OneToOne,
		cardinality <- #Required,
		opposite <- orm,
		associationOwningEnd <- true,
		isPrimaryKey <- website.targetPrimaryKey,
		associationContainer <- true,
		visible <- website.bidirectional,
		columnName <-
			if not website.targetColumnName.oclIsUndefined() and website.targetColumnName <> '' then
				website.targetColumnName
			else
				website.targetFeatureName().createAssociationColumnName()
			endif,
		pivotTableName <- website.createPivotTableName(),
		keys <- website.keys->collect(k | thisModule.OppositeAssociationKey(k))
	)
}

-- @extends Association
rule OneToManyAssociationWithContainment {
	from website : Website!AssociationWithContainment (website.cardinality = #Many)
	to orm : ORM!Association (
		associationRelationship <- #OneToMany,
		opposite <- associationEnd,
		associationContains <- true,
		visible <- website.sourceVisible
	),
	associationEnd : ORM!Association (
		name <- website.targetFeatureName(),
		displayLabel <- website.targetDisplayLabel(),
		partOf <- thisModule.findOrmEntity(website.targetEntity.name),
		associationRelationship <- #ManyToOne,
		cardinality <- #Required,
		opposite <- orm,
		associationOwningEnd <- true,
		isPrimaryKey <- website.targetPrimaryKey,
		associationContainer <- true,
		visible <- website.bidirectional,
		columnName <-
			if not website.targetColumnName.oclIsUndefined() and website.targetColumnName <> '' then
				website.targetColumnName
			else
				website.targetFeatureName().createAssociationColumnName()
			endif,
		pivotTableName <- website.createPivotTableName(),
		keys <- website.keys->collect(k | thisModule.OppositeAssociationKey(k))
	)
}

rule AssocationKey {
	from website : Website!AssociationKey
	to orm : ORM!AssociationKey (
		sourceFeature <- website.sourceFeature,
		targetFeature <-
			if website.targetFeature.oclIsKindOf(Website!Attribute) then
				website.targetFeature
			else
				if website.keyFor.targetEntityX = website.keyFor.targetEntity then
					OclUndefined
				else
					website.targetFeature
				endif
			endif
	)
}

lazy rule OppositeAssociationKey {
	from website : Website!AssociationKey
	to orm : ORM!AssociationKey (
		sourceFeature <-
			if website.targetFeature.oclIsKindOf(Website!Attribute) then
				website.targetFeature
			else
				if website.keyFor.targetEntityX = website.keyFor.targetEntity then
					OclUndefined
				else
					website.targetFeature
				endif
			endif,
		targetFeature <- website.sourceFeature
	)
}