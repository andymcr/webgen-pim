-- @atlcompiler emftvm 
--
-- @path Website=/work.andycarpenter.webgen.pims.model/model/website.ecore
-- @path ORM=/work.andycarpenter.psms.orm/model/orm.xecore
-- @path WAF=/work.andycarpenter.psms.waf/model/Waf.xecore

module InterfaceExplicit;
create waf : WAF from website : Website, orm : ORM, security : Security, service : Service, api : API;

uses WebsiteHelpers;
uses AuthorisationExpression;
uses PersistenceHelpers;
uses InterfaceExpression;
uses InterfaceHelpers;


helper context String def: createName() : String
	= if self.trim().replaceAll('[A-Z]', '') = '' then
			self.trim()
		else
			self.trim().lowercaseFirst().replaceAll('([A-Z])', '_$1')
		endif;


abstract rule NamedElement {
	from website : Website!NamedElement
	to waf : WAF!NamedElement (
		name <- website.name
	)
}

-- @extends NamedElement
abstract rule NamedDisplayElement {
	from website : Website!NamedDisplayElement
	to waf : WAF!NamedDisplayElement (
		displayLabel <-
			if website.displayLabel.trim() <> '' then
				website.displayLabel.trim()
			else
				website.name.createLabel()
			endif
	)
}


rule WafModel {
	from website : Website!WebGenModel, orm : ORM!OrmModel, security : Security!SecurityModel, service : Service!ServiceModel, api : API!API
	to waf : WAF!WafModel (
		security <- security,
		persistence <- orm,
		business <- service,
		siteProperties <- website.websiteProperties,
		imageManipulations <-
			if not website.images.oclIsUndefined() then
				website.images.manipulations
			else
				Sequence{}
			endif,
		api <- api,
		navigation <- website.webUI.navigation,
		controllers <- website.webUI.controllers,
		useFormFloatingLabels <- thisModule.findWebsiteUI().useFormFloatingLabels,
		defaultCancelLabel <- thisModule.findWebsiteUI().defaultCancelLabel,
		defaultSaveLabel <- thisModule.findWebsiteUI().defaultSaveLabel,
		defaultPageClass <- thisModule.findWebsiteUI().defaultPageStyleClass,
		defaultUnitStyles <- thisModule.findWebsiteUI().defaultStyles,
		defaultCardsStyles <- thisModule.findWebsiteUI().defaultCardsStyles,
		defaultImageCardsStyles <- thisModule.findWebsiteUI().defaultImageCardsStyles,
		defaultDetailsStyles <- thisModule.findWebsiteUI().defaultDetailsStyles,
		defaultFormStyles <- thisModule.findWebsiteUI().defaultFormStyles,
		defaultGalleryStyles <- thisModule.findWebsiteUI().defaultGalleryStyles,
		defaultSliderStyles <- thisModule.findWebsiteUI().defaultSliderStyles,
		defaultStaticStyles <- thisModule.findWebsiteUI().defaultStaticStyles,
		defaultTabularStyles <- thisModule.findWebsiteUI().defaultTabularStyles
	)
}

rule SiteProperties {
	from website : Website!WebsiteProperties
	to waf : WAF!SiteProperties (
		siteName <- website.siteName,
		siteTitle <- website.siteTitle,
		locale <- website.locale,
		webmasterEmail <- website.webmasterEmail,
		copyrightText <-
			if not website.copyrightText.oclIsUndefined() and website.copyrightText <> '' then
				website.copyrightText
			else
				'&copy; '.concat(website.siteTitle).concat(' {{ \'now\' | date(\'Y\') }}')
			endif,
		metaDescription <- website.metaDescription,
		logoImage <- website.logoImage,
		logoFilters <- website.logoFilters,
		frameworkTechnology <- website.frameworkTechnology,
		useDbSessionStorage <- website.useDbSessionStorage,
		textEditorURL <-
			if website.textEditorURL.oclIsUndefined() then
				OclUndefined
			else
				website.textEditorURL.cleanString()
			endif,
		siteTemplate <- website.siteTemplate,
		securityFromEmail <- website.securityFromEmail,
		securityFromName <- website.securityFromName,
		staticUnitsEditable <- website.staticUnitsEditable
	)
}

rule Navigation {
	from website : Website!Navigation
	to waf : WAF!Navigation (
		menus <- website.menus,
		navbarClass <- website.navbarClass,
		authenticationMenuPlacement <- website.authenticationMenuPlacement,
		authenticationBarClass <- website.authenticationBarClass
	)
}

-- @extends NamedDisplayElement
rule Menu {
	from website : Website!Menu
	to waf : WAF!Menu (
		entries <- website.entries,
		styleClass <- website.styleClass.replaceAll(',', ' '),
		omitCaption <- website.omitCaption,
		captionClass <- website.captionClass.replaceAll(',', ' '),
		layoutClass <- website.layoutClass.replaceAll(',', ' ')
	)
}

abstract rule MenuEntry {
	from website : Website!MenuEntry
	to waf : WAF!MenuEntry (
	)
}

-- @extends MenuEntry, Menu
rule SubmenuEntry {
	from website : Website!SubmenuEntry
	to waf : WAF!SubmenuEntry (
		authorisation <- website.authorisation
	)
}

-- @extends MenuEntry, NamedDisplayElement
rule ActionMenuEntry {
	from website : Website!ActionMenuEntry
	to waf : WAF!ActionMenuEntry (
		action <- website.destination,
		alwaysVisible <- website.alwaysVisible
	)
}

-- @extends MenuEntry, NamedDisplayElement
rule EditStaticTextMenuEntry {
	from website : Website!EditStaticTextMenuEntry
	to waf : WAF!EditStaticTextMenuEntry (
	)
}

abstract rule ContentUnitStyles {
	from website : Website!ContentUnitStyles
	to waf : WAF!ContentUnitStyles (
		sectionClass <- website.sectionClass,
		captionClass <- website.captionClass,
		contentClass <- website.contentClass
	)
}

-- @extends ContentUnitStyles
abstract rule DynamicUnitStyles {
	from website : Website!DynamicUnitStyles
	to waf : WAF!DynamicUnitStyles (
		fieldListClass <- website.fieldListClass,
		definitionFieldListClass <- website.definitionFieldListClass,
		fieldLabelClass <- website.fieldLabelClass,
		fieldValueClass <- website.fieldValueClass,
		controlClass <- website.controlClass,
		actionClass <- website.anchorClass
	)
}

-- @extends DynamicUnitStyles
rule CollectionUnitStyles {
	from website : Website!CollectionUnitStyles
	to waf : WAF!CollectionUnitStyles (
		instanceControlClass <- website.instanceControlClass,
		instanceActionClass <- website.instanceActionClass
	)
}

-- @extends CollectionUnitStyles
rule DefaultUnitStyles {
	from website : Website!DefaultUnitStyles
	to waf : WAF!DefaultUnitStyles (
	)
}

-- @extends CollectionUnitStyles
rule CardsUnitStyles {
	from website : Website!CardsUnitStyles
	to waf : WAF!CardsUnitStyles (
		cardClass <- website.cardClass,
		cardHeaderClass <- website.cardHeaderClass,
		cardBodyClass <- website.cardBodyClass,
		cardFooterClass <- website.cardFooterClass,
		badgeClass <- website.badgeClass
	)
}

-- @extends CardsUnitStyles
rule ImageCardsUnitStyles {
	from website : Website!ImageCardsUnitStyles
	to waf : WAF!ImageCardsUnitStyles (
		imageActionClass <- website.imageActionClass
	)
}

-- @extends DynamicUnitStyles
rule DetailsUnitStyles {
	from website : Website!DetailsUnitStyles
	to waf : WAF!DetailsUnitStyles (
	)
}

-- @extends DynamicUnitStyles
rule FormUnitStyles {
	from website : Website!FormUnitStyles
	to waf : WAF!FormUnitStyles (
		inputGroupClass <- website.inputGroupClass
	)
}

-- @extends CollectionUnitStyles
rule GalleryUnitStyles {
	from website : Website!GalleryUnitStyles
	to waf : WAF!GalleryUnitStyles (
	)
}

-- @extends CollectionUnitStyles
rule SliderUnitStyles {
	from website : Website!SliderUnitStyles
	to waf : WAF!SliderUnitStyles (
	)
}

-- @extends ContentUnitStyles
rule StaticUnitStyles {
	from website : Website!StaticUnitStyles
	to waf : WAF!StaticUnitStyles (
	)
}

-- @extends CollectionUnitStyles
rule TabularUnitStyles {
	from website : Website!TabularUnitStyles
	to waf : WAF!TabularUnitStyles (
		headerClass <- website.headerClass,
		footerClass <- website.footerClass
	)
}


-- @extends NamedElement
rule ImageManipulation {
	from website : Website!ImageManipulation
	to waf : WAF!ImageManipulation (
		jpegQuality <- website.jpegQuality,
		filters <- website.filters
	)
}

abstract rule ImageFilter {
	from website : Website!ImageFilter
	to waf : WAF!ImageFilter (
	)
}

-- @extends ImageFilter
rule BackgroundFilter {
	from website : Website!BackgroundFilter
	to waf : WAF!BackgroundFilter (
		color <- website.color,
		width <- website.width,
		height <- website.height,
		position <- website.position
	)
}
-- @extends ImageFilter
rule ThumbnailFilter {
	from website : Website!ThumbnailFilter
	to waf : WAF!ThumbnailFilter (
		width <- website.width,
		height <- website.height,
		mode <- website.mode
	)
}


-- @extends NamedDisplayElement
abstract rule Controller {
	from website : Website!Controller
	to waf : WAF!Controller (
		uriElement <- website.uriElement.trim(),
		parentController <-
			if website.parentController.oclIsUndefined() then
				OclUndefined
			else
				website.parentController.targetController
			endif,
		units <- website.units,
		localPageClass <- '' -- website.
	)
}

-- @extends Controller
rule SinglePageController {
	from website : Website!SinglePageController
	to waf : WAF!SinglePageController (
	)
}

-- @extends Controller
rule MultiPageController {
	from website : Website!MultiPageController
	to waf : WAF!MultiPageController (
	)
}


-- @extends NamedDisplayElement
abstract rule ContentUnit {
	from website : Website!ContentUnit
	to waf : WAF!ContentUnit (
		uriElement <-
			if website.uriElement.trim() <> '' then
				website.uriElement.trim()
			else if website.createDefaultUriElement then
				website.name.createName()
			else
				''
			endif endif,
		uriParent <- website.uriParent,
		authorisation <- website.authorisation,
		purposeSummary <- website.purposeSummary,
		alternative <- website.alternative,
		omitCaption <- website.omitCaption,
		localSectionClass <- website.localSectionClass,
		localCaptionClass <- website.localCaptionClass,
		localContentClass <- website.localContentClass
	)
}

-- @extends ContentUnit
rule StaticUnit {
	from website : Website!StaticUnit
	to waf : WAF!StaticUnit (
		content <- website.content
	)
}


-- @extends ContentUnit, ActionContainer
abstract rule DynamicUnit {
	from website : Website!DynamicUnit
	to waf : WAF!DynamicUnit (
		contentType <- website.contentType.findOrmEntity(),
		routeActuals <- website.routeActuals,
		displayFields <- website.displayFields,
		hideWhen <- website.hideWhen,
		messageWhenHidden <- website.messageWhenHidden,
		allActions <- website.actions,
		footer <- website.footer,
		localFieldListClass <- website.localFieldListClass,
		localFieldLabelClass <- website.localFieldLabelClass,
		localFieldValueClass <- website.localFieldValueClass,
		localControlClass <- website.localControlClass,
		localActionClass <- website.localAnchorClass
	)
}

rule RouteActual {
	from website : Website!RouteActual
	to waf : WAF!RouteActual (
		routeParameter <- website.routeParameter.findOrmFeature(),
		value <- website.value
	)
}

abstract rule UnitField {
	from website : Website!UnitField
	to waf : WAF!UnitField (
		localHelp <- website.help,
		authorisation <- website.authorisation,
		hideWhen <- website.hideWhen,
		escapeHTML <- website.escapeHTML,
		collectionDisplayOption <- website.collectionDisplayOption,
		truncate <- website.truncate,
		dateFormat <- website.dateFormat(),
		disabledInput <- website.disableInput,
		localInputGroupClass <- website.localInputGroupClass,
		localFieldLabelClass <- website.localFieldLabelClass,
		localFieldValueClass <- website.localFieldValueClass
	)
}

-- @extends UnitField, ActionContainer
abstract rule UnitFeature {
	from website : Website!UnitFeature
	to waf : WAF!UnitFeature (
		displayLabel <- website.displayLabel,
		titleOverride <- website.title,
		forcedValue <- website.forcedValue,
		collectionUiAllowAdd <- website.collectionUiAllowAdd,
		collectionUiAllowRemove <- website.collectionUiAllowRemove,
		collectionMaximumValues <- website.collectionMaximumValues,
		defaultDisplay <- website.defaultDisplayValue(),
		displayDefaultWhen <- website.displayDefaultWhen,
		emptyCollectionDisplay <- website.emptyCollectionDisplay(),
		autofocus <- website.autofocus,
		footer <- website.footer
	)
}

-- @extends UnitFeature
rule UnitAttribute {
	from website : Website!UnitElement
	to waf : WAF!UnitAttribute (
		attribute <-
			if website.attribute.oclIsUndefined() then
				OclUndefined
			else
				website.attribute.findOrmFeature()
			endif,
		attributeDefaultValue <- website.defaultValue,
		obfuscateFormFields <- website.obfuscateFormFields,
		placeholderOverride <- website.placeholder,
		validationPattern <- website.validationPattern
	)
}

-- @extends UnitFeature
rule UnitResource {
	from website : Website!UnitResource
	to waf : WAF!UnitResource (
		resource <-
			if website.resource.oclIsUndefined() then
				OclUndefined
			else
				website.resource.findOrmFeature()
			endif,
		isDeletable <- website.isDeletable,
		isDownloadable <- website.isDownloadable,
		showImageWhenEditing <- website.showImageWhenEditing,
		imageFilter <- website.imageFilter
	)
}

-- @extends UnitFeature, AssociationPathElement
rule UnitAssociation {
	from website : Website!UnitAssociation
	to waf : WAF!UnitAssociation (
		options <-
			if website.options.oclIsUndefined() then
				website.options
			else
				website.options.findSelection()
			endif,
		collectionSortBy <-
			if website.collectionSortBy.oclIsUndefined() then
				website.collectionSortBy
			else
				website.collectionSortBy.findOrmFeature()
			endif,
		useAutocomplete <- website.useAutocomplete
	)
}

-- @extends UnitField
rule UnitLabel {
	from website : Website!UnitLabel
	to waf : WAF!UnitLabel (
		label <- website.label.findOrmLabel()
	)
}

-- @extends UnitField, NamedElement
abstract rule InterfaceField {
	from website : Website!InterfaceField
	to waf : WAF!InterfaceField (
		fieldRequired <- website.required,
		fieldDefaultValue <- website.defaultValue,
		mustMatch <- website.mustMatch,
		fieldTitle <- website.title,
		fieldPlaceholder <- website.placeholder,
		validationPattern <- website.validationPattern(),
		repeatedField <- website.repeatedField,
		secondDisplayLabel <- website.secondDisplayLabel,
		secondPlaceholder <- website.secondPlaceholder,
		secondHelp <- website.secondHelp
	)
}

-- @extends InterfaceField
rule DataTypeField {
	from website : Website!DataTypeField
	to waf : WAF!DataTypeField (
		dataType <- thisModule.findOrmDataType(website.dataType.name),
--		caseInsensitive <- website.caseInsensitive,
		obfuscateFormFields <- website.obfuscateFormFields,
		encrypt <- website.encrypt
	)
}

-- @extends InterfaceField
rule DateField {
	from website : Website!DateField
	to waf : WAF!DateField (
		details <- website.details,
		format <- website.format
	)
}

abstract rule SelectableUnit {
	from website : Website!SelectableUnit
	to waf : WAF!SelectableUnit (
	)
}


-- @extends DynamicUnit
abstract rule SingletonUnit {
	from website : Website!SingletonUnit
	to waf : WAF!SingletonUnit (
		title <-
			if website.title.oclIsUndefined() then
				website.title
			else
				website.title.findOrmLabel()
			endif
	)
}


-- @extends DynamicUnit, SelectableUnit
abstract rule CollectionUnit {
	from website : Website!CollectionUnit
	to waf : WAF!CollectionUnit (
		unitTitle <-
			if website.unitTitle.oclIsUndefined() then
				website.unitTitle
			else
				website.unitTitle.findOrmLabel()
			endif,
		elementTitle <- website.elementTitle,
		truncateElementTitle <- website.truncateElementTitle,
		selection <-
			if website.selection.oclIsUndefined() then
				website.selection
			else
				website.selection.findSelection()
			endif,
		findContainerSelection <-
			if website.findContainerSelection.oclIsUndefined() then
				website.findContainerSelection
			else
				website.findContainerSelection.findSelection()
			endif,
		findElementSelection <-
			if website.findElementSelection.oclIsUndefined() then
				website.findElementSelection
			else
				website.findElementSelection.findSelection()
			endif,
		filter <-
			if website.filter.oclIsUndefined() then
				website.filter
			else
				website.filter.findFilter()
			endif,
		supportedFilters <-	website.supportedFilters->collect(f | f.findFilter()),
		omitFieldLabels <- website.omitFieldLabels,
		defaultPaginationSize <- website.defaultPaginationSize,
		maximumPaginationSize <- website.maximumPaginationSize,
		emptyMessage <- website.emptyMessage
	)
}


-- @extends SingletonUnit
abstract rule EditUnit {
	from website : Website!EditUnit
	to waf : WAF!EditUnit (
		useCaptcha <- website.useCaptcha,
		disableWhen <- website.disableWhen,
		uriElement <-
			if website.uriElement.trim() <> '' then
				website.uriElement.trim()
			else if website.createDefaultUriElement then
				'create'
			else
				''
			endif endif,
		confirmDestination <- website.confirmDestination,
		confirmLabel <-
			if not website.confirmLabel.oclIsUndefined() and website.confirmLabel <> '' then
				website.confirmLabel
			else
				if  website.oclIsTypeOf(Website!CreateUnit) then
					'Create'
				else if  website.oclIsTypeOf(Website!CreateUpdateUnit) then
					'Save'
				else if  website.oclIsTypeOf(Website!UpdateUnit) then
					'Update'
				else if  website.oclIsTypeOf(Website!MapUnit) then
					'Save'
				else
					'Edit'
				endif endif endif endif
			endif,
		confirmMessage <- website.confirmMessage,
		successMessage <- website.successMessage,
		cancelDestination <- website.cancelDestination,
		cancelLabel <-
			if not website.cancelLabel.oclIsUndefined() and website.cancelLabel <> '' then
				website.confirmLabel
			else
				'Cancel'
			endif
	)
}

-- @extends EditUnit
rule CreateUnit {
	from website : Website!CreateUnit
	to waf : WAF!CreateUnit (
		uriElement <-
			if website.uriElement.trim() <> '' then
				website.uriElement.trim()
			else if website.createDefaultUriElement then
				'create'
			else
				''
			endif endif
	)
}

-- @extends EditUnit, SelectableUnit
rule UpdateUnit {
	from website : Website!UpdateUnit
	to waf : WAF!UpdateUnit (
		onSaveContinueEditing <- website.onSaveContinueEditing,
		displayEmptyForm <- website.displayEmptyForm
	)
}

-- @extends EditUnit, SelectableUnit
rule CreateUpdateUnit {
	from website : Website!CreateUpdateUnit
	to waf : WAF!CreateUpdateUnit (
		onSaveContinueEditing <- website.onSaveContinueEditing,
		updateUriElement <-
			if website.updateUriElement.trim() <> '' then
				website.updateUriElement.trim()
			else
				'update'
			endif,
		clearLabel <- website.clearLabel
	)
}

-- @extends EditUnit, SelectableUnit
rule MapUnit {
	from website : Website!MapUnit
	to waf : WAF!MapUnit (
		readOnly <- website.readOnly,
		defaultZoomLevel <- website.defaultZoomLevel,
		location <- website.location.findOrmFeature(),
		placeName <-
			if website.placeName.oclIsUndefined() then
				website.placeName
			else
				website.placeName.findOrmFeature()
			endif
	)
}

-- @extends SingletonUnit, SelectableUnit
rule DetailsUnit {
	from website : Website!DetailsUnit
	to waf : WAF!DetailsUnit (
		selection <-
			if website.selection.oclIsUndefined() then
				website.selection
			else
				website.selection.findSelection()
			endif,
		omitFieldLabels <- website.omitFieldLabels
	)
}

-- @extends CollectionUnit
rule TabularUnit {
	from website : Website!TabularUnit
	to waf : WAF!TabularUnit (
		header <- website.header,
		localHeaderClass <- website.headerClassOverride,
		localFooterClass <- website.footerClassOverride,
		rowClasses <- website.rowClasses,
		localInstanceControlClass <- website.localInstanceControlClass,
		localInstanceActionClass <- website.localInstanceActionClass
	)
}

-- @extends CollectionUnit
abstract rule CardsUnit {
	from website : Website!CardsUnit
	to waf : WAF!CardsUnit (
		badges <- website.badges,
		overlaySingleSelectAction <- website.overlaySingleSelectAction,
		localCardClass <- website.localCardClass,
		localCardHeaderClass <- website.localCardHeaderClass,
		localCardBodyClass <- website.localCardBodyClass,
		localCardFooterClass <- website.localCardFooterClass,
		localBadgeClass <- website.localBadgeClass
	)
}

rule Badge {
	from website : Website!Badge
	to waf : WAF!Badge (
		iconName <- website.iconName,
		value <- website.value,
		title <-
			if website.title.oclIsUndefined() then
				OclUndefined
			else
				website.title.findOrmLabel()
			endif,
		displayWhen <- website.displayWhen,
		localBadgeClass <- website.localBadgeClass
	)
}


-- @extends CardsUnit
rule TextCardsUnit {
	from website : Website!TextCardsUnit
	to waf : WAF!TextCardsUnit (
	)
}

-- @extends CardsUnit
rule DateCardsUnit {
	from website : Website!DateCardsUnit
	to waf : WAF!DateCardsUnit (
		elementDate <- website.elementDate
	)
}

abstract rule ImageUnit {
	from website : Website!ImageUnit
	to waf : WAF!ImageUnit (
		imageFeaturePath <- website.imagePathFeature,
		missingImagePath <- website.missingImagePath,
		showMissingImageWhen <- website.showMissingImageWhen,
		imageFilter <- website.imageFilter
	)
}

-- @extends CardsUnit, ImageUnit
rule ImageCardsUnit {
	from website : Website!ImageCardsUnit
	to waf : WAF!ImageCardsUnit (
		enableImageEnlargement <- website.enableImageEnlargement,
		overlayTitle <- website.overlayTitle,
		revealUntruncatedContent <- website.revealUntruncatedContent
	)
}

-- @extends CollectionUnit, ImageUnit
rule SliderUnit {
	from website : Website!SliderUnit
	to waf : WAF!SliderUnit (
		showTime <- website.showTime,
		transitionTime <- website.transitionTime
	)
}

-- @extends CollectionUnit, ImageUnit
rule GalleryUnit {
	from website : Website!GalleryUnit
	to waf : WAF!GalleryUnit (
		fullSizeFilter <- website.fullSizeFilter,
		showTime <- website.showTime,
		transitionTime <- website.transitionTime
	)
}

-- @extends DynamicUnit
abstract rule ControlUnit {
	from website : Website!ControlUnit
	to waf : WAF!ControlUnit (
		submitLabel <-
			if not website.submitLabel.oclIsUndefined() and website.submitLabel <> '' then
				website.submitLabel
			else
				if  website.oclIsKindOf(Website!SearchUnit) then
					'Search'
				else
					'Control'
				endif
			endif,
		cancelDestination <- website.cancelDestination,
		cancelLabel <- website.cancelLabel
	)
}

-- @extends ControlUnit
rule SearchUnit {
	from website : Website!SearchUnit
	to waf : WAF!SearchUnit (
		resultsDestination <- website.resultsDestination
	)
}


abstract rule Path {
	from website : Website!Path (website.isInterfaceExpression())
	to waf : WAF!Path (
	)
}

-- @extends Path
abstract rule AssociationPathElement {
	from website : Website!AssociationPathElement (website.isInterfaceExpression())
	to waf : WAF!AssociationPathElement (
		association <- 
			if website.association.oclIsUndefined() then
				OclUndefined
			else 
				website.associationSource.findOrmEntity()
					.getOrmFeature(website.sourceName())
			endif,
		valueDisplay <-
			if website.valueDisplay.oclIsUndefined() then
				OclUndefined
			else
				website.valueDisplay.findOrmLabel()
			endif,
		childFeature <- website.childFeature
	)
}

-- @extends Path
abstract rule AttributePathElement {
	from website : Website!AttributePathElement (website.isInterfaceExpression())
	to waf : WAF!AttributePathElement (
		attribute <- 
			if website.attribute.oclIsUndefined() then
				OclUndefined
			else
				website.attribute.findOrmFeature()
			endif
	)
}

-- @extends Path
abstract rule ResourcePathElement {
	from website : Website!ResourcePathElement (website.isInterfaceExpression())
	to waf : WAF!ResourcePathElement (
		resource <- 
			if website.resource.oclIsUndefined() then
				OclUndefined
			else
				website.resource.findOrmFeature()
			endif
	)
}

abstract rule ChildFeature {
	from website : Website!ChildFeature (website.isInterfaceExpression())
	to waf : WAF!ChildFeature (
	)
}

-- @extends ChildFeature, AssociationPathElement
rule ChildAssociation {
	from website : Website!ChildAssociation (website.isInterfaceExpression())
	to waf : WAF!ChildAssociation (
	)
}

-- @extends ChildFeature, AttributePathElement
rule ChildAttribute {
	from website : Website!ChildAttribute (website.isInterfaceExpression())
	to waf : WAF!ChildAttribute (
	)
}

-- @extends ChildFeature, ResourcePathElement
rule ChildResource {
	from website : Website!ChildResource (website.isInterfaceExpression())
	to waf : WAF!ChildResource (
	)
}

abstract rule FeatureVariable {
	from website : Website!FeatureVariable (website.isInterfaceExpression())
	to waf : WAF!FeatureVariable (
	)
}

-- @extends FeatureVariable, AssociationPathElement
rule AssociationVariable {
	from website : Website!AssociationVariable (website.isInterfaceExpression())
	to waf : WAF!AssociationVariable (
	)
}

-- @extends FeatureVariable, AttributePathElement
rule AttributeVariable {
	from website : Website!AttributeVariable (website.isInterfaceExpression())
	to waf : WAF!AttributeVariable (
	)
}

-- @extends FeatureVariable, ResourcePathElement
rule ResourceVariable {
	from website : Website!ResourceVariable (website.isInterfaceExpression())
	to waf : WAF!ResourceVariable (
	)
}

-- @extends Variable
rule ParameterVariable {
	from website : Website!ParameterVariable (website.isInterfaceExpression())
	to waf : WAF!ParameterVariable (
		formal <- website.formal,
		childFeature <- website.childFeature
	)
}


abstract rule DisplayValue {
	from website : Website!DisplayValue (website.isInterfaceExpression())
	to waf : WAF!DisplayValue (
	)
}

-- @extends AssociationPathElement, DisplayValue
rule AssociationDisplayValue {
	from website : Website!AssociationDisplayValue (website.isInterfaceExpression())
	to waf : WAF!AssociationDisplayValue (
	)
}

-- @extends AttributePathElement, DisplayValue
rule AttributeDisplayValue {
	from website : Website!AttributeDisplayValue (website.isInterfaceExpression())
	to waf : WAF!AttributeDisplayValue (
	)
}

-- @extends DisplayValue
rule LabelDisplayValue {
	from website : Website!LabelDisplayValue (website.isInterfaceExpression())
	to waf : WAF!LabelDisplayValue (
		label <- website.label.findOrmLabel()
	)
}

-- @extends ResourcePathElement, DisplayValue
rule ResourceDisplayValue {
	from website : Website!ResourceDisplayValue (website.isInterfaceExpression())
	to waf : WAF!ResourceDisplayValue (
	)
}


abstract rule ActionContainer {
	from website : Website!ActionContainer
	to waf : WAF!ActionContainer (
		containerActionsPlacement <- website.containerActionsPlacement,
		instanceActionsPlacement <- website.instanceActionsPlacement,
		allActions <- website.actions
	)
}

-- @extends NamedDisplayElement
abstract rule Action {
	from website : Website!Action
	to waf : WAF!Action (
		iconName <- website.iconName,
		disable <- website.disable,
		displayWhen <- website.displayWhen,
		enableWhen <- website.enableWhen,
		confirmMessage <- website.confirmMessage,
		successMessage <- website.successMessage,
		failureMessage <- website.failureMessage,
		disabledMessage <- website.disabledMessage,
		localActionClass <- website.actionClass
	)
}

-- @extends Action
rule DeleteAction {
	from website : Website!DeleteAction 
	to waf : WAF!DeleteAction (
		confirmMessage <-
			if website.confirmMessage.trim() <> '' then
				website.confirmMessage.trim()
			else if website.displayLabel.trim() <> '' then
				website.displayLabel.trim().concat('?')
			else
				website.name.createLabel().concat('?')
			endif endif,
		localAuthorisation <- website.authorisation,
		uriElement <-
			if website.uriElement <> '' then
				website.uriElement
			else
				website.name.createName()
			endif
	)
}

-- @extends Action
abstract rule SelectAction {
	from website : Website!SelectAction
	to waf : WAF!SelectAction (
		target <- website.target,
		valuePath <- website.valuePath
	)
}

-- @extends SelectAction
rule ContainerSelectAction {
	from website : Website!ContainerSelectAction
	to waf : WAF!ContainerSelectAction (
	)
}

-- @extends SelectAction
rule InstanceSelectAction {
	from website : Website!InstanceSelectAction
	to waf : WAF!InstanceSelectAction (
	)
}

-- @extends SelectAction
rule TargetAction {
	from website : Website!TargetAction
	to waf : WAF!TargetAction (
	)
}

-- @extends Action
abstract rule OperationAction {
	from website : Website!OperationAction 
	to waf : WAF!OperationAction (
		operation <-
			if website.operation.oclIsUndefined() then
				website.operation
			else
				website.operation.findBusinessOperation()
			endif,
		localAuthorisation <- website.authorisation,
		uriElement <-
			if website.uriElement <> '' then
				website.uriElement
			else
				website.name.createName()
			endif
	)
}

-- @extends OperationAction
rule InstanceOperationAction {
	from website : Website!InstanceOperationAction 
	to waf : WAF!InstanceOperationAction (
	)
}

-- @extends OperationAction
rule ContainerOperationAction {
	from website : Website!ContainerOperationAction 
	to waf : WAF!ContainerOperationAction (
	)
}

-- @extends OperationAction
rule GeneralOperationAction {
	from website : Website!GeneralOperationAction 
	to waf : WAF!GeneralOperationAction (
	)
}


rule ConstantReference {
	from website : Website!ConstantReference (website.isInterfaceExpression())
	to waf : WAF!ConstantReference (
		value <-
			if website.value.oclIsUndefined() then
				website.value
			else
				website.value.findServiceConstant()
			endif
	)
}


rule Message {
	from website : Website!Message
	to waf : WAF!Message (
		text <- website.text,
		features <- website.features
	)
}