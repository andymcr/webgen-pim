-- @atlcompiler emftvm 
--
-- @path Website=/work.andycarpenter.webgen.pims.model/model/website.ecore
-- @path ORM=/work.andycarpenter.psms.orm/model/orm.xecore
-- @path WAF=/work.andycarpenter.psms.waf/model/Waf.xecore

module InterfaceExplicit;
create waf : WAF from website : Website, orm : ORM, service : Service, api : API;

uses WebsiteHelpers;
uses PersistenceHelpers;
uses InterfaceExpression;
uses InterfaceHelpers;


helper context String def: createName() : String
	= if self.trim().replaceAll('[A-Z]', '') = '' then
			self.trim()
		else
			self.trim().lowercaseFirst().replaceAll('([A-Z])', '_$1')
		endif;


abstract rule NamedElement {
	from website : Website!NamedElement
	to waf : WAF!NamedElement (
		name <- website.name
	)
}

-- @extends NamedElement
abstract rule NamedDisplayElement {
	from website : Website!NamedDisplayElement
	to waf : WAF!NamedDisplayElement (
		displayLabel <-
			if not website.displayLabel.oclIsUndefined() and website.displayLabel.trim() <> '' then
				website.displayLabel.trim()
			else
				website.name.createLabel()
			endif
	)
}


rule WafModel {
	from website : Website!WebGenModel, orm : ORM!OrmModel, service : Service!ServiceModel, api : API!API
	to waf : WAF!WafModel (
		persistence <- orm,
		business <- service,
		imageManipulations <-
			if not website.images.oclIsUndefined() then
				website.images.manipulations
			else
				Sequence{}
			endif,
		api <- api,
		menus <- website.webUI.menus,
		pages <- website.webUI.pages,
		siteName <- 'sps',
		siteTitle <- website.websiteProperties.siteTitle,
		webmasterEmail <- website.websiteProperties.webmasterEmail,
		copyrightText <-
			if not website.websiteProperties.copyrightText.oclIsUndefined() and website.websiteProperties.copyrightText <> '' then
				website.websiteProperties.copyrightText
			else
				'&copy; '.concat(website.websiteProperties.siteTitle).concat(' {{ \'now\' | date(\'Y\') }}')
			endif,
		metaDescription <- website.websiteProperties.metaDescription,
		logoImage <- website.websiteProperties.logoImage,
		logoFilters <- website.websiteProperties.logoFilters,
		frameworkTechnology <- website.frameworkTechnology,
		useDbSessionStorage <- website.websiteProperties.useDbSessionStorage,
		inputTechnology <- thisModule.findWebsiteUI().inputTechnology,
		ajaxTechnology <- thisModule.findWebsiteUI().ajaxTechnology,
		defaultCancelLabel <- thisModule.findWebsiteUI().defaultCancelLabel,
		defaultSaveLabel <- thisModule.findWebsiteUI().defaultSaveLabel,
		textEditorURL <-
			if website.websiteProperties.textEditorURL.oclIsUndefined() then
				OclUndefined
			else
				website.websiteProperties.textEditorURL.cleanString()
			endif,
		topNavigationId <- website.websiteProperties.topNavigationId,
		siteTemplate <- website.websiteProperties.siteTemplate,
		staticUnitsEditable <- website.websiteProperties.staticUnitsEditable,
		defaultStyleClass <- thisModule.findWebsiteUI().defaultStyleClass,
		defaultSectionClass <- thisModule.findWebsiteUI().defaultSectionClass,
		defaultCaptionClass <- thisModule.findWebsiteUI().defaultCaptionClass,
		defaultContentClass <- thisModule.findWebsiteUI().defaultContentClass,
		defaultCardsContentClass <- thisModule.findWebsiteUI().defaultCardsContentClass,
		defaultDetailsContentClass <- thisModule.findWebsiteUI().defaultDetailsContentClass,
		defaultFormContentClass <- thisModule.findWebsiteUI().defaultFormContentClass,
		defaultGalleryContentClass <- thisModule.findWebsiteUI().defaultGalleryContentClass,
		defaultIndexContentClass <- thisModule.findWebsiteUI().defaultIndexContentClass,
		defaultSliderContentClass <- thisModule.findWebsiteUI().defaultSliderContentClass,
		defaultStaticContentClass <- thisModule.findWebsiteUI().defaultStaticContentClass,
		defaultFieldListClass <- thisModule.findWebsiteUI().defaultFieldListClass,
		defaultRowClass <- thisModule.findWebsiteUI().defaultRowClass,
		defaultColumnClass <- thisModule.findWebsiteUI().defaultColumnClass,
		defaultCardClass <- thisModule.findWebsiteUI().defaultCardClass,
		defaultCardHeaderClass <- thisModule.findWebsiteUI().defaultCardHeaderClass,
		defaultCardBodyClass <- thisModule.findWebsiteUI().defaultCardBodyClass,
		defaultCardFooterClass <- thisModule.findWebsiteUI().defaultCardFooterClass,
		defaultControlClass <- thisModule.findWebsiteUI().defaultControlClass,
		defaultCardsControlClass <- thisModule.findWebsiteUI().defaultCardsControlClass,
		defaultDetailsControlClass <- thisModule.findWebsiteUI().defaultDetailsControlClass,
		defaultFormControlClass <- thisModule.findWebsiteUI().defaultFormControlClass,
		defaultGalleryControlClass <- thisModule.findWebsiteUI().defaultGalleryControlClass,
		defaultIndexControlClass <- thisModule.findWebsiteUI().defaultIndexControlClass,
		defaultSliderControlClass <- thisModule.findWebsiteUI().defaultSliderControlClass,
		defaultStaticControlClass <- thisModule.findWebsiteUI().defaultStaticControlClass,
		defaultFieldLabelClass <- thisModule.findWebsiteUI().defaultFieldLabelClass,
		defaultInputGroupClass <- thisModule.findWebsiteUI().defaultInputGroupClass,
--		defaultCardsFieldLabelClass <- thisModule.findWebsiteUI().defaultCardsFieldLabelClass,
--		defaultDetailsFieldLabelClass <- thisModule.findWebsiteUI().defaultDetailsFieldLabelClass,
--		defaultFormFieldLabelClass <- thisModule.findWebsiteUI().defaultFormFieldLabelClass,
--		defaultGalleryFieldLabelClass <- thisModule.findWebsiteUI().defaultGalleryFieldLabelClass,
--		defaultIndexFieldLabelClass <- thisModule.findWebsiteUI().defaultIndexFieldLabelClass,
--		defaultSliderFieldLabelClass <- thisModule.findWebsiteUI().defaultSliderFieldLabelClass,
		defaultFieldValueClass <- thisModule.findWebsiteUI().defaultFieldValueClass,
--		defaultCardsFieldValueClass <- thisModule.findWebsiteUI().defaultCardsFieldValueClass,
--		defaultDetailsFieldValueClass <- thisModule.findWebsiteUI().defaultDetailsFieldValueClass,
--		defaultFormFieldValueClass <- thisModule.findWebsiteUI().defaultFormFieldValueClass,
--		defaultGalleryFieldValueClass <- thisModule.findWebsiteUI().defaultGalleryFieldValueClass,
--		defaultIndexFieldValueClass <- thisModule.findWebsiteUI().defaultIndexFieldValueClass,
--		defaultSliderFieldValueClass <- thisModule.findWebsiteUI().defaultSliderFieldValueClass,
		defaultActionNavigationClass <- thisModule.findWebsiteUI().defaultActionNavigationClass,
		defaultAnchorClass <- thisModule.findWebsiteUI().defaultAnchorClass,
		defaultCardsAnchorClass <- thisModule.findWebsiteUI().defaultCardsAnchorClass,
		defaultDetailsAnchorClass <- thisModule.findWebsiteUI().defaultDetailsAnchorClass,
		defaultFormAnchorClass <- thisModule.findWebsiteUI().defaultFormAnchorClass,
		defaultGalleryAnchorClass <- thisModule.findWebsiteUI().defaultGalleryAnchorClass,
		defaultIndexAnchorClass <- thisModule.findWebsiteUI().defaultIndexAnchorClass,
		defaultSliderAnchorClass <- thisModule.findWebsiteUI().defaultSliderAnchorClass,
		defaultStaticAnchorClass <- thisModule.findWebsiteUI().defaultStaticAnchorClass
	)
}


-- @extends NamedElement
rule ImageManipulation {
	from website : Website!ImageManipulation
	to waf : WAF!ImageManipulation (
		jpegQuality <- website.jpegQuality,
		filters <- website.filters
	)
}

abstract rule ImageFilter {
	from website : Website!ImageFilter
	to waf : WAF!ImageFilter (
	)
}

-- @extends ImageFilter
rule BackgroundFilter {
	from website : Website!BackgroundFilter
	to waf : WAF!BackgroundFilter (
		color <- website.color,
		width <- website.width,
		height <- website.height,
		position <- website.position
	)
}
-- @extends ImageFilter
rule ThumbnailFilter {
	from website : Website!ThumbnailFilter
	to waf : WAF!ThumbnailFilter (
		width <- website.width,
		height <- website.height,
		mode <- website.mode
	)
}



-- @extends NamedDisplayElement
rule Menu {
	from website : Website!Menu
	to waf : WAF!Menu (
		entries <- website.entries,
		styleClass <- website.styleClass.replaceAll(',', ' '),
		omitCaption <- website.omitCaption,
		captionClass <- website.captionClass.replaceAll(',', ' '),
		layoutClass <- website.layoutClass.replaceAll(',', ' ')
	)
}

abstract rule MenuEntry {
	from website : Website!MenuEntry
	to waf : WAF!MenuEntry (
	)
}

-- @extends MenuEntry, Menu
rule SubmenuEntry {
	from website : Website!SubmenuEntry
	to waf : WAF!SubmenuEntry (
		authorisationRoles <- website.requiresRole
	)
}

-- @extends MenuEntry, NamedDisplayElement
rule ActionMenuEntry {
	from website : Website!ActionMenuEntry
	to waf : WAF!ActionMenuEntry (
		action <- website.destination,
		"query" <- website."query"
	)
}

-- @extends MenuEntry, NamedDisplayElement
rule EditStaticTextMenuEntry {
	from website : Website!EditStaticTextMenuEntry
	to waf : WAF!EditStaticTextMenuEntry (
	)
}

-- @extends NamedDisplayElement
rule Page {
	from website : Website!Page
	to waf : WAF!Page (
		uriElement <- website.uriElement.trim(),
		parentPage <-
			if website.parentPage.oclIsUndefined() then
				OclUndefined
			else
				website.parentPage.targetPage
			endif,
		units <- website.units,
		localStyleClass <- website.styleClass
	)
}


rule Query {
	from website : Website!Query
	to waf : WAF!Query (
		filter <- website.filter,
		parameters <- website.parameters
	)
}

rule QueryParameter {
	from website : Website!QueryParameter
	to waf : WAF!QueryParameter (
		formal <- website.formal,
		value <- website.value
	)
}

-- @extends NamedDisplayElement
abstract rule ContentUnit {
	from website : Website!ContentUnit
	to waf : WAF!ContentUnit (
		uriElement <-
			if website.uriElement.trim() <> '' then
				website.uriElement.trim()
			else if website.createDefaultUriElement then
				website.name.createName()
			else
				''
			endif endif,
		routeActuals <- website.routeActuals,
		authorisationRoles <- website.requiresRole,
		purposeSummary <- website.purposeSummary,
		alternative <- website.alternative,
		localSectionClass <- website.sectionClass,
		omitCaption <- website.omitCaption,
		localCaptionClass <- website.captionClass,
		localContentClass <- website.contentClass
	)
}

rule RouteActual {
	from website : Website!RouteActual
	to waf : WAF!RouteActual (
		routeParameter <- website.routeParameter.findOrmAttribute(),
		value <- website.value
	)
}

-- @extends ContentUnit
rule StaticUnit {
	from website : Website!StaticUnit
	to waf : WAF!StaticUnit (
		content <- website.content
	)
}


-- @extends ContentUnit, ActionContainer
abstract rule DynamicUnit {
	from website : Website!DynamicUnit
	to waf : WAF!DynamicUnit (
		displayFields <- website.displayFields,
		repositoriesUsed <- website.findRepositoriesUsed(),
		servicesUsed <- website.findServicesUsed(),
		hideWhen <- website.hideWhen,
		messageWhenHidden <- website.messageWhenHidden(),
		allActions <- website.actions,
		header <- website.header,
		footer <- website.footer,
		headerClass <- website.headerClass,
		localFieldListClass <- website.fieldListClass,
--		localFieldLabelClass <- website.fieldLabelClass,
--		localFieldValueClass <- website.fieldValueClass,
		localControlClass <- website.controlClass,
--		localAnchorClass <- website.anchorClass,
		footerClass <- website.footerClass
	)
}

abstract rule UnitField {
	from website : Website!UnitField
	to waf : WAF!UnitField (
		displayLabel <- website.displayLabel(),
		hasCustomisedDisplayLabel <- website.hasCustomisedDisplayLabel(),
		title <- website.title(),
		hasCustomisedTitle <- website.title() <> website.displayLabel(),
		authorisationRoles <- website.requiresRole,
		hideWhen <- website.hideWhen,
		escapeHTML <- website.escapeHTML,
		collectionDisplayOption <- website.collectionDisplayOption,
		truncate <- website.truncate,
		dateFormat <- website.dateFormat(),
		disabledInput <- website.disableInput
	)
}

-- @extends UnitField, ActionContainer
abstract rule UnitFeature {
	from website : Website!UnitFeature
	to waf : WAF!UnitFeature (
		forcedValue <- website.forcedValue,
		collectionUiAllowAdd <- website.collectionUiAllowAdd,
		collectionUiAllowRemove <- website.collectionUiAllowRemove,
		defaultDisplayValue <- website.defaultDisplayValue(),
		displayDefaultWhen <- website.displayDefaultWhen,
		emptyDisplayValue <- website.emptyDisplayValue(),
		autofocus <- website.autofocus,
		footer <- website.footer,
		headerClass <- website.headerClass,
		localFieldLabelClass <- website.fieldLabelClass,
		localFieldValueClass <- website.fieldValueClass,
		localInputGroupClass <- website.inputGroupClass,
		footerClass <- website.footerClass
	)
}

-- @extends UnitFeature
rule UnitAttribute {
	from website : Website!UnitElement
	to waf : WAF!UnitAttribute (
		attribute <- website.attribute.findOrmAttribute(),
		attributeDefaultValue <- website.defaultValue,
		obfuscateFormFields <- website.obfuscateFormFields,
		placeholder <- website.placeholder(),
		hasCustomisedPlaceholder <- website.placeholder() <> website.displayLabel(),
		validationPattern <- website.validationPattern
	)
}

-- @extends UnitFeature, AssociationReference
rule UnitAssociation {
	from website : Website!UnitAssociation
	to waf : WAF!UnitAssociation (
		options <-
			if website.options.oclIsUndefined() then
				website.options
			else
				website.options.findSelection()
			endif,
		optionsFilter <-
			if website.filteredOptions.oclIsUndefined() then
				website.filteredOptions
			else
				website.filteredOptions.findFilter()
			endif
	)
}

abstract rule AssociationReference {
	from website : Website!AssociationReference
	to waf : WAF!AssociationReference (
		association <- website.findOrmAssociation(),
		valueDisplay <-
			if website.valueDisplay.oclIsUndefined() then
				OclUndefined
			else
				website.valueDisplay.findOrmLabel()
			endif,
		childFeature <- website.childFeature
	)
}

abstract rule FeatureChildPath {
	from website : Website!FeatureChildPath
	to waf : WAF!FeatureChildPath (
	)
}

-- @extends FeatureChildPath
rule ChildPathAttribute {
	from website : Website!ChildPathAttribute
	to waf : WAF!ChildPathAttribute (
		attribute <- website.attribute.findOrmAttribute()
	)
}

-- @extends FeatureChildPath, AssociationReference
rule ChildPathAssociation {
	from website : Website!ChildPathAssociation
	to waf : WAF!ChildPathAssociation (
	)
}

-- @extends Expression
abstract rule FeaturePath {
	from website : Website!FeaturePath
	to waf : WAF!FeaturePath (
	)
}

-- @extends FeaturePath
rule FeaturePathAttribute {
	from website : Website!FeaturePathAttribute
	to waf : WAF!FeaturePathAttribute (
		attribute <- website.attribute.findOrmAttribute()
	)
}

-- @extends FeaturePath, AssociationReference
rule FeaturePathAssociation {
	from website : Website!FeaturePathAssociation
	to waf : WAF!FeaturePathAssociation (
	)
}

-- @extends FeaturePath
rule FeaturePathLabel {
	from website : Website!FeaturePathLabel
	to waf : WAF!FeaturePathLabel (
		label <- website.label.findOrmLabel()
	)
}

-- @extends UnitField
rule UnitLabel {
	from website : Website!UnitLabel
	to waf : WAF!UnitLabel (
		label <- website.label.findOrmLabel()
	)
}

-- @extends UnitField, NamedElement
abstract rule InterfaceField {
	from website : Website!InterfaceField
	to waf : WAF!InterfaceField (
		required <- website.required,
		fieldDefaultValue <- website.defaultValue,
		mustMatch <- website.mustMatch,
		placeholder <- website.placeholder(),
		hasCustomisedPlaceholder <- website.placeholder() <> website.displayLabel(),
		validationPattern <- website.validationPattern(),
		inputClass <- website.inputClass
	)
}

-- @extends InterfaceField
rule DataTypeField {
	from website : Website!DataTypeField
	to waf : WAF!DataTypeField (
		dataType <- thisModule.findOrmDataType(website.dataType.name),
--		caseInsensitive <- website.caseInsensitive,
		obfuscateFormFields <- website.obfuscateFormFields,
		encrypt <- website.encrypt
	)
}

-- @extends InterfaceField
rule DateField {
	from website : Website!DateField
	to waf : WAF!DateField (
		details <- website.details,
		format <- website.format
	)
}

-- @extends InterfaceField
rule CaptchaField {
	from website : Website!CaptchaField
	to waf : WAF!CaptchaField (
	)
}

abstract rule SelectableUnit {
	from website : Website!SelectableUnit
	to waf : WAF!SelectableUnit (
	)
}


-- @extends DynamicUnit
abstract rule SingletonUnit {
	from website : Website!SingletonUnit
	to waf : WAF!SingletonUnit (
		title <-
			if website.title.oclIsUndefined() then
				website.title
			else
				website.title.findOrmLabel()
			endif,
		contentType <- website.contentType.findOrmEntity()
	)
}


-- @extends DynamicUnit, SelectableUnit
abstract rule CollectionUnit {
	from website : Website!CollectionUnit
	to waf : WAF!CollectionUnit (
		unitTitle <-
			if website.unitTitle.oclIsUndefined() then
				website.unitTitle
			else
				website.unitTitle.findOrmLabel()
			endif,
		elementTitle <- website.elementTitle,
		truncateElementTitle <- website.truncateElementTitle,
		contentType <-
			if website.contentType->isEmpty() then
				website.contentType
			else
				website.contentType->first().findOrmEntity()
			endif,
		selection <-
			if website.selection.oclIsUndefined() then
				website.selection
			else
				website.selection.findSelection()
			endif,
		omitContainerLoad <- website.omitContainerLoad,
		containerType <-
			if website.containingType.oclIsUndefined() then
				website.containingType
			else
				website.containingType.findOrmEntity()
			endif,
		containerRepository <- website.findContainerRepository(),
		findContainerSelection <-
			if website.findContainerSelection.oclIsUndefined() then
				website.findContainerSelection
			else
				website.findContainerSelection.findSelection()
			endif,
		findElementSelection <-
			if website.findElementSelection.oclIsUndefined() then
				website.findElementSelection
			else
				website.findElementSelection.findSelection()
			endif,
		filter <-
			if website.filter.oclIsUndefined() then
				website.filter
			else
				website.filter.findFilter()
			endif,
		supportedFilters <-	website.supportedFilters->collect(f | f.findFilter()),
		omitFieldLabels <- website.omitFieldLabels,
		defaultPaginationSize <- website.defaultPaginationSize,
		maximumPaginationSize <- website.maximumPaginationSize,
		paginationControlPlacement <- website.paginationControlPlacement,
		emptyMessage <- website.emptyMessage,
		nextNpages <- website.nextNpages,
		previousNpages <- website.previousNpages,
		nextPageLabel <- website.nextPageLabel,
		nextPageIconName <- website.nextPageIconName,
		previousPageLabel <- website.previousPageLabel,
		previousPageIconName <- website.previousPageIconName,
		useDisabledPageLinks <- website.useDisabledPageLinks,
		useFirstLastPageLinks <- website.useFirstLastPageLinks,
		firstPageLabel <- website.firstPageLabel,
		firstPageIconName <- website.firstPageIconName,
		lastPageLabel <- website.lastPageLabel,
		lastPageIconName <- website.lastPageIconName,
		paginationClass <- website.paginationClass,
		paginationElementClass <- website.paginationElementClass,
		paginationAnchorClass <- website.paginationAnchorClass
	)
}


-- @extends SingletonUnit
abstract rule EditUnit {
	from website : Website!EditUnit
	to waf : WAF!EditUnit (
		disableWhen <- website.disableWhen,
		uriElement <-
			if website.uriElement.trim() <> '' then
				website.uriElement.trim()
			else if website.createDefaultUriElement then
				'update'
			else
				''
			endif endif,
			confirmDestination <- website.confirmDestination,
		confirmLabel <-
			if not website.confirmLabel.oclIsUndefined() and website.confirmLabel <> '' then
				website.confirmLabel
			else
				if  website.oclIsTypeOf(Website!CreateUnit) then
					'Create'
				else if  website.oclIsTypeOf(Website!CreateUpdateUnit) then
					'Save'
				else if  website.oclIsTypeOf(Website!UpdateUnit) then
					'Update'
				else if  website.oclIsTypeOf(Website!MapUnit) then
					'Save'
				else
					'Edit'
				endif endif endif endif
			endif,
		confirmMessage <-
			if website.confirmMessage.trim() <> '' then
				website.confirmMessage.trim()
			else
				OclUndefined
			endif,
		successMessage <-
			if website.successMessage.trim() <> '' then
				website.successMessage.trim()
			else
				OclUndefined
			endif,
		cancelDestination <- website.cancelDestination,
		cancelLabel <-
			if not website.cancelLabel.oclIsUndefined() and website.cancelLabel <> '' then
				website.confirmLabel
			else
				'Cancel'
			endif,
		customiseValues <- website.customiseValues
	)
}

-- @extends EditUnit
rule CreateUnit {
	from website : Website!CreateUnit
	to waf : WAF!CreateUnit (
		uriElement <-
			if website.uriElement.trim() <> '' then
				website.uriElement.trim()
			else if website.createDefaultUriElement then
				'create'
			else
				''
			endif endif
	)
}

-- @extends EditUnit, SelectableUnit
rule CreateUpdateUnit {
	from website : Website!CreateUpdateUnit
	to waf : WAF!CreateUpdateUnit (
		onSaveContinueEditing <- website.onSaveContinueEditing,
		createUriElement <-
			if website.createUriElement.trim() <> '' then
				website.createUriElement.trim()
			else
				'create'
			endif,
		clearLabel <- website.clearLabel
	)
}

-- @extends EditUnit, SelectableUnit
rule MapUnit {
	from website : Website!MapUnit
	to waf : WAF!MapUnit (
		readOnly <- website.readOnly,
		defaultZoomLevel <- website.defaultZoomLevel,
		location <- website.location.findOrmAttribute(),
		placeName <-
			if website.placeName.oclIsUndefined() then
				website.placeName
			else
				website.placeName.findOrmAttribute()
			endif
	)
}

-- @extends EditUnit, SelectableUnit
rule UpdateUnit {
	from website : Website!UpdateUnit
	to waf : WAF!UpdateUnit (
		onSaveContinueEditing <- website.onSaveContinueEditing
	)
}

-- @extends SingletonUnit, SelectableUnit
rule DetailsUnit {
	from website : Website!DetailsUnit
	to waf : WAF!DetailsUnit (
		selection <-
			if website.selection.oclIsUndefined() then
				website.selection
			else
				website.selection.findSelection()
			endif,
		omitFieldLabels <- website.omitFieldLabels
	)
}

-- @extends CollectionUnit
abstract rule IndexUnit {
	from website : Website!IndexUnit
	to waf : WAF!IndexUnit (
		rowClasses <- website.rowClasses.replaceAll(',', ' ')
	)
}

-- @extends IndexUnit
rule IndexGridUnit {
	from website : Website!IndexUnit (website.displayOption = #Grid)
	to waf : WAF!IndexGridUnit (
	)
}

-- @extends IndexUnit
rule IndexPageDirectionUnit {
	from website : Website!IndexUnit (website.displayOption = #PageDirection)
	to waf : WAF!IndexPageDirectionUnit (
	)
}

-- @extends IndexUnit
rule IndexLineDirectionUnit {
	from website : Website!IndexUnit (website.displayOption = #LineDirection)
	to waf : WAF!IndexLineDirectionUnit (
	)
}

-- @extends CollectionUnit
abstract rule CardsUnit {
	from website : Website!CardsUnit
	to waf : WAF!CardsUnit (
		badges <- website.badges,
		overlaySingleSelectAction <- website.overlaySingleSelectAction,
		localRowClass <- website.rowClass,
		localColumnClass <- website.columnClass,
		localCardClass <- website.cardClass,
		localCardHeaderClass <- website.cardHeaderClass,
		localCardBodyClass <- website.cardBodyClass,
		localCardFooterClass <- website.cardFooterClass
	)
}

-- @extends CardsUnit
rule TextCardsUnit {
	from website : Website!TextCardsUnit
	to waf : WAF!TextCardsUnit (
	)
}

-- @extends CardsUnit
rule DateCardsUnit {
	from website : Website!DateCardsUnit
	to waf : WAF!DateCardsUnit (
		elementDate <- website.elementDate
	)
}

-- @extends CollectionUnit
abstract rule ImageUnit {
	from website : Website!ImageUnit
	to waf : WAF!ImageUnit (
		imagePathFeature <- website.imagePathFeature,
		imageFilter <- website.imageFilter,
		missingImageFilter <- website.missingImageFilter,
		missingImagePath <- website.missingImagePath
	)
}

-- @extends CardsUnit, ImageUnit
rule ImageCardsUnit {
	from website : Website!ImageCardsUnit
	to waf : WAF!ImageCardsUnit (
		enableImageEnlargement <- website.enableImageEnlargement,
		overlayTitle <- website.overlayTitle,
		revealUntruncatedContent <- website.revealUntruncatedContent
	)
}

-- @extends ImageUnit
rule SliderUnit {
	from website : Website!SliderUnit
	to waf : WAF!SliderUnit (
		showTime <- website.showTime,
		transitionTime <- website.transitionTime
	)
}

-- @extends ImageUnit
rule GalleryUnit {
	from website : Website!GalleryUnit
	to waf : WAF!GalleryUnit (
		fullSizeFilter <- website.fullSizeFilter,
		showTime <- website.showTime,
		transitionTime <- website.transitionTime
	)
}

-- @extends DynamicUnit
abstract rule ControlUnit {
	from website : Website!ControlUnit
	to waf : WAF!ControlUnit (
		submitLabel <-
			if not website.submitLabel.oclIsUndefined() and website.submitLabel <> '' then
				website.submitLabel
			else
				if  website.oclIsKindOf(Website!SearchUnit) then
					'Search'
				else
					'Control'
				endif
			endif,
		cancelDestination <- website.cancelDestination,
		cancelLabel <- website.cancelLabel
	)
}

-- @extends ControlUnit
rule SearchUnit {
	from website : Website!SearchUnit
	to waf : WAF!SearchUnit (
		resultsDestination <- website.resultsDestination
	)
}


abstract rule SecurityUnit {
	from website : Website!SecurityUnit
	to waf : WAF!SecurityUnit (
	)
}

-- @extends DynamicUnit, SecurityUnit
rule RegistrationUnit {
	from website : Website!RegistrationUnit
	to waf : WAF!RegistrationUnit (
	)
}

-- @extends DynamicUnit, EditUnit
rule LoginUnit {
	from website : Website!LoginUnit
	to waf : WAF!LoginUnit (
	)
}

-- @extends DynamicUnit, SecurityUnit
rule LogoutUnit {
	from website : Website!LogoutUnit
	to waf : WAF!LogoutUnit (
	)
}

-- @extends DynamicUnit, SecurityUnit
rule ForgottenPasswordUnit {
	from website : Website!ForgottenPasswordUnit
	to waf : WAF!ForgottenPasswordUnit (
	)
}


abstract rule ActionContainer {
	from website : Website!ActionContainer
	to waf : WAF!ActionContainer (
		allActions <- website.actions,
		localActionNavigationClass <- website.actionNavigationClass
	)
}

-- @extends NamedDisplayElement
abstract rule Action {
	from website : Website!Action
	to waf : WAF!Action (
		disable <- website.disable,
		displayWhen <- website.displayWhen,
		enableWhen <- website.enableWhen,
		confirmMessage <-
			if website.confirmMessage.trim() <> '' then
				website.confirmMessage.trim()
			else
				OclUndefined
			endif,
		successMessage <-
			if website.successMessage.trim() <> '' then
				website.successMessage.trim()
			else
				OclUndefined
			endif,
		failureMessage <-
			if website.failureMessage.trim() <> '' then
				website.failuremMessage.trim()
			else
				OclUndefined
			endif,
		anchorClass <- website.anchorClass,
		headerClass <- website.headerClass,
		footerClass <- website.footerClass
	)
}


-- @extends Action
rule SecurityAction {
	from website : Website!SecurityAction
	to waf : WAF!SecurityAction (
		target <- website.target
	)
}

-- @extends Action
rule SelectAction {
	from website : Website!SelectAction
	to waf : WAF!SelectAction (
		target <- website.target,
		valuePath <- website.valuePath
	)
}

-- @extends Action
rule DeleteAction {
	from website : Website!DeleteAction 
	to waf : WAF!DeleteAction (
		confirmMessage <-
			if website.confirmMessage.trim() <> '' then
				website.confirmMessage.trim()
			else if website.displayLabel.trim() <> '' then
				website.displayLabel.trim().concat('?')
			else
				website.name.createLabel().concat('?')
			endif endif,
		localAuthorisationRoles <- website.requiresRole,
		uriElement <-
			if website.uriElement <> '' then
				website.uriElement
			else
				website.name.createName()
			endif
	)
}

-- @extends Action
abstract rule OperationAction {
	from website : Website!OperationAction 
	to waf : WAF!OperationAction (
		operation <-
			if website.operation.oclIsUndefined() then
				website.operation
			else
				website.operation.findBusinessOperation()
			endif,
		fileExtension <- website.fileExtension,
		localAuthorisationRoles <- website.requiresRole,
		uriElement <-
			if website.uriElement <> '' then
				website.uriElement
			else
				website.name.createName()
			endif
	)
}

-- @extends OperationAction
rule InstanceOperationAction {
	from website : Website!InstanceOperationAction 
	to waf : WAF!InstanceOperationAction (
	)
}

-- @extends OperationAction
rule ContainerOperationAction {
	from website : Website!ContainerOperationAction 
	to waf : WAF!ContainerOperationAction (
	)
}

-- @extends OperationAction
rule GeneralOperationAction {
	from website : Website!GeneralOperationAction 
	to waf : WAF!GeneralOperationAction (
	)
}


rule Badge {
	from website : Website!Badge
	to waf : WAF!Badge (
		iconName <- website.iconName,
		value <- website.value,
		title <-
			if website.title.oclIsUndefined() then
				OclUndefined
			else
				website.title.findOrmLabel()
			endif,
		displayWhen <- website.displayWhen,
		badgeClass <- website.badgeClass()
	)
}


rule ConstantReference {
	from website : Website!ConstantReference (website.isInterfaceExpression())
	to waf : WAF!ConstantReference (
		value <-
			if website.value.oclIsUndefined() then
				website.value
			else
				website.value.findServiceConstant()
			endif
	)
}
