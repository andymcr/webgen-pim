-- @atlcompiler emftvm 
--
-- @path Website=/uk.ac.man.cs.mdsd.webgen.model/model/website.ecore
-- @path ORM=/uk.ac.man.cs.mdsd.orm.model/model/orm.xecore
-- @path Service=/uk.ac.man.cs.mdsd.service.model/model/Service.xecore

module ServiceExplicit;
create service : Service from website : Website, orm : ORM;

uses PersistenceHelpers;
uses ServiceExpression;


helper context Website!FormalParameter def: isServiceFormal() : Boolean
	= self.formalFor.oclIsTypeOf(Website!BusinessOperation);


abstract rule NamedElement {
	from website : Website!NamedElement
	to service : Service!NamedElement (
		name <- website.name
	)
}

abstract rule FormalParameterList {
	from website : Website!FormalParameterList
	to service : Service!FormalParameterList (
		parameters <- website.parameters
	)
}

-- @extends NamedElement
rule FormalParameter {
	from website : Website!FormalParameter (website.isServiceFormal())
	to service : Service!FormalParameter (
		dataType <-
			if website.dataType.oclIsUndefined() then
				website.dataType
			else
				thisModule.findOrmDataType(website.dataType.name)
			endif,
		defaultValue <-
			if website.defaultValue.oclIsUndefined() then
				website.defaultValue
			else if website.defaultValue.trim() <> '' then
				website.defaultValue.trim()
			else
				OclUndefined
			endif endif,
		placeholder <-
			if not website.placeholder.oclIsUndefined() then
				website.placeholder.trim()
			else
				website.name.createLabel()
			endif,
		description <- website.description
	)
}


rule ServiceModel {
	from website : Website!Services
	to service : Service!ServiceModel (
		services <- website.services
	)
}


-- @extends NamedElement
rule Service {
	from website : Website!Service
	to service : Service!Service (
		constants <- website.constants,
		"uses" <- website."uses"->collect(r | r.findRepository()),
		operations <- website.operations
	)
} 

-- @extends NamedElement
rule Constant {
	from website : Website!Constant
	to service : Service!Constant (
		value <- website.value
	)
}

-- @extends NamedElement, FormalParameterList
rule BusinessOperation {
	from website : Website!BusinessOperation
	to service : Service!BusinessOperation (
		uses <- website.uses,
		resultType <- website.resultType,
		resultMimeType <- website.resultMimeType
	)
}



rule ConstantReference {
	from website : Website!ConstantReference
	to service : Service!ConstantReference (
		value <- website.value
	)
}

rule ParameterReference {
	from website : Website!ParameterReference (website.isServiceExpression())
	to service : Service!ParameterReference (
		parameter <- website.parameter
	)
}
