-- @atlcompiler emftvm

library InterfaceHelpers;

uses WebsiteHelpers;
uses PersistenceHelpers;


helper context Website!CollectionUnit def: findContainerRepository() : ORM!Repository
	= if self.containingType.oclIsUndefined() then
			OclUndefined
		else
			self.containingType.repository.findRepository()
		endif;

helper context Website!CollectionUnit def: findRepositoriesUsed() : Sequence(ORM!Repository)
	= if self.contentType->isEmpty() then
			Sequence{}
		else
			Sequence{ self.contentType->first().repository.findRepository() }
				->union(let containerRepository : ODM!Repository = self.findContainerRepository()
							in if self.omitContainerLoad or containerRepository.oclIsUndefined() then
									Sequence{}
								else
									Sequence{ containerRepository }
								endif)
		endif;

helper context Website!SingletonUnit def: findRepositoriesUsed() : Sequence(ORM!Repository)
	= if self.contentType.oclIsUndefined() then
			Sequence{}
		else
			Sequence{ self.contentType.repository.findRepository() }
		endif;

helper context Website!DynamicUnit def: findServicesUsed() : Sequence(Service!Service)
	= self.actionServices()->collect(s | s.findService())
		->asSet()
		->asSequence()->sortedBy(s | s.name);

helper context Website!DynamicUnit def: actionServices() : Sequence(Website!Service)
	= if self.oclIsKindOf(Website!ActionContainer) then
			self.actions
				->select(a | a.oclIsKindOf(Website!OperationAction))
				->select(a | not a.operation.oclIsUndefined())
				->collect(a | a.operation.definedBy)
		else
			Sequence{}
		endif;
	

helper context Website!Badge def: badgeClass() : String
	= if self.badgeClass.trim() <> '' then
			self.badgeClass.trim()
		else if self.displayedOn.unitBadgeClass.trim() <> '' then
			self.displayedOn.unitBadgeClass.trim()
		else if thisModule.findWebsiteUI().defaultBadgeClass.trim() <> '' then
			thisModule.findWebsiteUI().defaultBadgeClass.trim() 
		else
			OclUndefined
		endif endif endif;

helper context Website!Feature def: defaultDisplayValue() : String
	= if self.defaultDisplayValue.trim() <> '' then
				self.defaultDisplayValue.trim()
			else
				OclUndefined
			endif;

helper context Website!UnitAssociation def: defaultDisplayValue() : String
	= if self.defaultDisplayValue.trim() <> '' then
			self.defaultDisplayValue.trim()
		else
			self.association.defaultDisplayValue()
		endif;

helper context Website!UnitElement def: defaultDisplayValue() : String
	= if self.defaultDisplayValue.trim() <> '' then
			self.defaultDisplayValue.trim()
		else
			self.attribute.defaultDisplayValue()
		endif;

helper context Website!Feature def: displayLabel() : String
	= if self.displayLabel.trim() <> '' then
			self.displayLabel.trim()
		else
			self.name.createLabel()
		endif;

helper context Website!Feature def: emptyDisplayValue() : String
	= if self.emptyDisplayValue.trim() <> '' then
			self.emptyDisplayValue.trim()
		else
			OclUndefined
		endif;

helper context Website!UnitAssociation def: emptyDisplayValue() : String
	= if self.emptyDisplayValue.trim() <> '' then
			self.emptyDisplayValue.trim()
		else
			self.association.emptyDisplayValue()
		endif;

helper context Website!UnitElement def: emptyDisplayValue() : String
	= if self.emptyDisplayValue.trim() <> '' then
			self.emptyDisplayValue.trim()
		else
			self.attribute.emptyDisplayValue()
		endif;

helper context Website!Association def: findOrmEntity(entity : Website!Entity) : ORM!Entity
	= if entity.features->includes(self) then
			thisModule.findOrmEntity(entity.name)
		else
			thisModule.findOrmEntity(self.targetEntity.name)
		endif;

helper context Website!Attribute def: findOrmLabel() : ORM!Label
	= self.findOrmEntity().getOrmFeature(self.name);

helper context Website!ModelLabel def: findOrmLabel() : ORM!Label
	= thisModule.findOrmEntity(self.labelFor.name).getOrmLabel(self.name);


helper context Website!Attribute def: interfaceType() : String
	= if self.oclIsTypeOf(Website!DataTypeAttribute) then
			if self.interfaceType.trim() <> '' then
				self.interfaceType.trim()
			else
				if self.oclIsTypeOf(Website!DataTypeAttribute) then
					if self.dataType.interfaceType.trim() <> '' then
						self.dataType.interfaceType.trim()
					else
						self.name.lowercaseFirst()
					endif
				else
					self.name.lowercaseFirst()
				endif
			endif
		else if self.oclIsTypeOf(Website!DateAttribute) then
			if self.details = #DateAndTime then
				'datetime'
			else if self.details = #DateOnly then
				'date'
			else
				'time'
			endif endif
		else
			OclUndefined
		endif endif;

helper context Website!DataTypeField def: interfaceType() : String
	= if self.interfaceType.trim() <> '' then
			self.interfaceType.trim()
		else
			if self.dataType.interfaceType.trim() <> '' then
				self.dataType.interfaceType.trim()
			else
				self.name.lowercaseFirst()
			endif
		endif;

helper context Website!InterfaceField def: validationPattern() : String
	= if self.validationPattern.trim() <> '' then
			self.validationPattern.trim()
		else
			if self.oclIsTypeOf(Website!DataTypeField) then
				self.dataType.validationPattern.trim()
			else
				OclUndefined
			endif
		endif;

helper context Website!DynamicUnit def: messageWhenHidden() : String
	= if self.messageWhenHidden.trim() <> '' then
			self.messageWhenHidden.trim()
		else
			OclUndefined
		endif;