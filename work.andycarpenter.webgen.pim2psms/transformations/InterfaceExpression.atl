-- @atlcompiler emftvm 
--
-- @path Website=/work.andycarpenter.webgen.pims.model/model/website.ecore
-- @path WAF=/work.andycarpenter.psms.waf/model/Waf.xecore

module InterfaceExpression;
create waf : WAF from website : Website;

uses PersistenceHelpers;


helper context Website!Expression def: isInterfaceExpression() : Boolean
	= if self.rootContainer.oclIsUndefined() then
			false
		else if self.rootContainer.oclIsKindOf(Website!DynamicUnit) then
			true
		else if self.rootContainer.oclIsKindOf(Website!RouteActual) then
			true
		else if self.rootContainer.oclIsKindOf(Website!UnitField) then
			true
		else if self.rootContainer.oclIsKindOf(Website!Action) then
			true
		else if self.rootContainer.oclIsKindOf(Website!Badge) then
			true
		else
			false
		endif endif endif endif endif endif;

helper context Website!ChildFeature def: isInterfaceExpression() : Boolean
	= self.parent.isInterfaceExpression();

helper context Website!DisplayValue def: isInterfaceExpression() : Boolean
	= true;

helper context Website!ModelLabelFeature def: isInterfaceExpression() : Boolean
	= false;

helper context Website!ParameterReference def: isInterfaceExpression() : Boolean
	= false;

helper context Website!SelectionPath def: isInterfaceExpression() : Boolean
	= false;

helper context Website!UnitAssociation def: isInterfaceExpression() : Boolean
	= true;


abstract rule Expression {
	from website : Website!Expression (website.isInterfaceExpression())
	to waf : WAF!Expression (
	)
}


-- @extends Expression
abstract rule Operand {
	from website : Website!Operand (website.isInterfaceExpression())
	to waf : WAF!Operand (
	)
}


-- @extends Operand
abstract rule Literal {
	from website : Website!Literal (website.isInterfaceExpression())
	to waf : WAF!Literal (
	)
}

-- @extends Literal
rule NullLiteral {
	from website : Website!NullLiteral (website.isInterfaceExpression())
	to waf : WAF!NullLiteral (
	)
}

-- @extends Literal
rule BooleanLiteral {
	from website : Website!BooleanLiteral (website.isInterfaceExpression())
	to waf : WAF!BooleanLiteral (
		value <- website.value
	)
}

-- @extends Literal
rule IntegerLiteral {
	from website : Website!IntegerLiteral (website.isInterfaceExpression())
	to waf : WAF!IntegerLiteral (
		value <- website.value
	)
}

-- @extends Literal
rule StringLiteral {
	from website : Website!StringLiteral (website.isInterfaceExpression())
	to waf : WAF!StringLiteral (
		value <- website.value
	)
}

-- @extends Literal
rule TimeLiteral {
	from website : Website!TimeLiteral (website.isInterfaceExpression())
	to waf : WAF!TimeLiteral (
		value <- website.value
	)
}


-- @extends Operand
abstract rule Variable {
	from website : Website!Variable (website.isInterfaceExpression())
	to waf : WAF!Variable (
	)
}

-- @extends Variable
rule CurrentTime {
	from website : Website!CurrentTime (website.isInterfaceExpression())
	to waf : WAF!CurrentTime (
	)
}

-- @extends Variable
rule CurrentUser {
	from website : Website!CurrentUser (website.isInterfaceExpression())
	to waf : WAF!CurrentUser (
	)
}


abstract rule NamedElement {
	from website : Website!NamedElement
	to waf : WAF!NamedElement (
		name <- website.name
	)
}

abstract rule FormalParameterList {
	from website : Website!FormalParameterList
	to waf : WAF!FormalParameterList (
		parameters <- website.parameters
	)
}

-- @extends NamedElement
rule FormalParameter {
	from website : Website!FormalParameter (website.formalFor.oclIsTypeOf(Website!Callable))
	to waf : WAF!FormalParameter (
		dataType <-
			if website.dataType.oclIsUndefined() then
				website.dataType
			else
				thisModule.findOrmDataType(website.dataType.name)
			endif,
		defaultValue <-
			if website.defaultValue.oclIsUndefined() then
				website.defaultValue
			else if website.defaultValue.trim() <> '' then
				website.defaultValue.trim()
			else
				OclUndefined
			endif endif,
		placeholder <-
			if not website.placeholder.oclIsUndefined() then
				website.placeholder.trim()
			else
				website.name.createLabel()
			endif,
		description <- website.description
	)
}

rule ParameterReference {
	from website : Website!ParameterReference (website.isInterfaceExpression())
	to waf : WAF!ParameterReference (
		parameter <- website.parameter
	)
}

-- @extends FormalParameterList
rule Callable {
	from website : Website!Callable (website.isInterfaceExpression())
	to waf : WAF!Callable (
		expression <- website.body
	)
}


-- @extends Operand
rule Reducefunction {
	from website : Website!ReduceFunction (website.isInterfaceExpression())
	to waf : WAF!ReduceFunction (
		value <- website.value,
		initial <- website.initial,
		callback <- website.callback
	)
}

-- @extends Operand
rule SizeFunction {
	from website : Website!SizeFunction (website.isInterfaceExpression())
	to waf : WAF!SizeFunction (
		value <- website.value
	)
}


-- @extends Expression
abstract rule Predicate {
	from website : Website!Predicate
	to waf : WAF!Predicate (
		negated <- website.negated
	)
}

-- @extends Predicate
rule PredicateBooleanVariable {
	from website : Website!PredicateBooleanVariable (website.isInterfaceExpression())
	to waf : WAF!PredicateBooleanVariable (
		feature <- website.variable
	)
}

-- @extends Predicate
rule PredicateBooleanOperator {
	from website : Website!PredicateBooleanOperator (website.isInterfaceExpression())
	to waf : WAF!PredicateBooleanOperator (
		predicates <- website.predicates,
		operator <- website.operator
	)
}

-- @extends Predicate
rule PredicateEqualityOperator {
	from website : Website!PredicateEqualityOperator (website.isInterfaceExpression())
	to waf : WAF!PredicateEqualityOperator (
		left <- website.left,
		right <- website.right
	)
}

-- @extends Predicate
rule PredicateComparisonOperator {
	from website : Website!PredicateComparisonOperator (website.isInterfaceExpression())
	to waf : WAF!PredicateComparisonOperator (
		left <- website.left,
		operator <- website.operator,
		right <- website.right
	)
}

-- @extends Predicate
rule PredicateLikeOperator {
	from website : Website!PredicateLikeOperator (website.isInterfaceExpression())
	to waf : WAF!PredicateLikeOperator (
		left <- website.left,
		right <- website.right
	)
}

-- @extends Predicate
rule PredicateIsNullOperator {
	from website : Website!PredicateIsNull (website.isInterfaceExpression())
	to waf : WAF!PredicateIsNull (
		value <- website.value
	)
}

-- @extends Predicate
rule PredicateIsEmptyOperator {
	from website : Website!PredicateIsEmpty (website.isInterfaceExpression())
	to waf : WAF!PredicateIsEmpty (
		value <- website.value
	)
}


-- @extends Expression
rule ArithmeticOperation {
	from website : Website!ArithmeticOperation (website.isInterfaceExpression())
	to waf : WAF!ArithmeticOperation (
		operands <- website.operands,
		operator <- website.operator
	)
}