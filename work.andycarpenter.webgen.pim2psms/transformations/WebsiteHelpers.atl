-- @atlcompiler emftvm

library WebsiteHelpers;

helper context String def: lowercaseFirst() : String
	= self.substring(1, 1).toLower().concat(self.substring(2, self.size()));

helper context String def: uppercaseFirst() : String
	= self.substring(1, 1).toUpper().concat(self.substring(2, self.size()));

helper context String def: createName() : String
	= if self.trim().replaceAll('[A-Z]', '') = '' then
			self.trim()
		else
			self.trim().lowercaseFirst().replaceAll('([A-Z])', '_$1')
		endif;

helper context String def: createLabel() : String
	= if self.trim().replaceAll('[A-Z]', '') = '' then
			self.trim()
		else
			self.replaceAll('([A-Z])', ' $1').trim().uppercaseFirst()
		endif;

helper context String def: cleanString() : String
	= if self.trim() = '' then
			OclUndefined
		else
			self.trim()
		endif;


helper def: findWebGenModel() : Website!WebGenModel
	= Website!WebGenModel.allInstancesFrom('website')->first();

helper def: findWebsiteProperties() : Website!WebsiteProperties
	= thisModule.findWebGenModel().websiteProperties;

helper def: findWebsiteSecurity() : Website!Security
	= thisModule.findWebGenModel().security;

helper def: findWebsiteUI() : Website!Persistence
	= thisModule.findWebGenModel().webUI;


helper context Service!Selection def: getServiceFormalParameter(name : String) : Service!FormalParameter
	= self.parameters->any(p | p.name = name);

helper context Website!FormalParameter def: findServiceFormalParameter() : Service!FormalParameter
	= self.formalFor.findServiceSelection().getServiceFormalParameter(self.name);

helper context ORM!Entity def: findService() : Service!Service
	= thisModule.findServiceFor(self.name);

helper def: findService(name : String) : Service!Service
	= Service!Service.allInstancesFrom('service')->any(s | s.name = name);

helper context Website!Service def: findService() : Service!Service
	= thisModule.findService(self.name);

helper context Service!Service def: getServiceConstant(name : String) : Service!Selection
	= self.constants->any(s | s.name = name);

helper context Website!Constant def: findServiceConstant() : Service!Selection
	= self.definedBy.findService().getServiceConstant(self.name);

helper context Service!Service def: getBusinessOperation(name : String) : Service!Selection
	= self.operations->any(s | s.name = name);

helper context Website!BusinessOperation def: findBusinessOperation() : Service!Selection
	= self.definedBy.findService().getBusinessOperation(self.name);


helper context Website!UnitField def: dateFormat() : String
	= if not self.dateFormat.oclIsUndefined() and self.dateFormat <> '' then
			self.dateFormat
		else if self.oclIsTypeOf(Website!UnitElement) then
			self.attribute.dateFormat()
		else if self.oclIsTypeOf(Website!UnitAssociation) then
			if not self.childFeature.oclIsUndefined() then
				self.childFeature.dateFormat()
			else
				OclUndefined
			endif
		else if self.oclIsKindOf(Website!InterfaceField) then
			if self.oclIsTypeOf(Website!DateField) then
				self.format
			else
				OclUndefined
			endif
		else
			OclUndefined
		endif endif endif endif;

helper context Website!FeatureChildPath def: dateFormat() : String
	= if self.oclIsTypeOf(Website!ChildPathAttribute) then
			self.attribute.dateFormat()
		else
			if self.childFeature.oclIsUndefined() then
				OclUndefined
			else
				self.childFeature.dateFormat()
			endif
		endif;


helper def: findWafMenu(name : String) : WAF!Menu
	= WAF!Menu.allInstancesFrom('waf')->select(m | m.name = name)->first();